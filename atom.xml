<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向着阳光奔跑</title>
  <subtitle>没有到不了的远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://peilinghui.com/"/>
  <updated>2018-09-29T09:21:57.267Z</updated>
  <id>http://peilinghui.com/</id>
  
  <author>
    <name>向阳</name>
    <email>peilinghuibest@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在APP中IM使用融云</title>
    <link href="http://peilinghui.com/2018/09/21/%E5%9C%A8APP%E4%B8%ADIM%E4%BD%BF%E7%94%A8%E8%9E%8D%E4%BA%91/"/>
    <id>http://peilinghui.com/2018/09/21/在APP中IM使用融云/</id>
    <published>2018-09-21T04:43:28.000Z</published>
    <updated>2018-09-29T09:21:57.267Z</updated>
    
    <content type="html">&lt;p&gt;在项目APP中接入IM的功能，有环信和融云的两种选择，在纠结以后，选择了融云进行开发。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先可以参照官网：&lt;a href=&quot;https://www.rongcloud.cn/docs/ios.html#prepare&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.rongcloud.cn/docs/ios.html#prepare&lt;/a&gt;来进行基本的融云包的导入和集成到工程中。&lt;br&gt;通过在控制台中API的调用&lt;a href=&quot;https://developer.rongcloud.cn/apitool/A0dLuQBjI8MJKehwuu0=&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.rongcloud.cn/apitool/A0dLuQBjI8MJKehwuu0=&lt;/a&gt;来模拟接口调用的过程。&lt;br&gt;集成融云，就是能用好他所提供的API，就能完成大部分的工作，用好IMKit和IMLib。IMKit主要就是页面，可以在它的基础上进行我们自己页面的自定义，IMLib就是通讯的API，通过使用它暴露的方法来实现及时通讯，单聊，群聊，以及自定义消息的发送。&lt;/p&gt;
&lt;h1 id=&quot;导入融云，连接融云&quot;&gt;&lt;a href=&quot;#导入融云，连接融云&quot; class=&quot;headerlink&quot; title=&quot;导入融云，连接融云&quot;&gt;&lt;/a&gt;导入融云，连接融云&lt;/h1&gt;&lt;p&gt;在APPDelegate中注册自定义的消息类型和做消息推送相关的内容。&lt;br&gt;最好是在登录APP的时候，让服务端返回userId和rongcloudToken，获取到Token以后，登录融云的服务器。可以写一个单例的工具类，来处理融云的登录，断开连接，和&lt;rcimuserinfodatasource, rcimreceivemessagedelegate,rcimconnectionstatusdelegate=&quot;&quot;&gt;用户数据源的一些方法的实现。&lt;/rcimuserinfodatasource,&gt;&lt;/p&gt;
&lt;h1 id=&quot;用户信息和群组信息的数据源&quot;&gt;&lt;a href=&quot;#用户信息和群组信息的数据源&quot; class=&quot;headerlink&quot; title=&quot;用户信息和群组信息的数据源&quot;&gt;&lt;/a&gt;用户信息和群组信息的数据源&lt;/h1&gt;&lt;p&gt;因为融云已经做好了基本的聊天通讯的功能，我们要做的就是处理用户昵称，头像和群组的一些信息的处理，设置&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置用户信息源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [R&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt; sharedR&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt;]&lt;span class=&quot;variable&quot;&gt;.userInfoDataSource&lt;/span&gt; = [JRIMDataSource shareInstance];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//群组信息源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [R&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt; sharedR&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt;]&lt;span class=&quot;variable&quot;&gt;.groupInfoDataSource&lt;/span&gt; = [JRIMDataSource shareInstance];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//群成员数据源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [R&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt; sharedR&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt;]&lt;span class=&quot;variable&quot;&gt;.groupMemberDataSource&lt;/span&gt; = [JRIMDataSource shareInstance];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;用户信息需要通过实现RCIMUserInfoDataSource的方法&quot;&gt;&lt;a href=&quot;#用户信息需要通过实现RCIMUserInfoDataSource的方法&quot; class=&quot;headerlink&quot; title=&quot;用户信息需要通过实现RCIMUserInfoDataSource的方法&quot;&gt;&lt;/a&gt;用户信息需要通过实现RCIMUserInfoDataSource的方法&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;getUserInfoWithUserId:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSString&lt;/span&gt; *)&lt;/span&gt;userId completion:&lt;span class=&quot;params&quot;&gt;(void (^)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCUserInfo&lt;/span&gt; *user&lt;span class=&quot;variable&quot;&gt;Info&lt;/span&gt;)&lt;/span&gt;)completion;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们需要在这个方法里面调用自己的接口来获取用户的相关信息，就是头像和昵称，然后把获取到的数据放到RCUserInfo对象的userId，name，和portraitUri中，也把这个数据存到FMDB数据库中。这样在聊天列表展示聊天cell的时候，可以通过&lt;br&gt;&lt;code&gt;RCUserInfo *user = [[RCIM sharedRCIM] getUserInfoCache:model.targetId];&lt;/code&gt;这个方法，如果User存在的话，直接赋值，如果不存在的话，再次调用getUserInfoWithUserId这个来获取用户的信息，获取到以后刷新用户信息，并存到数据库中。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr_selector&quot;&gt;[[RCIM sharedRCIM]&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;refreshUserInfoCache&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;withUserId&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.userId&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr_selector&quot;&gt;[[JRDataBaseManager  shareInstance]&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;insertUserToDB&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:userInfo&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;群组信息实现RCIMGroupInfoDataSource方法&quot;&gt;&lt;a href=&quot;#群组信息实现RCIMGroupInfoDataSource方法&quot; class=&quot;headerlink&quot; title=&quot;群组信息实现RCIMGroupInfoDataSource方法&quot;&gt;&lt;/a&gt;群组信息实现RCIMGroupInfoDataSource方法&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;getGroupInfoWithGroupId:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSString&lt;/span&gt; *)&lt;/span&gt;groupId completion:&lt;span class=&quot;params&quot;&gt;(void (^)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCGroup&lt;/span&gt; *group&lt;span class=&quot;variable&quot;&gt;Info&lt;/span&gt;)&lt;/span&gt;)completion;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;融云自带的群组的信息类是RCGroup，只包含groupId，groupName和portraitUri，我们如果需要更多的信息存储，只需要继承自RCGroup,&lt;br&gt;如果我们需要在群组名称中携带很多信息的话，只需要把相关的信息放到一个字典中然后后转化成json字符串赋值给groupName&lt;/p&gt;
&lt;h3 id=&quot;群组成员实现&quot;&gt;&lt;a href=&quot;#群组成员实现&quot; class=&quot;headerlink&quot; title=&quot;群组成员实现&quot;&gt;&lt;/a&gt;群组成员实现&lt;/h3&gt;&lt;p&gt;我们可以写个单例来实现这三个方法。在方法实现中通过调用自己的接口获取到相关的数据，然后调用融云的接口refreshGroupInfoCache存储起来。&lt;/p&gt;
&lt;h1 id=&quot;消息列表&quot;&gt;&lt;a href=&quot;#消息列表&quot; class=&quot;headerlink&quot; title=&quot;消息列表&quot;&gt;&lt;/a&gt;消息列表&lt;/h1&gt;&lt;p&gt;消息列表需要继承自RCConversationListViewController，只要继承了这个，然后通过其暴露的属性和方法来设置基本列表的样式，当有消息的时候就能展示出来融云自带的聊天cell。如果我们要自定义的消息列表的cell。主要实现的方法：&lt;/p&gt;
&lt;h3 id=&quot;重写方法：插入自定义会话model&quot;&gt;&lt;a href=&quot;#重写方法：插入自定义会话model&quot; class=&quot;headerlink&quot; title=&quot;重写方法：插入自定义会话model&quot;&gt;&lt;/a&gt;重写方法：插入自定义会话model&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *)willReloadTableData:(&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *)dataSource&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [dataSource enumerateObjectsUsingBlock:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;  _Nonnull obj, &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; idx, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; * _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RCConversationModel *model = (RCConversationModel *)obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//筛选请求添加好友的系统消息，用于生成自定义会话类型的cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (model&lt;span class=&quot;variable&quot;&gt;.conversationType&lt;/span&gt; == ConversationType_GROUP) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            model&lt;span class=&quot;variable&quot;&gt;.conversationModelType&lt;/span&gt; = RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (model&lt;span class=&quot;variable&quot;&gt;.conversationType&lt;/span&gt; == ConversationType_PRIVATE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            model&lt;span class=&quot;variable&quot;&gt;.conversationModelType&lt;/span&gt; = RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dataSource;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注：在该方法内筛选数据源dataSource中具体的会话类型及消息的model，将model 类型必须修改为 model.conversationModelType=RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION&lt;/p&gt;
&lt;p&gt;如果需要插入类似微博消息列表中的点赞、评论，关注和系统消息的自定义cell，需要在这个方法中自定义Model，并且拼接到DataSource中。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_isShowServiceSystem == &lt;span class=&quot;keyword&quot;&gt;NO&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RCConversationModel *&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt; = [[RCConversationModel alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.targetId = JR_Service_System_ID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.conversationType = ConversationType_SYSTEM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.conversationModelType = RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [dataSource addObject:&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;重写返回-cell-高度的方法&quot;&gt;&lt;a href=&quot;#重写返回-cell-高度的方法&quot; class=&quot;headerlink&quot; title=&quot;重写返回 cell 高度的方法&quot;&gt;&lt;/a&gt;重写返回 cell 高度的方法&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;CGFloat&lt;/span&gt;)&lt;/span&gt;rcConversationListTableView:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;UITableView&lt;/span&gt; *)&lt;/span&gt;tableView heightForRowAtIndexPath:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSIndexPath&lt;/span&gt; *)&lt;/span&gt;indexPath;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果需要显示不同高度测自定义的cell，只需要在这个方法中，根据判断的类型返回高度值。&lt;/p&gt;
&lt;h3 id=&quot;自定义会话Cell显示时的回调&quot;&gt;&lt;a href=&quot;#自定义会话Cell显示时的回调&quot; class=&quot;headerlink&quot; title=&quot;自定义会话Cell显示时的回调&quot;&gt;&lt;/a&gt;自定义会话Cell显示时的回调&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;-&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCConversationBaseCell&lt;/span&gt; *)&lt;/span&gt;rcConversationListTableView:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;UITableView&lt;/span&gt; *)&lt;/span&gt;tableView cellForRowAtIndexPath:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSIndexPath&lt;/span&gt; *)&lt;/span&gt;indexPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者是即将显示cell的时候把用户信息和群组信息放到cell里面&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;willDisplayConversationTableCell:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCConversationBaseCell&lt;/span&gt; *)&lt;/span&gt;cell atIndexPath:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSIndexPath&lt;/span&gt; *)&lt;/span&gt;indexPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果使用的都是自定义的cell的话，要设置在model.conversationModelType == RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION)先区分数据模型是自定义的，再区分是单聊还是群聊conversationType。对于每一种会话类型，自定义我们需要的cell的样式，然后通过取出对应index的Model。&lt;br&gt;  &lt;code&gt;RCConversationModel *model = self.conversationListDataSource[indexPath.row];&lt;/code&gt;&lt;br&gt;来把Model中的头像、昵称、最近消息、时间、未读数、一些信息放到cell对应的位置。&lt;/p&gt;
&lt;h3 id=&quot;点击事件-–点击cell的回调&quot;&gt;&lt;a href=&quot;#点击事件-–点击cell的回调&quot; class=&quot;headerlink&quot; title=&quot;点击事件 –点击cell的回调&quot;&gt;&lt;/a&gt;点击事件 –点击cell的回调&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;onSelectedTableRow:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCConversationModelType&lt;/span&gt;)&lt;/span&gt;conversationModelType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         conversationModel:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCConversationModel&lt;/span&gt; *)&lt;/span&gt;model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               atIndexPath:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSIndexPath&lt;/span&gt; *)&lt;/span&gt;indexPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在点击事件中，根据你自定义cell类型的不同，跳转到不同的页面，如果是单聊，群聊跳转到聊天会话页面，如果是系统消息：评论回复、点赞、关注、系统消息，跳转到自己写的页面，融云提供了这种系统消息的通知的接口，我们可以通过它的接口就可以实现通知的推送，不需要接入第三方极光等来进行推送。只需要把这些通知调用发送接口，作为消息发送给用户。&lt;/p&gt;
&lt;p&gt;例如：评论和回复页面：继承自RCConversationViewController，隐藏下面的输入栏&lt;code&gt;self.chatSessionInputBarControl.hidden = YES;&lt;/code&gt;&lt;br&gt;注册自定义的消息和数据模型：&lt;code&gt;[self registerClass:[JRServiceCommentCell class] forMessageClass:[JRServiceCommentModel class]];&lt;/code&gt;&lt;br&gt;通过接收到通知以后，在会话页面插入一条消息并展示：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//在会话页面中插入一条消息并展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                             selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(updateForSharedMessageInsertSuccess:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 name:&lt;span class=&quot;string&quot;&gt;@&quot;RCDSharedMessageInsertSuccess&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)updateForSharedMessageInsertSuccess:(&lt;span class=&quot;built_in&quot;&gt;NSNotification&lt;/span&gt; *)notification &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RCMessage *message = notification&lt;span class=&quot;variable&quot;&gt;.object&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (message&lt;span class=&quot;variable&quot;&gt;.conversationType&lt;/span&gt; == &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.conversationType&lt;/span&gt; &amp;amp;&amp;amp; [message&lt;span class=&quot;variable&quot;&gt;.targetId&lt;/span&gt; isEqualToString:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.targetId&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; appendAndDisplayMessage:message];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;评论和回复的cell继承自RCMessageBaseCell。可以自己写这个cell的样式。再说一下这个cell的数据源，也是自己自定义的CommentModel继承自RCMessageContent，就和自定义消息类型一样的，需要把消息内容编码成JSON，然后将JSON解码成消息内容，定义消息的类型名（与融云消息不要名字一样），类似我们平时用网络请求后的JSON数据解析，把NSData的data消息解码成字典，&lt;code&gt;NSDictionary *dictionary = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&amp;amp;error];&lt;/code&gt;然后把字典中的dictionary[@”content”]取出来，判断是字典还是字符串类型，如果是字典的话就用YYModel解析到一个Model中来使用。如果是字符串的话就用方法把JSON字符串转化为字典，&lt;/p&gt;
&lt;h1 id=&quot;消息会话&quot;&gt;&lt;a href=&quot;#消息会话&quot; class=&quot;headerlink&quot; title=&quot;消息会话&quot;&gt;&lt;/a&gt;消息会话&lt;/h1&gt;&lt;h1 id=&quot;消息会话展示&quot;&gt;&lt;a href=&quot;#消息会话展示&quot; class=&quot;headerlink&quot; title=&quot;消息会话展示&quot;&gt;&lt;/a&gt;消息会话展示&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;单聊不显示对方名称：RCMessageModel的model.isDisplayNickname来设置&lt;br&gt;2.群聊显示身份的名称：获取到群成员数组以后，遍历数组，把身份和成员的昵称存到RCUserInfo的name中，并保存到SDK中，再把  [self.conversationMessageCollectionView reloadData];&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重要的方法:&lt;br&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;sendMessage:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCMessageContent&lt;/span&gt; *)&lt;/span&gt;messageContent pushContent:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSString&lt;/span&gt; *)&lt;/span&gt;pushContent;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在发送自定义消息和通知的时候使用，当我在发送一个邀请好友进入聊天室的自定义cell的时候，使用&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JRInviteMessage *inviteMsg = [JRInviteMessage messageWithGroupId:&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                             WithGroupHeader:NSStringObject(&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Img).length==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;?  &lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;ImgAll :&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                               WithGroupName:[&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Name containsString:@&lt;span class=&quot;string&quot;&gt;&quot;、&quot;&lt;/span&gt;] ? &lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;NameAll : &lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            WithGroupProflie:NSStringObject(&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Introduct).length==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;?  @&lt;span class=&quot;string&quot;&gt;&quot;暂无简介&quot;&lt;/span&gt; :&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Introduct];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[RCIM sharedRCIM]sendMessage:ConversationType_PRIVATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                 targetId:selectArray[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  content:inviteMsg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              pushContent:nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                 pushData:nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  success:^(long messageId) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    error:^(RCErrorCode nErrorCode, long messageId)&amp;#123;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于文字，图片和自定义的消息的cell都可以重写，文字继承自RCTextMessageCell，语音继承自RCVoiceMessageCell，图片继承自RCImageMessageCell，其他自定义邀请好友进入群聊的cell继承自RCMessageCell或者是它的父类RCMessageBaseCell，在方法中实现&lt;br&gt;&lt;code&gt;- (void)setDataModel:(RCMessageModel *)model&lt;/code&gt;来设置自己想要的属性的样式.&lt;/p&gt;
&lt;h3 id=&quot;进入会话页面要从服务器获取用户或是群组的信息并更新本地数据库&quot;&gt;&lt;a href=&quot;#进入会话页面要从服务器获取用户或是群组的信息并更新本地数据库&quot; class=&quot;headerlink&quot; title=&quot;进入会话页面要从服务器获取用户或是群组的信息并更新本地数据库&quot;&gt;&lt;/a&gt;进入会话页面要从服务器获取用户或是群组的信息并更新本地数据库&lt;/h3&gt;&lt;p&gt;这样做的目的就是：用户换了头像或者是昵称以后，在会话页面可以更新用户的数据，&lt;/p&gt;
&lt;h3 id=&quot;自定义Cell的点击&quot;&gt;&lt;a href=&quot;#自定义Cell的点击&quot; class=&quot;headerlink&quot; title=&quot;自定义Cell的点击&quot;&gt;&lt;/a&gt;自定义Cell的点击&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;didTapMessageCell:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCMessageModel&lt;/span&gt; *)&lt;/span&gt;model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;推送&quot;&gt;&lt;a href=&quot;#推送&quot; class=&quot;headerlink&quot; title=&quot;推送&quot;&gt;&lt;/a&gt;推送&lt;/h1&gt;&lt;p&gt;就像上面的会话列表里面的评论和回复一样，只要在这个的地方，调用自己服务端在融云基础上开发的接口，就能把Model传过去，把需要发送的数据放在一个字典里面，然后jsonStringWithObject把字典转换成JSON字符串&lt;/p&gt;
&lt;h1 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h1&gt;&lt;p&gt;1.修改聊天气泡以及一些图标&lt;br&gt;直接把要替换的图片替换RongCloud.bundle文件中的图片即可。&lt;/p&gt;
&lt;p&gt;2.当融云SDK和BlocksKit被引入到同一工程，通过融云的聊天UI界面去选择照片、拍摄照片并发送时，无法正常选择和发送。&lt;br&gt;问题的本质：&lt;/p&gt;
&lt;p&gt;UIImagePickerController代理中的方法冲突了，导致融云SDK中选择并发送照片的功能失效。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;BlocksKit是开源方法，直接编辑UIImagePickerController+BlocksKit.m文件，注释红框部分，问题便可解决。&lt;img src=&quot;http://rongcloud-web.qiniudn.com/39ef2374b74fb20691d28a5b6b9824d1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3.//点击消息发送失败红点的回调&lt;br&gt;&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)didTapmessageFailedStatusViewForResend&lt;span class=&quot;value&quot;&gt;:(RCMessageModel *)model&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     RCMessageContent *resendContent = (RCMessageContent *)model.content;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;AlertShowMoreButtons&lt;/span&gt;(&lt;span class=&quot;at_rule&quot;&gt;@[@&lt;span class=&quot;string&quot;&gt;&quot;重新发送&quot;&lt;/span&gt;], ^(NSString *title,&lt;span class=&quot;preprocessor&quot;&gt; NSInteger&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt; moreButtonIndex&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (&lt;span class=&quot;function&quot;&gt;BoolEqualToString&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;title&lt;/span&gt;, &lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;string&quot;&gt;&quot;重新发送&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr_selector&quot;&gt;[self resendMessage:resendContent]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;解决的方法&quot;&gt;&lt;a href=&quot;#解决的方法&quot; class=&quot;headerlink&quot; title=&quot;解决的方法&quot;&gt;&lt;/a&gt;解决的方法&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;在项目APP中接入IM的功能，有环信和融云的两种选择，在纠结以后，选择了融云进行开发。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>独立开发一个APP</title>
    <link href="http://peilinghui.com/2018/08/04/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAAPP/"/>
    <id>http://peilinghui.com/2018/08/04/独立开发一个APP/</id>
    <published>2018-08-04T07:22:24.000Z</published>
    <updated>2018-10-11T04:02:17.141Z</updated>
    
    <content type="html">&lt;p&gt;独立开发一个社群APP，类似微博，知识星球，简书这一类的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;首先是整个项目的框架的搭建。&lt;/p&gt;
&lt;h1 id=&quot;中间层的路由跳转方案&quot;&gt;&lt;a href=&quot;#中间层的路由跳转方案&quot; class=&quot;headerlink&quot; title=&quot;中间层的路由跳转方案&quot;&gt;&lt;/a&gt;中间层的路由跳转方案&lt;/h1&gt;&lt;p&gt;抽象出一个中间层来对纷乱的引用关系进行统一的跳转。模块只和中间层耦合，模块间解耦；中间层使用runtime的形式调用模块的业务组件，不依赖具体的模块代码.两种主流方案:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以&lt;a href=&quot;https://github.com/joeldev/JLRoutes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JLRoutes&lt;/a&gt;为代表的URLRoute方案:以URL为key，以待执行的block为value，保存在一个全局map中，在内存中常驻;&lt;/li&gt;
&lt;li&gt;Mediator中间人方案:把所有的调用都集合在一起，使用一个中间人管理。所有调用方都通过中间人调取另外一个模块;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;创建Target-Action。Target对象暴露整个模块对外提供的所有服务，此外，因为Mediator和Target是通过Runtime交互的，Target暴露的方法中接收的参数是一个字典，但在方法实现中负责将传过来的字典还原成各个参数，并调用该模块具体的类和方法。&lt;/li&gt;
&lt;li&gt;创建 CTMediator 的Category. 受限于runtime只能以字典形式传一系列参数，Mediator分类的职责就在于对外提供参数友好型的一系列方法，但在方法实现中包装成字典形式。这里涉及到key的定义必须和Target中还原时的key定义一致，因此划分给相同的开发维护。&lt;br&gt;&lt;a href=&quot;https://github.com/yehot/YT_TargetAction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xuzhenhao/ZHMediator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结合URLRoute和Mediator的跳转方案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;整体导航条Navigation&quot;&gt;&lt;a href=&quot;#整体导航条Navigation&quot; class=&quot;headerlink&quot; title=&quot;整体导航条Navigation&quot;&gt;&lt;/a&gt;整体导航条Navigation&lt;/h1&gt;&lt;p&gt;写自定义的navigationController，主要用于处理问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手势返回的支持和不支持。&lt;/li&gt;
&lt;li&gt;导航栏的显示和隐藏。&lt;/li&gt;
&lt;li&gt;底部tabBar的显示和隐藏。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一些页面对于statusBar的处理，设置statusBar的背景颜色和样式&lt;/p&gt;
&lt;h1 id=&quot;网络层&quot;&gt;&lt;a href=&quot;#网络层&quot; class=&quot;headerlink&quot; title=&quot;网络层&quot;&gt;&lt;/a&gt;网络层&lt;/h1&gt;&lt;p&gt;在AFN上面封装，包装AFNManager，创建一个单例的HTTPClient继承自AFHTTPSessionManager，在单例中设置securityPolicy、requestSerializer、responseSerializer、和请求头，以及Content-type相关的参数，包装GET、post请求&lt;br&gt;没有判断网络的情况，是WIFI还是4G还是3G，还是无网络的状态&lt;/p&gt;
&lt;h1 id=&quot;tableView自适应&quot;&gt;&lt;a href=&quot;#tableView自适应&quot; class=&quot;headerlink&quot; title=&quot;tableView自适应&quot;&gt;&lt;/a&gt;tableView自适应&lt;/h1&gt;&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;p&gt;Sunny写的&lt;a href=&quot;http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;优化UITableViewCell高度计算的那些事&lt;/a&gt;&lt;br&gt;UITableView+FDTemplateLayoutCell&lt;/p&gt;
&lt;h2 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peilinghui/SDAutoLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SDAutoLayout&lt;/a&gt;&lt;br&gt;不仅可以实现tableview和cell高度自适应，还可以实现普通view的自动布局，比用masonry代码更少，&lt;/p&gt;
&lt;h2 id=&quot;方法三&quot;&gt;&lt;a href=&quot;#方法三&quot; class=&quot;headerlink&quot; title=&quot;方法三&quot;&gt;&lt;/a&gt;方法三&lt;/h2&gt;&lt;p&gt;在每个元素的模型model中添加一个height属性，实现它的get方法，在get方法中计算需要多行显示文字的高度，然后再加上其他乱七八糟的高度并返回，然后在tableview的 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(CGFloat)tableView:(UITableView )tableView heightForRowAtIndexPath:(NSIndexPath )indexPath中获取到每行对应的model，取出其中的model.height属性的值返回，还要在cell中确定cell中label的高度。。。总之就是很麻烦，而且还不一定总能算的很正确，甚是受此困扰。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要你懂一定的Autolayout知识的话，原来实现这种的cell高度自适应，其实是灰常灰常简单的：&lt;br&gt;首先，第一步，现在自定义的cell中将高度随着内容动态改变的label的布局使用autolayout布局完成，这里有个注意点就是label和cell边界的距离要确定好，不能固定死label的高度，然后设置label的numberOfLines=0，行数设置为0即意味着label可以有任意行。&lt;br&gt;其次，实现以下两个tableview的delegate中的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView estimatedHeightForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView heightForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是的，只要实现这两个方法，然后运行你的项目，你会惊讶的发现，哇塞，高度完美自适应…&lt;br&gt;这里有几个关键点：&lt;br&gt;关键点1：必须重写estimatedHeightForRowAtIndexPath方法&lt;br&gt;这个方法是iOS7.0之后才出现的，如果不重写此方法，仅重写heightForRowAtIndexPath，那么大家会发现，cell并不会根据label的内容，自适应高度。因为系统是先获取cell的高度，再获取cell的view。也就是先调用heightForRowAtIndexPath，再调用cellForRowAtIndexPath。在cellForRowAtIndexPath被调用之前，你的label是没有被设置文本内容的，因此它获取到的高度，并不是你想要的。那么我们必须想办法让系统在获取了cell之后，再获取cell的高度。方法就是，重写estimatedHeightForRowAtIndexPath，顾名思义，它会返回一个估计高度，有了这个方法后，tableview会先调用它获取估计高度，然后获取cell，最后获取真实高度。estimatedHeightForRowAtIndexPath的返回值可以随意，返回多少都可以，只是给tableview一个安慰而已，让它延迟获取真实的高度。&lt;br&gt;关键点2：真实高度返回值为&lt;br&gt;UITableViewAutomaticDimension&lt;br&gt;关键点3：cell中的元素，必须相对于cell的顶部和底部布局，这样在元素中的内容动态变化的时候，才能撑开cell&lt;/p&gt;
&lt;h2 id=&quot;方法四&quot;&gt;&lt;a href=&quot;#方法四&quot; class=&quot;headerlink&quot; title=&quot;方法四&quot;&gt;&lt;/a&gt;方法四&lt;/h2&gt;&lt;p&gt;ASDK：AsyncDisplayKit.相关连接：&lt;br&gt;&lt;a href=&quot;https://draveness.me/asdk-rendering&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 ASDK 性能调优 - 提升 iOS 界面的渲染性能&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/ludashi/p/5895725.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS开发之多种Cell高度自适应实现方案的UI流畅度分析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法五&quot;&gt;&lt;a href=&quot;#方法五&quot; class=&quot;headerlink&quot; title=&quot;方法五&quot;&gt;&lt;/a&gt;方法五&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 保持界面流畅的技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YYKit的&lt;/p&gt;
&lt;h1 id=&quot;整体的方法&quot;&gt;&lt;a href=&quot;#整体的方法&quot; class=&quot;headerlink&quot; title=&quot;整体的方法&quot;&gt;&lt;/a&gt;整体的方法&lt;/h1&gt;&lt;p&gt;页面布局：masonry自动布局&lt;br&gt;页面的网络解析：YYModel&lt;br&gt;页面的网络请求：&lt;/p&gt;
&lt;p&gt;各个模块需要注意的问题：&lt;/p&gt;
&lt;h1 id=&quot;登录模块&quot;&gt;&lt;a href=&quot;#登录模块&quot; class=&quot;headerlink&quot; title=&quot;登录模块&quot;&gt;&lt;/a&gt;登录模块&lt;/h1&gt;&lt;p&gt;第一次登录和再次登录&lt;/p&gt;
&lt;h1 id=&quot;图片处理&quot;&gt;&lt;a href=&quot;#图片处理&quot; class=&quot;headerlink&quot; title=&quot;图片处理&quot;&gt;&lt;/a&gt;图片处理&lt;/h1&gt;&lt;p&gt;图片压缩&lt;/p&gt;
&lt;h1 id=&quot;弹框处理&quot;&gt;&lt;a href=&quot;#弹框处理&quot; class=&quot;headerlink&quot; title=&quot;弹框处理&quot;&gt;&lt;/a&gt;弹框处理&lt;/h1&gt;&lt;h1 id=&quot;时间处理&quot;&gt;&lt;a href=&quot;#时间处理&quot; class=&quot;headerlink&quot; title=&quot;时间处理&quot;&gt;&lt;/a&gt;时间处理&lt;/h1&gt;&lt;h1 id=&quot;下拉刷新和上拉加载更多&quot;&gt;&lt;a href=&quot;#下拉刷新和上拉加载更多&quot; class=&quot;headerlink&quot; title=&quot;下拉刷新和上拉加载更多&quot;&gt;&lt;/a&gt;下拉刷新和上拉加载更多&lt;/h1&gt;&lt;h1 id=&quot;第三方登录和第三方分享&quot;&gt;&lt;a href=&quot;#第三方登录和第三方分享&quot; class=&quot;headerlink&quot; title=&quot;第三方登录和第三方分享&quot;&gt;&lt;/a&gt;第三方登录和第三方分享&lt;/h1&gt;&lt;p&gt;第三方分享：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;申请微信APPKey和申请友盟APPkey&lt;/li&gt;
&lt;li&gt;cocospod:    pod ‘UMengUShare/Social/WeChat’&lt;/li&gt;
&lt;li&gt;在APPdelegate中设置APPkey&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)setAppkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //友盟&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;type&quot;&gt;WXApi&lt;/span&gt; registerApp:&lt;span class=&quot;type&quot;&gt;WXAPPID&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置友盟appkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;type&quot;&gt;UMSocialManager&lt;/span&gt; defaultManager] setUmSocialAppkey:&lt;span class=&quot;type&quot;&gt;UMKey&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //分享到微信&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;type&quot;&gt;UMSocialManager&lt;/span&gt; defaultManager] setPlaform:&lt;span class=&quot;type&quot;&gt;UMSocialPlatformType_WechatSession&lt;/span&gt; appKey:&lt;span class=&quot;type&quot;&gt;APPKEY&lt;/span&gt; appSecret:&lt;span class=&quot;type&quot;&gt;APPSECRET&lt;/span&gt; redirectURL:@&lt;span class=&quot;string&quot;&gt;&quot;www.com&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;type&quot;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&quot;type&quot;&gt;UIApplication&lt;/span&gt; *)application openURL:(&lt;span class=&quot;type&quot;&gt;NSURL&lt;/span&gt; *)url sourceApplication:(&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *)sourceApplication annotation:(id)annotation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = [&lt;span class=&quot;type&quot;&gt;UMSocialSnsService&lt;/span&gt; handleOpenURL:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;设置Plis跳转的URL。URL Schemes列为白名单&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;LSApplicationQueriesSchemes&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;weixin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;创建分享信息&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//创建分享消息对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; UMSocialMessageObject *messageObject = [UMSocialMessageObject messageObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *title = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.shareTitle&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *url = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.originUrl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *text = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.shareText&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *imgUrl = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.shareImage&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UMShareWebpageObject *shareObject = [UMShareWebpageObject shareObjectWithTitle:title descr:text thumImage:imgUrl];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[shareObject setWebpageUrl:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;messageObject&lt;span class=&quot;variable&quot;&gt;.shareObject&lt;/span&gt; = shareObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[UMSocialManager defaultManager] shareToPlatform:UMSocialPlatformType_WechatSession&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           messageObject:messageObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		currentViewController:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		completion:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; data, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UMSocialLogInfo(&lt;span class=&quot;string&quot;&gt;@&quot;************Share fail with error %@*********&quot;&lt;/span&gt;,error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([data isKindOfClass:[UMSocialShareResponse class]]) &amp;#123;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  UMSocialShareResponse *resp = data; UMSocialLogInfo(&lt;span class=&quot;string&quot;&gt;@&quot;response message is %@&quot;&lt;/span&gt;,resp&lt;span class=&quot;variable&quot;&gt;.message&lt;/span&gt;);   UMSocialLogInfo(&lt;span class=&quot;string&quot;&gt;@&quot;response originalResponse data is %@&quot;&lt;/span&gt;,resp&lt;span class=&quot;variable&quot;&gt;.originalResponse&lt;/span&gt;);&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123; UMSocialLogInfo(&lt;span class=&quot;string&quot;&gt;@&quot;response data is %@&quot;&lt;/span&gt;,data); &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;系统问题&quot;&gt;&lt;a href=&quot;#系统问题&quot; class=&quot;headerlink&quot; title=&quot;系统问题&quot;&gt;&lt;/a&gt;系统问题&lt;/h1&gt;&lt;p&gt;启动图&lt;/p&gt;
&lt;p&gt;横屏&lt;/p&gt;
&lt;p&gt;推送&lt;/p&gt;
&lt;p&gt;3Dtouch&lt;/p&gt;
&lt;p&gt;屏幕适配&lt;/p&gt;
&lt;h1 id=&quot;打包问题&quot;&gt;&lt;a href=&quot;#打包问题&quot; class=&quot;headerlink&quot; title=&quot;打包问题&quot;&gt;&lt;/a&gt;打包问题&lt;/h1&gt;&lt;p&gt;1。手动打包&lt;/p&gt;
&lt;p&gt;2。自动化打包&lt;/p&gt;
&lt;h1 id=&quot;优化&quot;&gt;&lt;a href=&quot;#优化&quot; class=&quot;headerlink&quot; title=&quot;优化&quot;&gt;&lt;/a&gt;优化&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;tableView的流畅：没有网络请求结束的时候先加载占位图，然后&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/d1e6ae279dd2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UITableView的优化策略&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://didee.cn/2018/01/29/iOS-ASDK/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 开发一定要尝试的 Texture(ASDK)&lt;/a&gt;&lt;br&gt;UITableView的回调顺序是先多次调用tableView:heightForRowAtIndexPath:以确定 contentSize及Cell的位置,然后才会调用tableView:cellForRowAtIndexPath:,从而来显示在 当前屏幕的Cell。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;UITableView的滚动优化主要在于以下两个方面：&lt;/p&gt;
&lt;p&gt;减少cellForRowAtIndexPath代理中的计算量（cell的内容计算）&lt;br&gt;减少heightForRowAtIndexPath代理中的计算量（cell的高度计算）&lt;/p&gt;
&lt;h3 id=&quot;减少cellForRowAtIndexPath代理中的计算量&quot;&gt;&lt;a href=&quot;#减少cellForRowAtIndexPath代理中的计算量&quot; class=&quot;headerlink&quot; title=&quot;减少cellForRowAtIndexPath代理中的计算量&quot;&gt;&lt;/a&gt;减少cellForRowAtIndexPath代理中的计算量&lt;/h3&gt;&lt;p&gt;首先要提前计算每个cell中需要的一些基本数据，代理调用的时候直接取出；&lt;br&gt;图片要异步加载，加载完成后再根据cell内部UIImageView的引用设置图片；&lt;br&gt;图片数量多时，图片的尺寸要跟据需要提前经过transform矩阵变换压缩好（直接设置图片的contentMode让其自行压缩仍然会影响滚动效率），必要的时候要准备好预览图和高清图，需要时再加载高清图。&lt;br&gt;图片的‘懒加载’方法，即延迟加载，当滚动速度很快时避免频繁请求服务器数据。&lt;br&gt;尽量手动Drawing视图提升流畅性，而不是直接子类化UITableViewCell，然后覆盖drawRect方法，因为cell中不是只有一个contentview。绘制cell不建议使用UIView，建议使用CALayer。原因要参考UIView和CALayer的区别和联系。&lt;/p&gt;
&lt;h3 id=&quot;减少heightForRowAtIndexPath代理中的计算量&quot;&gt;&lt;a href=&quot;#减少heightForRowAtIndexPath代理中的计算量&quot; class=&quot;headerlink&quot; title=&quot;减少heightForRowAtIndexPath代理中的计算量&quot;&gt;&lt;/a&gt;减少heightForRowAtIndexPath代理中的计算量&lt;/h3&gt;&lt;p&gt;由于每次TableView进行update更新都会对每一个cell调用heightForRowAtIndexPath代理取得最新的height，会大大增加计算时间。如果表格的所有cell高度都是固定的，那么去掉heightForRowAtIndexPath代理，直接设置TableView的rowHeight属性为固定的高度；&lt;br&gt;如果高度不固定，应尽量将cell的高度数据计算好并储存起来，代理调用的时候直接取，即将height的计算时间复杂度降到O(1)。例如：在异步请求服务器数据时，提前将cell高度计算好并作为dataSource的一个数据存到数据库供随时取用。&lt;/p&gt;
&lt;h1 id=&quot;数据刷新&quot;&gt;&lt;a href=&quot;#数据刷新&quot; class=&quot;headerlink&quot; title=&quot;数据刷新&quot;&gt;&lt;/a&gt;数据刷新&lt;/h1&gt;&lt;h2 id=&quot;tableView的数据刷新&quot;&gt;&lt;a href=&quot;#tableView的数据刷新&quot; class=&quot;headerlink&quot; title=&quot;tableView的数据刷新&quot;&gt;&lt;/a&gt;tableView的数据刷新&lt;/h2&gt;&lt;p&gt;那就在每个元素的model里面加上一个高度字段，显示的时候如果高度非0，直接拿过来使用，如果是0就自适应计算一下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://casatwy.com/iOS-Modulization.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈 组件化方案&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;把模块拆分成Pod&quot;&gt;&lt;a href=&quot;#把模块拆分成Pod&quot; class=&quot;headerlink&quot; title=&quot;把模块拆分成Pod&quot;&gt;&lt;/a&gt;把模块拆分成Pod&lt;/h1&gt;&lt;h1 id=&quot;其他问题&quot;&gt;&lt;a href=&quot;#其他问题&quot; class=&quot;headerlink&quot; title=&quot;其他问题&quot;&gt;&lt;/a&gt;其他问题&lt;/h1&gt;&lt;h2 id=&quot;UIScrollView的左右滑动与侧滑返回并存&quot;&gt;&lt;a href=&quot;#UIScrollView的左右滑动与侧滑返回并存&quot; class=&quot;headerlink&quot; title=&quot;UIScrollView的左右滑动与侧滑返回并存&quot;&gt;&lt;/a&gt;UIScrollView的左右滑动与侧滑返回并存&lt;/h2&gt;&lt;p&gt;侧滑返回效果的触发需要满足：(1) 滑动位置在屏幕左边缘;（2）向右滑动;&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#pragma mark - 侧滑返回和控件手势冲突的解决方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//是否支持多手势触发，返回YES，则可以多个手势一起触发方法，返回NO则为互斥.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//是否允许多个手势识别器共同识别，一个控件的手势识别后是否阻断手势识别继续向下传播，默认返回NO；如果为YES，响应者链上层对象触发手势识别后，如果下层对象也添加了手势并成功识别也会继续执行，否则上层对象识别后则不再继续传播&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//一句话总结就是此方法返回YES时，手势事件会一直往下传递，不论当前层次是否对该事件进行响应。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)gestureRecognizer:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)otherGestureRecognizer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; panBack:gestureRecognizer]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//location_X可自己定义,其代表的是滑动返回距左边的有效长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)panBack:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)gestureRecognizer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//是滑动返回距左边的有效长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; location_X =&lt;span class=&quot;number&quot;&gt;0.15&lt;/span&gt;*IPHONE_W;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gestureRecognizer ==&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.panGestureRecognizer&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; *pan = (&lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; *)gestureRecognizer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; point = [pan translationInView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerState&lt;/span&gt; state = gestureRecognizer&lt;span class=&quot;variable&quot;&gt;.state&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateBegan&lt;/span&gt; == state ||&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStatePossible&lt;/span&gt; == state) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; location = [gestureRecognizer locationInView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//这是允许每张图片都可实现滑动返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp1 = location&lt;span class=&quot;variable&quot;&gt;.x&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp2 =IPHONE_W;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; XX = temp1 % temp2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (point&lt;span class=&quot;variable&quot;&gt;.x&lt;/span&gt; &amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; XX &amp;lt; location_X) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)gestureRecognizerShouldBegin:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)gestureRecognizer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; panBack:gestureRecognizer]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;获取系统的UIPanGestureRecognizer的&lt;br&gt;(3) 侧滑手势优先，侧滑手势失效时，才触发UISrcollView的滑动&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/8170fea174da&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jianshu.com/p/8170fea174da&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;独立开发一个社群APP，类似微博，知识星球，简书这一类的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS底层实现</title>
    <link href="http://peilinghui.com/2018/06/25/iOS%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <id>http://peilinghui.com/2018/06/25/iOS底层实现/</id>
    <published>2018-06-25T07:07:36.000Z</published>
    <updated>2018-10-14T06:49:21.813Z</updated>
    
    <content type="html">&lt;p&gt;源于一个面试题。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/mw690/51530583ly1fsatleo2zmj213u10caiu.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们知道在Runtime中的swizzling:通过selector来找IMP，可以利用Runtime来实现交换原方法和目标方法的IMP，以完全代替原方法的实现，或为原实现前后相当于加一段额外的代码。&lt;/p&gt;
&lt;p&gt;就是在分类的load方法中，通过class_getClassMethodclass_getInstanceMethod获取类方法和实例方法，然后method_exchangeImplementations(),交换方法实现，或者是其他class_addMethods、class_addIvar、class_addProtocol、class_addProperty来动态的添加方法或者成员变量。还有class_copyIvarList、class_copyMethodList获得某个类所有的成员变量和所有方法。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import&lt;span class=&quot;title&quot;&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassA&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)methodA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)methodB;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassA&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;Swizzle&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method originalMethod = class_getInstanceMethod(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(methodA));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method swizzledMethod = class_getInstanceMethod(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(swizzled_methodA));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;method_exchangeImplementations(originalMethod, swizzledMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)swizzled_methodA &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; swizzled_methodA];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;AOP的库Aspects 支持多次hook同一个方法，支持从hook返回的id&lt;aspecttoken&gt;对象删除对应的hook，IMP即函数指针。&lt;br&gt;Aspects 的大致原理：替换原方法的IMP为 消息转发函数指针 _objc_msgForward或_objc_msgForward_stret，把原方法IMP添加并对应到SEL aspects_originalSelector，将forwardInvocation:的IMP替换为参数对齐的C函数&lt;strong&gt;ASPECTS_ARE_BEING_CALLED&lt;/strong&gt;(NSObject &lt;em&gt;self, SEL selector, NSInvocation &lt;/em&gt;invocation)的指针。在&lt;strong&gt;ASPECTS_ARE_BEING_CALLED&lt;/strong&gt;函数中，替换invocation的selector为aspects_originalSelector，相当于要发送调用原始方法实现的消息。对于插入位置在前面，替换，后面的多个block，构建新的blockInvocation，从invocation中提取参数，最后通过invokeWithTarget:block来完成依次调用。&lt;/aspecttoken&gt;&lt;/p&gt;
&lt;h1 id=&quot;libffi-简介&quot;&gt;&lt;a href=&quot;#libffi-简介&quot; class=&quot;headerlink&quot; title=&quot;libffi 简介&quot;&gt;&lt;/a&gt;libffi 简介&lt;/h1&gt;&lt;p&gt;    libffi 可以认为是实现了C语言上的runtime，简单来说，libffi 可根据 参数类型(ffi_type)，参数个数 生成一个 模板(ffi_cif)；可以输入 模板、函数指针 和 参数地址 来直接完成 函数调用(ffi_call)； 模板 也可以生成一个所谓的 闭包(ffi_closure)，并得到指针，当执行到这个地址时，会执行到自定义的void function(ffi_cif &lt;em&gt;cif, void &lt;/em&gt;ret, void &lt;strong&gt;args, void &lt;em&gt;userdata)函数，在这里，我们可以获得所有参数的地址(包括返回值)，以及自定义数据userdata。当然，在这个函数里我们可以做一些额外的操作。&lt;br&gt;    &lt;br&gt;    &lt;br&gt;如何hook ObjC方法和实现AOP，思路：我们可以将ffi_closure关联的指针替换原方法的IMP，当对象收到该方法的消息时objc_msgSend(id self, SEL sel, …)，将最终执行自定义函数void ffi_function(ffi_cif &lt;/em&gt;cif, void *ret, void &lt;/strong&gt;args, void *userdata)。而实现这一切的主要工作是：设计可行的结构，存储类的多个hook信息；根据包含不同参数的方法和切面block，生成包含匹配ffi_type的cif；替换类某个方法的实现为ffi_closure关联的imp，记录hook；在ffi_function里，根据获得的参数，动态调用原始imp和block。&lt;/p&gt;
&lt;h2 id=&quot;动态调用C函数&quot;&gt;&lt;a href=&quot;#动态调用C函数&quot; class=&quot;headerlink&quot; title=&quot;动态调用C函数&quot;&gt;&lt;/a&gt;动态调用C函数&lt;/h2&gt;&lt;p&gt;使用libffi提供接口动态调用流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备好参数数据及其对应ffi_type数组、返回值内存指针、函数指针&lt;/li&gt;
&lt;li&gt;创建与函数特征相匹配的函数原型：ffi_cif对象&lt;/li&gt;
&lt;li&gt;使用“ffi_call”来完成函数调用&lt;br&gt;使用ffi，只要有函数原型cif对象，函数实现指针，返回值内存指针和函数参数数组，我们就可以实现在运行时动态调用任意C函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以如果想实现其他语言(譬如JS)，执行过程中动态调用C函数，只需在调用过程中加一层转换，将参数及返回值类型转换成libffi对应类型，并封装成函数原型cif对象，准备好参数数据，找到对应函数指针，然后调用即可。&lt;/p&gt;
&lt;h2 id=&quot;动态定义C函数&quot;&gt;&lt;a href=&quot;#动态定义C函数&quot; class=&quot;headerlink&quot; title=&quot;动态定义C函数&quot;&gt;&lt;/a&gt;动态定义C函数&lt;/h2&gt;&lt;p&gt;libffi还有一个特别强大的函数，通过它我们可以将任意参数和返回值类型的函数指针，绑定到一个函数实体上。那么这样我们就可以很方便的实现动态定义一个C函数了！同时这个函数在编写解释器或提供任意函数的包装器(通用block)时非常有用，此函数是：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ffi_status ffi_prep_closure_loc (ffi_closure *closure,  &lt;span class=&quot;comment&quot;&gt;//闭包，一个ffi_closure对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ffi_cif *cif,  &lt;span class=&quot;comment&quot;&gt;//函数原型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*fun) (ffi_cif *cif, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ret, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; **args, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*user_data), &lt;span class=&quot;comment&quot;&gt;//函数实体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *user_data, &lt;span class=&quot;comment&quot;&gt;//函数上下文，函数实体实参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *codeloc)   &lt;span class=&quot;comment&quot;&gt;//函数指针，指向函数实体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过一个简单的例子，看下如何将一个函数指针绑定到一个函数实体上：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;ffi.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Acts like puts with the file given at time of enclosure. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数实体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;puts_binding&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ffi_cif *cif, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *ret, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* args[],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  FILE *stream)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *ret = &lt;span class=&quot;built_in&quot;&gt;fputs&lt;/span&gt;(*(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **)args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_cif cif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_type *args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_closure *closure;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*bound_puts)(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *);  &lt;span class=&quot;comment&quot;&gt;//声明一个函数指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Allocate closure and bound_puts */&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//创建closure&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    closure = ffi_closure_alloc(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ffi_closure), &amp;amp;bound_puts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (closure)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* Initialize the argument info vectors */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &amp;amp;ffi_type_pointer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* Initialize the cif */&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//生成函数原型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ffi_prep_cif(&amp;amp;cif, FFI_DEFAULT_ABI, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         &amp;amp;ffi_type_uint, args) == FFI_OK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* Initialize the closure, setting stream to stdout */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 通过 ffi_closure 把 函数原型_cifPtr / 函数实体JPBlockInterpreter / 上下文对象self / 函数指针blockImp 关联起来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ffi_prep_closure_loc(closure, &amp;amp;cif, puts_binding,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     &lt;span class=&quot;built_in&quot;&gt;stdout&lt;/span&gt;, bound_puts) == FFI_OK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                rc = bound_puts(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* rc now holds the result of the call to fputs */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Deallocate both closure, and bound_puts */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_closure_free(closure);   &lt;span class=&quot;comment&quot;&gt;//释放闭包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述步骤大致分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备一个函数实体&lt;/li&gt;
&lt;li&gt;声明一个函数指针&lt;/li&gt;
&lt;li&gt;根据函数参数个数/参数及返回值类型生成一个函数原型&lt;/li&gt;
&lt;li&gt;创建一个ffi_closure对象，并用其将函数原型、函数实体、函数上下文、函数指针关联起来&lt;/li&gt;
&lt;li&gt;释放closure&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过以上这5步，我们就可以在执行过程中将一个函数指针，绑定到一个函数实体上，从而轻而易举的实现动态定义一个C函数。&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.assuner.com/%E5%BC%80%E6%BA%90/2018/01/16/Stinger.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hook方法的新姿势–(使用libffi实现AOP )&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.cnbang.net/tech/3219/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何动态调用 C 函数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.cnbang.net/tech/3332/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何动态创建 block – JPBlock 扩展原理详解&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;源于一个面试题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Effective JavaScript</title>
    <link href="http://peilinghui.com/2018/04/19/Effective-JavaScript/"/>
    <id>http://peilinghui.com/2018/04/19/Effective-JavaScript/</id>
    <published>2018-04-19T00:08:23.000Z</published>
    <updated>2018-07-19T15:05:44.674Z</updated>
    
    <content type="html">&lt;p&gt;Effective JavaScript&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Accustoming-Yourself-to-JavaScript让自己习惯JS&quot;&gt;&lt;a href=&quot;#Accustoming-Yourself-to-JavaScript让自己习惯JS&quot; class=&quot;headerlink&quot; title=&quot;Accustoming Yourself to JavaScript让自己习惯JS&quot;&gt;&lt;/a&gt;Accustoming Yourself to JavaScript让自己习惯JS&lt;/h1&gt;&lt;h2 id=&quot;1-知道你正在使用的JavaScript模式&quot;&gt;&lt;a href=&quot;#1-知道你正在使用的JavaScript模式&quot; class=&quot;headerlink&quot; title=&quot;1.知道你正在使用的JavaScript模式&quot;&gt;&lt;/a&gt;1.知道你正在使用的JavaScript模式&lt;/h2&gt;&lt;p&gt;是否使用严格模式？只可选择其一或者将其自身包裹在立即调用的函数表达式（IIFE）中连接多个文件。&lt;br&gt;获得最大兼容性： 在严格模式下，并且显式地将代码内容包裹在严格函数中。&lt;/p&gt;
&lt;h2 id=&quot;2-注意JavaScript的浮点数&quot;&gt;&lt;a href=&quot;#2-注意JavaScript的浮点数&quot; class=&quot;headerlink&quot; title=&quot;2.注意JavaScript的浮点数&quot;&gt;&lt;/a&gt;2.注意JavaScript的浮点数&lt;/h2&gt;&lt;p&gt;avaScript的数字都是双精度的浮点数。&lt;br&gt;JavaScript中的整数只是双精度浮点数的一个子集,而不是一个单独的数据类型。&lt;br&gt;位运算符把数字当做32位的有符号整数来处理。&lt;br&gt;注意JavaScript中浮点数的精度陷阱。&lt;/p&gt;
&lt;h2 id=&quot;3-当心隐式的强制转换&quot;&gt;&lt;a href=&quot;#3-当心隐式的强制转换&quot; class=&quot;headerlink&quot; title=&quot;3.当心隐式的强制转换&quot;&gt;&lt;/a&gt;3.当心隐式的强制转换&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Effective JavaScript&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React技术栈</title>
    <link href="http://peilinghui.com/2018/02/22/React%E7%9F%A5%E8%AF%86/"/>
    <id>http://peilinghui.com/2018/02/22/React知识/</id>
    <published>2018-02-22T06:26:54.000Z</published>
    <updated>2018-07-19T15:15:21.074Z</updated>
    
    <content type="html">&lt;p&gt;主要是对阅读深入React技术栈的总结和实践。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/facebook/react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;h2 id=&quot;事件系统&quot;&gt;&lt;a href=&quot;#事件系统&quot; class=&quot;headerlink&quot; title=&quot;事件系统&quot;&gt;&lt;/a&gt;事件系统&lt;/h2&gt;&lt;p&gt;React基于Viral DOM实现了一个Synthetic（合成事件）层，使用stopPropagation()和preventDefault()来中断它。&lt;br&gt;所有事件都自动绑定到最外层，如果要访问原生事件对象，可以使用nativeEvent属性。&lt;/p&gt;
&lt;p&gt;一、 合成事件的实现机制&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件委派：把所有事件绑定到结构最外层，使用同一的事件监听器–映射所有组件内部的事件监听和处理函数。&lt;/li&gt;
&lt;li&gt;自动绑定：手动绑定this为当前组件的方法：&lt;ul&gt;
&lt;li&gt;bind方法：使用::this.handleClick等同于this.handleClick.bind(this)&lt;/li&gt;
&lt;li&gt;构造器内绑定声明，在constructor中完成&lt;/li&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、 使用原生事件&lt;br&gt;在ComponentDidMount中&lt;br&gt;this.refs.button.addEventListener(‘click’,e=&amp;gt;{&lt;br&gt;    hanldeCliick(e);&lt;br&gt;});&lt;br&gt;在ComponentWillUnMount中移除&lt;br&gt;this.refs.button.removeEventListener(‘click’);&lt;/p&gt;
&lt;p&gt;三、 合成事件和原生事件混用&lt;br&gt;比如在web页面添加移动设备扫描二维码的功能。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不要把合成事件和原生事件混用&lt;/li&gt;
&lt;li&gt;通过e.target判断来避免&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;四、 对比React合成事件和JS的原生事件&lt;/p&gt;
&lt;h2 id=&quot;组件间通信&quot;&gt;&lt;a href=&quot;#组件间通信&quot; class=&quot;headerlink&quot; title=&quot;组件间通信&quot;&gt;&lt;/a&gt;组件间通信&lt;/h2&gt;&lt;p&gt;一、 父组件向子组件通信&lt;br&gt;通过props&lt;/p&gt;
&lt;p&gt;二、 子组件向父组件通信&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用回调函数：this.props的function的回调&lt;/li&gt;
&lt;li&gt;利用自定义事件机制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、 跨级组件通信&lt;br&gt;子组件跨级访问信息，使用context实现跨级父子组件间的通信。&lt;br&gt;在父组件中定义了ChildContext，在子组件中使用this.context从而调用。&lt;br&gt;一般只有在全局比如：界面主题、用户信息才会使用。总体原则：使用它，可以写成高阶组件。&lt;/p&gt;
&lt;p&gt;四、 没有嵌套关系的组件通信&lt;br&gt;通过一个单例的EventEmitter，然后把这个实例输出到各组件中使用。&lt;/p&gt;
&lt;p&gt;import {EventEmitter} from ‘event’;&lt;br&gt;export default new EventEmitter();&lt;/p&gt;
&lt;p&gt;import emitter from ‘./events’;&lt;/p&gt;
&lt;p&gt;在APP的类中的ComponentDidMount中emmit&lt;/p&gt;
&lt;h2 id=&quot;组件间抽象&quot;&gt;&lt;a href=&quot;#组件间抽象&quot; class=&quot;headerlink&quot; title=&quot;组件间抽象&quot;&gt;&lt;/a&gt;组件间抽象&lt;/h2&gt;&lt;p&gt;mixin和高阶组件&lt;br&gt;mixin:创造一种类似多重继承的效果，组合。&lt;/p&gt;
&lt;h1 id=&quot;Flux架构&quot;&gt;&lt;a href=&quot;#Flux架构&quot; class=&quot;headerlink&quot; title=&quot;Flux架构&quot;&gt;&lt;/a&gt;Flux架构&lt;/h1&gt;&lt;p&gt;不是MVC的架构，Flux三大部分组成：1. dispatcher、store、view。dispatcher负责分发事件，store负责保存数据、view负责订阅store中的数据，并使用这些数据渲染相应的页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与MVC的主要区别：&lt;/strong&gt;&lt;br&gt;没有职责明确的Controller，存在一个Controller-view的角色，将view和store进行绑定，并没有Controller需要承担的复杂的逻辑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;dispatcher与action&lt;/strong&gt;&lt;br&gt;dispatcher的实现就是下面两个API:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;.register(callback)方法用来注册一个监听器。&lt;br&gt;.dispatch(action)用来分发一个action。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;action是一个普通的JavaScript对象，一般包含type、payload字段，用于描述一个事件以及需要改变的相关数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;store&lt;/strong&gt;&lt;br&gt;负责保存数据，并且修改数据的逻辑，调用dispatcher的register(callback)方法将自己注册为一个监听器。&lt;br&gt;当.dispatch(action)用来分发一个action时，store注册的监听器就会被调用，同时得到这个action作为参数。store之暴露getter不暴露setter，只能读取不能修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Controller-view&lt;/strong&gt;&lt;br&gt;最顶层view，主要进行store与React组件(view层)之间的数据的绑定，定义数据更新以及传递的方式。会调用store保留的getter获取存储其中的数据并设置为自己的state，在render时以props的形式传给自己的子组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;view&lt;/strong&gt;&lt;br&gt;React组件扮演。结合Angular、Vue来发挥Flux的能力。&lt;br&gt;一条特殊的约定：&lt;strong&gt;Flux的view不能直接修改数据，如果页面操作需要修改数据，则必须使用dispatcher分发一个action。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;actionCreator&lt;/strong&gt;&lt;br&gt;用来创造action的。为什么需要？因为在分发action的时候代码是冗余的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Redux架构&quot;&gt;&lt;a href=&quot;#Redux架构&quot; class=&quot;headerlink&quot; title=&quot;Redux架构&quot;&gt;&lt;/a&gt;Redux架构&lt;/h1&gt;&lt;h2 id=&quot;Redux简介&quot;&gt;&lt;a href=&quot;#Redux简介&quot; class=&quot;headerlink&quot; title=&quot;Redux简介&quot;&gt;&lt;/a&gt;Redux简介&lt;/h2&gt;&lt;p&gt;Redux的核心代码是一个库，类似Flux的架构思想，&lt;/p&gt;
&lt;h3 id=&quot;三大原则&quot;&gt;&lt;a href=&quot;#三大原则&quot; class=&quot;headerlink&quot; title=&quot;三大原则&quot;&gt;&lt;/a&gt;三大原则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单一数据源&lt;br&gt;一个应用永远只有唯一的一个数据源，整个应用状态都保存在一个对象中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态是只读的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Flux中store没有setter只有getter，而Redux中没有store，只有reducer，根据当前触发的action对当前应用state进行迭代。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;状态修改均由纯函数完成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Redux与Flux最大的不同。&lt;br&gt;在Flux中，我们在actionCreator里调用APPDispatcher.dispatch方法来触发action，直接修改了store中数据.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;主要是对阅读深入React技术栈的总结和实践。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReactNative中使用Redux</title>
    <link href="http://peilinghui.com/2017/12/12/ReactNative%E4%B8%AD%E4%BD%BF%E7%94%A8Redux/"/>
    <id>http://peilinghui.com/2017/12/12/ReactNative中使用Redux/</id>
    <published>2017-12-12T15:14:35.000Z</published>
    <updated>2017-12-13T14:33:32.000Z</updated>
    
    <content type="html">&lt;p&gt;使用Redux也有一段时间了。总结一下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;为什么要使用Redux?&lt;br&gt;背景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RN的state（可变，子组件不可见）和props（不可变，子组件可见）的设计，在面对大型项目时候，容易因为不经意修改state造成状态混乱，组件渲染错误&lt;/li&gt;
&lt;li&gt;RN使用了Virtual DOM，不需要Target绑定-&amp;gt;Action修改UI属性，只要当状态变化，render新状态下的组件，数据单向传递，而MVC的设计模式存在双向数据流。&lt;/li&gt;
&lt;li&gt;RN不易进行测试，Redux提供了非常方便的mock测试方式。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Redux开发&quot;&gt;&lt;a href=&quot;#Redux开发&quot; class=&quot;headerlink&quot; title=&quot;Redux开发&quot;&gt;&lt;/a&gt;Redux开发&lt;/h1&gt;&lt;h2 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;p&gt;安装Redux：  ‘npm install –save redux’&lt;br&gt;安装React Native和Redux绑定库：npm install –save react-redux&lt;br&gt;安装Redux Thunk异步Action中间件：npm install –save redux-thunk&lt;/p&gt;
&lt;h2 id=&quot;三个原则&quot;&gt;&lt;a href=&quot;#三个原则&quot; class=&quot;headerlink&quot; title=&quot;三个原则&quot;&gt;&lt;/a&gt;三个原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单一数据源&lt;br&gt;  整个应用的 state 被储存在一个对象树中，对象树存在于唯一的 store 中。store中的 state 绑定到组件&lt;/li&gt;
&lt;li&gt;State 是只读的&lt;br&gt;  惟一改变 state 的方法就是触发 action。action 是一个含有 type 属性的普通JS对象，type 可以用常量表示事件。&lt;/li&gt;
&lt;li&gt;使用纯函数来执行修改&lt;br&gt;  编写 reducers 来描述对应action如何修改 state 。一般可以用 switch(action.type) 来处理，无副作用&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;react-redux提供了connect和Provider。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Provider是顶层的分发点，属性就是Store，将State分发给所有被connect的组件&lt;br&gt;2.connect：接受两个参数：一个是mapStateToProps或者mapDispatchToProps，一个是要绑定的组件本身。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Store&quot;&gt;&lt;a href=&quot;#Store&quot; class=&quot;headerlink&quot; title=&quot;Store&quot;&gt;&lt;/a&gt;Store&lt;/h3&gt;&lt;p&gt;Store 就是把 Reducer 和 action 联系到一起的对象。Store 有以下职责：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维持应用的 state–类似数据库，存储应用的所有state。&lt;/li&gt;
&lt;li&gt;提供 getState() 方法。获取 所有的当前state；&lt;/li&gt;
&lt;li&gt;提供 dispatch(action) 方法更新 state，相当于存入数据库，存入action来改变state。&lt;/li&gt;
&lt;li&gt;通过 subscribe(listener) 注册监听器。&lt;br&gt;Store本质上是一个对象，它以树的形式保存了整个应用的State。并提供了一些方法。例如getState( ) 和 dispatch( )。&lt;br&gt;Redux应用只有惟一一个Store。&lt;br&gt;Store通过createStore方法来创建，根据整个应用的根Reducer的初始State。&lt;br&gt;代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; createStore, applyMiddleware &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; thunk &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux-thunk&#39;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//异步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; reducers &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./reducers&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Store = applyMiddleware(thunk)(createStore)(reducers);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Store;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Reducers&quot;&gt;&lt;a href=&quot;#Reducers&quot; class=&quot;headerlink&quot; title=&quot;Reducers&quot;&gt;&lt;/a&gt;Reducers&lt;/h3&gt;&lt;p&gt;Action只是描述了有事情发生了这一事实，并没有指明应用如何更新state。这是reducer要做的事情。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reducer的本质是一个函数，并且是一个纯函数。没有任何副作用。简单来讲Reducer只负责做一件事，就是根据接收到的action和state来修改Store中的state：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(state, action) =&amp;gt; newState  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一般实现的时候，通过switch(action.type) 来判断不同的Action，default为旧state。同时可以定义初始状态。&lt;/li&gt;
&lt;li&gt;代码：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; combineReducers &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &#39;redux&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const newState = (&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt; = &amp;#123;&amp;#125;, action = &amp;#123;&amp;#125;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  switch (action.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case ActionTypes.CSTATE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &amp;#123; ...&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;, ...action.&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case &#39;_DPDATACHANGE_&#39;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &amp;#123;...&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;, ...action.dpState&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Reducer 合并&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; combineReducers(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  newState,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意:返回的是新state，如果需要保留部分旧state值，使用…state（ES7的对象展开语法，对对象会浅拷贝对应属性，这里等价于Object.assign({}, state, newState)），而如果合并state的话只会合并一层，对复杂state需要手动合并。&lt;/p&gt;
&lt;h3 id=&quot;Action&quot;&gt;&lt;a href=&quot;#Action&quot; class=&quot;headerlink&quot; title=&quot;Action&quot;&gt;&lt;/a&gt;Action&lt;/h3&gt;&lt;p&gt;Action是一个普通JS对象，至少包括一个type属性代表事件，其他属性可以用来传递数据。实践上对一个流程定义一个函数，流程可以包括网络请求，最后返回Action，这个函数叫Action Creator。&lt;br&gt;代码：Store可以dispatch这个Action，action的type表示标识符，state是它携带的数据。&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export const newState = &lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Store.dispatch(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: ActionTypes.CSTATE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;持久化&quot;&gt;&lt;a href=&quot;#持久化&quot; class=&quot;headerlink&quot; title=&quot;持久化&quot;&gt;&lt;/a&gt;持久化&lt;/h4&gt;&lt;p&gt;当触发action时根据其reducer key恢复数据，然后只需要在应用启动时分发action，这也很容易抽象成可配置的拓展服务，实际上三方库redux-persist已经为我们做好了这一切。&lt;br&gt;在Action中可以代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; getStorage = &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (key) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; d = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; AsyncStorage.getItem(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(d);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; setStorage = (key, value) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AsyncStorage.setItem(key, &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(value));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;connect&quot;&gt;&lt;a href=&quot;#connect&quot; class=&quot;headerlink&quot; title=&quot;connect&quot;&gt;&lt;/a&gt;connect&lt;/h3&gt;&lt;p&gt;通过- 提供 getState() 方法。获取 所有的当前state&lt;br&gt;通过connect，绑定需要的state以及Action Creator到你的组件的props上，这样组件就可以通过props来调用Action Creator，或者根据不同props来render()不同的组件。&lt;br&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mapStateToProps(&amp;#123; newState &amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            const &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; = newState[&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;];//&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;: newState.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考：&quot;&gt;&lt;a href=&quot;#参考：&quot; class=&quot;headerlink&quot; title=&quot;参考：&quot;&gt;&lt;/a&gt;参考：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://dreampiggy.com/2016/10/26/react-nativezhi-reduxjia-gou-ru-men/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux架构入门&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.codingplayboy.com/2017/10/31/react-native-app/comment-page-1/#Redux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native App应用架构设计&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使用Redux也有一段时间了。总结一下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React-Native的APP</title>
    <link href="http://peilinghui.com/2017/09/24/React-Native%E7%9A%84APP/"/>
    <id>http://peilinghui.com/2017/09/24/React-Native的APP/</id>
    <published>2017-09-24T13:34:53.000Z</published>
    <updated>2018-07-18T01:43:49.648Z</updated>
    
    <content type="html">&lt;p&gt;从7月底到9月底两个月的时间开发了一个React-Native的APP。不得不说，用RN的开发效率还是很快的。就来总结一下历程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;整个项目的逻辑大概就是： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建项目，导入项目的图片资源，APP的图标，启动图，ios的启动图在Xcode中直接设置Launch Image和icon，对于安卓的启动图要写代码实现才行。对于项目的图片资源，可以两套系统共用一套图片那就可以放在一个文件夹下，引入的时候用相对路径导入；也可以放在Xcode或者是Android Studio中进行uri:+图片名称导入。&lt;/li&gt;
&lt;li&gt;用上一篇的第三方组件和一些基本组件大概完成了一些页面，完成了登录，手势解锁页，还有主页面的框架和主页面中一些子页面的大体显示。接下来遇到的问题大概有两个：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一：如何跳转，把这个页面都串起来，就像一些珠子如何才能串成一串：导航的使用：Navigator已经废弃，就要使用react-naviagtion来导航。&lt;/p&gt;
&lt;p&gt;第二：如何进行数据处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是如何从服务器获取数据.&lt;/li&gt;
&lt;li&gt;是如何把从服务器获取的数据进行持久化存储。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何在页面间进行参数的传递&lt;br&gt;对于数据的处理也是难点。&lt;br&gt;首先对于网络请求要用fetch，&lt;br&gt;遇到的相关问题：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取设备ID：用第三方库，补充：JS中如何把字符串中的?替换为&amp;amp;:&lt;br&gt;&lt;code&gt;var str_replaced = str.replace(/\?/g,&amp;quot;&amp;amp;&amp;quot;);//加g就是替换所有的？号&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;React-Natvie用RSA加密用户的密码:&lt;br&gt;&lt;a href=&quot;https://github.com/z-hao-wang/react-native-rsa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-rsa&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rzcoder/node-rsa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-rsa&lt;/a&gt;&lt;br&gt;虽然有这些第三方库，但是我并没有用，这个简直搞到我头大，终于搞定了！&lt;br&gt;主要是参照这两个网址：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/Grart/p/5080228.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Grart/p/5080228.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;node-rsa的基础库&lt;/strong&gt;&lt;a href=&quot;http://www-cs-students.stanford.edu/~tjw/jsbn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www-cs-students.stanford.edu/~tjw/jsbn/&lt;/a&gt;&lt;br&gt;因为密码需要先用公钥RSA加密，然后在用base64加密，加密以后的字符串传给服务器，服务器那边再先base64解密，然后再用私钥解密。&lt;br&gt;在使用的时候最大的问题就是你要传一个N和E的参数来setPublic，这个问题困扰了我一天之久，终于后端的同学帮我搞定了，Java里面有方法可以根据已有的公钥来逆向出N和E的值，然后再使用下面的那个网页，网页，没错，就是下载下来那个网页，然后就有基本的JS文件了，其实RN就是JS，只怪自己前端不佳，然后把JS文件转化成RN可以用的JS组件库导入直接调用就可以加密成功了！终于加密成功了。感动哭。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置假数据显示一般来说都是容易的，与后台交互就需要用网络请求了。一般是GET和POST请求。POST的请求头：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般常见的网络请求：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; login=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data,doSuccess,doError&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fetch(&lt;span class=&quot;string&quot;&gt;&#39;http://&#39;&lt;/span&gt;+url+&lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          method: &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          headers: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;Accept&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          body: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response.json();&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resData&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doSuccess(resData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .done();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而我们这个post请求头呢？是下面这样的。&lt;/p&gt;
&lt;figure class=&quot;highlight ocaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;Content&lt;/span&gt;-&lt;span class=&quot;type&quot;&gt;Type&#39;&lt;/span&gt;:&lt;span class=&quot;symbol&quot;&gt;&#39;application&lt;/span&gt;/x-www-form-urlencoded&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般在post的body中是用：&lt;br&gt;{userName:this.state.userName,passWord:_pwd}这样的JSON传过去，再body: JSON.stringify(data)。。。&lt;br&gt;而我们这个呢？data是拼接起来的，我也是醉了，这我是用Charles发请求后才发现的，也是折腾了半天才明白的。也用postman还有终端httpie发现都可以请求成功，唯独用这个请求不到，后来就拼接了一下，成功了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JSON.stringify(result);和JSON.parse(result)有什么区别啊？&lt;br&gt;用于把JavaScript对象序列化为JSON字符串和把JSON字符串解析为原生JavaScript。&lt;br&gt;JSON.stringify将JavaScript对象转换为JSON文本，并将该JSON文本存储在字符串中。&lt;br&gt;JSON.parse将一串JSON文本转换成Javascript对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当你在fetch请求后 .then((response)=&amp;gt; response.json())的时候就不用解析直接用.取。。。&lt;br&gt;当你在fetch请求后， .then((response) =&amp;gt; response.text())的时候就需要JSON.parse(result);&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初学者最容易犯错误的地方就是this指针了！！我是在导航跳转的时候意识到这个问题的。每个组件都是有props和states的。&lt;br&gt;子组件如何调用父组件：this.props。&lt;br&gt;父组件如何调用子组件：首先用属性ref给子组件取个名字吧，this.refs.名字.getDOMNode().&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从服务返回的JSON数据的解析，有些需要遍历一下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; brandata = &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;.dangqiAnalysisBrandList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; brandeach=brandata.map((val) =&amp;gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; val[&#39;dangqiAnalysisList&#39;] &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;安卓打包&quot;&gt;&lt;a href=&quot;#安卓打包&quot; class=&quot;headerlink&quot; title=&quot;安卓打包&quot;&gt;&lt;/a&gt;安卓打包&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;生成一个签名密钥&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后它会生成一个叫做my-release-key.keystore的密钥库文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;找到路径/android/app/src/main，并在该目录下新建assets文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在工程目录下将index.android.bundle下载并保存到assets资源文件夹中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;curl -k &amp;quot;http://localhost:8081/index.android.bundle&amp;quot; &amp;gt; android/app/src/main/assets/index.android.bundle&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这句命令是重点，如果assets目录中不存在该文件，则打包的apk在执行时显示空白。&lt;/p&gt;
&lt;p&gt;Protocol ‘http not supported or disabled in libcurl&lt;/p&gt;
&lt;p&gt;Windows下安装使用curl命令:&lt;a href=&quot;http://jingyan.baidu.com/article/a681b0dec4c67a3b1943467c.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jingyan.baidu.com/article/a681b0dec4c67a3b1943467c.html&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加gradle的android keystore配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打包的apk在未签名的情况下,在手机中（非root）是不允许安装的&lt;/p&gt;
&lt;p&gt;在build.gradle文件中&lt;/p&gt;
&lt;p&gt;  //签名&lt;br&gt;&lt;code&gt;signingConfigs{
    release {
        storeFile file(&amp;quot;/my-release-key.keystore&amp;quot;)
        storePassword &amp;quot;密码&amp;quot;
        keyAlias &amp;quot;keyAlias的名字&amp;quot;
        keyPassword &amp;quot;密码&amp;quot;
    }
}
 buildTypes {
    release {
        minifyEnabled false
        proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
        signingConfig signingConfigs.release //添加这句话引用签名配置
    }
}&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启用Proguard代码混淆来缩小APK文件的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Proguard是一个Java字节码混淆压缩工具，它可以移除掉React Native Java（和它的依赖库中）中没有被使用到的部分，最终有效的减少APK的大小。&lt;/p&gt;
&lt;p&gt;重要：启用Proguard之后，你必须再次全面地测试你的应用。Proguard有时候需要为你引入的每个原生库做一些额外的配置。参见app/proguard-rules.pro文件。&lt;/p&gt;
&lt;p&gt;def enableProguardInReleaseBuilds = true&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在/android/目录中执行gradle assembleRelease命令，打包后的文件在 android/app/build/outputs/apk目录中，例如app-release.apk。如果打包碰到问题可以先执行 gradle clean 清理一下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一定要注意：在打包的时候要运行起来安卓。&lt;br&gt;安装gradle工具（版本与android\gradle\wrapper下的一致），并配置环境变量，配置GRADLE_HOME到你的gradle根目录当中，然后把%GRADLE_HOME%/bin（linux或mac的是$GRADLE_HOME/bin）加到PATH的环境变量。&lt;br&gt;mac要配置gradle的环境变量的路径&lt;/p&gt;
&lt;p&gt;配置完成之后，运行gradle -v，检查一下是否安装无误&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将apk发布到各大应用市场（BUILD SUCCESSFUL）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;iOS打包&quot;&gt;&lt;a href=&quot;#iOS打包&quot; class=&quot;headerlink&quot; title=&quot;iOS打包&quot;&gt;&lt;/a&gt;iOS打包&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在项目的目录下建立bundle文件夹。然后执行如下命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;react-native bundle --entry-file index.ios.js --platform ios --bundle-output ./bundle/main.jsbundle --dev false --assets-dest ./bundle/&lt;/code&gt;&lt;br&gt;几分钟过后，在 bundle 文件夹里会多出个 assets 文件夹和 main.jsbundle 文件。不然会提示npm install…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把刚刚得到的 main.jsbundle 和 assets 文件夹添加到项目中， 在 Xcode 中 assets 资源文件夹比较特殊，必须用 Create folder references 的方式添加进去，添加完后是蓝色文件夹图标.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改 AppDelegate.m 文件&lt;br&gt;在XCODE里打开 APPDELEGATE.M 文件，找到代码 JSCODELOCATION = [[RCTBUNDLEURLPROVIDER SHAREDSETTINGS]，在其下方添加以下代码 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&amp;quot;main&amp;quot; withExtension:@&amp;quot;jsbundle&amp;quot;];&lt;/code&gt;&lt;br&gt;注意：代码里的 @”main” 和 @”jsbundle”，与之前生成的文件 main.jsbundle 对应。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在XCODE里点击运行，使用模拟器测试APP能否正常运行。&lt;/li&gt;
&lt;li&gt;和在Xcode里面打包原生应用一样的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;打包遇到的问题&quot;&gt;&lt;a href=&quot;#打包遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;打包遇到的问题&quot;&gt;&lt;/a&gt;打包遇到的问题&lt;/h1&gt;&lt;h3 id=&quot;native-echarts的组件问题-—–真机上面React-echart显示不了吗？白色的。&quot;&gt;&lt;a href=&quot;#native-echarts的组件问题-—–真机上面React-echart显示不了吗？白色的。&quot; class=&quot;headerlink&quot; title=&quot;native-echarts的组件问题 —–真机上面React-echart显示不了吗？白色的。&quot;&gt;&lt;/a&gt;native-echarts的组件问题 —–真机上面React-echart显示不了吗？白色的。&lt;/h3&gt;&lt;p&gt;主要是因为路径不对。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;br&gt;将node_modules/native-echarts/src/components/Echarts/tpl.html拷贝到assets下需要修改node_modules/native-echarts/src/components/Echarts/index.js&lt;br&gt;&lt;strong&gt;IOS&lt;/strong&gt;&lt;br&gt; 将tpl.html  放置  Xcode项目 下面 然后如下引用,修改源码下面的index.js&lt;br&gt; 为下面的：&lt;/p&gt;
 &lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; import &lt;span class=&quot;constant&quot;&gt;React&lt;/span&gt;, &amp;#123; &lt;span class=&quot;constant&quot;&gt;Component&lt;/span&gt; &amp;#125; from &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; &lt;span class=&quot;constant&quot;&gt;WebView&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;View&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;StyleSheet&lt;/span&gt; &amp;#125; from &lt;span class=&quot;string&quot;&gt;&#39;react-native&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import renderChart from &lt;span class=&quot;string&quot;&gt;&#39;./renderChart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import echarts from &lt;span class=&quot;string&quot;&gt;&#39;./echarts.min&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export default &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  componentWillReceiveProps(nextProps) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nextProps.option !== this.props.option) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.refs.chart.reload();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;constant&quot;&gt;View&lt;/span&gt; style=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;symbol&quot;&gt;flex:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;height:&lt;/span&gt; this.props.height || &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,&amp;#125;&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;constant&quot;&gt;Platform&lt;/span&gt;.&lt;span class=&quot;constant&quot;&gt;OS&lt;/span&gt;===&lt;span class=&quot;string&quot;&gt;&#39;ios&#39;&lt;/span&gt;?(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;lt;&lt;span class=&quot;constant&quot;&gt;WebView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               ref=&lt;span class=&quot;string&quot;&gt;&quot;chart&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               scrollEnabled = &amp;#123;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               injectedJavaScript = &amp;#123;renderChart(this.props)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               style=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;symbol&quot;&gt;height:&lt;/span&gt; this.props.height || &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               source=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;symbol&quot;&gt;uri:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;tpl.html&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       ):(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;lt;&lt;span class=&quot;constant&quot;&gt;WebView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               ref=&lt;span class=&quot;string&quot;&gt;&quot;chart&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               scrollEnabled = &amp;#123;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               injectedJavaScript = &amp;#123;renderChart(this.props)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               style=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;symbol&quot;&gt;height:&lt;/span&gt; this.props.height || &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               source=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;symbol&quot;&gt;uri:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;file:///android_asset/tpl.html&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       )&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;真机测试时候发现的问题&quot;&gt;&lt;a href=&quot;#真机测试时候发现的问题&quot; class=&quot;headerlink&quot; title=&quot;真机测试时候发现的问题&quot;&gt;&lt;/a&gt;真机测试时候发现的问题&lt;/h1&gt;&lt;h3 id=&quot;react-navigation的问题：&quot;&gt;&lt;a href=&quot;#react-navigation的问题：&quot; class=&quot;headerlink&quot; title=&quot;react-navigation的问题：&quot;&gt;&lt;/a&gt;react-navigation的问题：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ios上面：&lt;br&gt;手势左边滑动就能返回到上一个页面，这样在你不需要返回的时候也返回了。&lt;br&gt;解决方法：&lt;br&gt;gesturesEnabled：是否支持滑动返回收拾，iOS默认支持，安卓默认关闭。设置为false试了一下。&lt;br&gt;参照文章：&lt;a href=&quot;https://hans007.github.io/react-native/2017/06/19/react-navigation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hans007.github.io/react-native/2017/06/19/react-navigation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android上面：物理返回键的处理。&lt;br&gt;BackAndroid已经废弃了，使用BackHandler，大概思路就是添加监听，&lt;br&gt;之前使用Navigator的时候，可以通过下面的方法实现监听安卓的返回键，但使用了react-navigation后，会很迷茫，不知该怎么监听了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决办法：集成Redux咯！集成完Redux，在跳转之后，就能获得路由的length，可以通过length来判断当前页面是第几层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Navigator的方法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentWillMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BackAndroid.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;hardwareBackPress&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentWillUnmount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BackAndroid.removeEventListener(&lt;span class=&quot;string&quot;&gt;&#39;hardwareBackPress&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;onBackAndroid&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const nav = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.navigator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const routers = nav.getCurrentRoutes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (routers.length &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nav.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;react-navigation的方式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentWillMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BackHandler.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;handwareBackPress&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentWillUnmount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BackHandler.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;handwareBackPress&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;onBackAndroid&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const routers = nav.getCurrentRoutes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (routers.length &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 在跳转之后的页面中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;onBackAndroid&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;=&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const &amp;#123;routes&amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(routes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; alert(routes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (routes.length &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 因为其他页面获得不到&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props，所以只能每个页面都写这个方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.navigation.goBack();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;其他小问题&quot;&gt;&lt;a href=&quot;#其他小问题&quot; class=&quot;headerlink&quot; title=&quot;其他小问题&quot;&gt;&lt;/a&gt;其他小问题&lt;/h3&gt;&lt;p&gt; 需要把服务器取过来的数字(也有可能是数字字符串)，将小数点前的数字每隔三位添加一个逗号（前面数是一个四位数的值）。比如取到的值是123456，要将其转换成123,456。搜索了一下，这叫数字分位符号。&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;代码量：近1万行，调通近40个接口。还有很多方面要优化，比如没有用Redux。还有一些其他方面的逻辑也有待优化。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从7月底到9月底两个月的时间开发了一个React-Native的APP。不得不说，用RN的开发效率还是很快的。就来总结一下历程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReactNative的常用组件</title>
    <link href="http://peilinghui.com/2017/07/27/ReactNative%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://peilinghui.com/2017/07/27/ReactNative的常用组件/</id>
    <published>2017-07-27T02:16:21.000Z</published>
    <updated>2017-08-19T03:08:25.000Z</updated>
    
    <content type="html">&lt;p&gt;在开发RN的时候所需用的常用开源组件。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;IDE&quot;&gt;&lt;a href=&quot;#IDE&quot; class=&quot;headerlink&quot; title=&quot;IDE&quot;&gt;&lt;/a&gt;IDE&lt;/h1&gt;&lt;p&gt;刚开始开发的时候用的是Webstrom或者是Sublime，后来发现一个超级IDE：&lt;br&gt;&lt;a href=&quot;https://www.decoide.org/docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.decoide.org/docs&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除了官方文档的一些常用组件，还有一些在项目开发中的常用组件。&lt;/p&gt;
&lt;h1 id=&quot;常用组件&quot;&gt;&lt;a href=&quot;#常用组件&quot; class=&quot;headerlink&quot; title=&quot;常用组件&quot;&gt;&lt;/a&gt;常用组件&lt;/h1&gt;&lt;h2 id=&quot;获取设备相关信息&quot;&gt;&lt;a href=&quot;#获取设备相关信息&quot; class=&quot;headerlink&quot; title=&quot;获取设备相关信息&quot;&gt;&lt;/a&gt;获取设备相关信息&lt;/h2&gt;&lt;p&gt;设备deviceID：&lt;a href=&quot;https://github.com/rebeccahughes/react-native-device-info&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-device-info&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h2&gt;&lt;p&gt;手势解锁：&lt;a href=&quot;https://github.com/spikef/react-native-gesture-password&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gesture-password&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面那个经过测试不好用,用这个：&lt;br&gt;&lt;strong&gt;大小手势解锁：&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/react-native-component/react-native-smart-gesture-password&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-smart-gesture-password&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Touch id指纹解锁：&lt;a href=&quot;https://github.com/naoufal/react-native-touch-id&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;touch-id&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搜索框：&lt;a href=&quot;https://github.com/umhan35/react-native-search-bar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ios可以用的搜索框&lt;/a&gt;&lt;br&gt;&lt;strong&gt;好看的搜索Box：&lt;/strong&gt;：&lt;a href=&quot;&quot;&gt;react-native-search-box&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h2&gt;&lt;p&gt;底部tab组件：&lt;a href=&quot;https://github.com/happypancake/react-native-tab-navigator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-tab-navigator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;侧滑栏：&lt;/strong&gt;&lt;a href=&quot;https://github.com/react-native-community/react-native-side-menu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;side-Menu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顶部tab的滑动&lt;/strong&gt;：&lt;a href=&quot;https://github.com/skv-headless/react-native-scrollable-tab-view&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;scrollable-tab-view&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提示框toast：&lt;a href=&quot;https://github.com/magicismight/react-native-root-toast&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;toast&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下拉刷新组件 &lt;a href=&quot;https://github.com/jsdf/react-native-refreshable-listview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jsdf/react-native-refreshable-listview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模态框 &lt;a href=&quot;https://github.com/brentvatne/react-native-modal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/brentvatne/react-native-modal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;react-native-navbar &lt;a href=&quot;https://github.com/react-native-fellowship/react-native-navbar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/react-native-fellowship/react-native-navbar&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;下拉选择菜单：&lt;/strong&gt;&lt;a href=&quot;https://github.com/WheelerLee/react-native-dropdown-menu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dropdown-menu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;折线图，柱状图，条形图：&lt;a href=&quot;https://github.com/somonus/react-native-echarts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-echarts&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;日历&quot;&gt;&lt;a href=&quot;#日历&quot; class=&quot;headerlink&quot; title=&quot;日历&quot;&gt;&lt;/a&gt;日历&lt;/h1&gt;&lt;p&gt;发现超好用还好看的日历组件：&lt;a href=&quot;https://github.com/xgfe/react-native-datepicker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;datepicker&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在开发RN的时候所需用的常用开源组件。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS应用APP架构</title>
    <link href="http://peilinghui.com/2017/07/14/iOS%E5%BA%94%E7%94%A8APP%E6%9E%B6%E6%9E%84/"/>
    <id>http://peilinghui.com/2017/07/14/iOS应用APP架构/</id>
    <published>2017-07-14T02:54:01.000Z</published>
    <updated>2018-07-25T08:09:54.373Z</updated>
    
    <content type="html">&lt;p&gt;对于网络层的改造其实就相当于iOS应用的APP的架构了，然后就去查了相关的资料。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;发现几篇很好的博文：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/ios-app-arch-part-01?utm_source=infoq&amp;amp;utm_campaign=user_page&amp;amp;utm_medium=link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈（一）：架构设计的方法论&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/ios-app-arch-2-1?utm_source=infoq&amp;amp;utm_campaign=user_page&amp;amp;utm_medium=link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈（二）：View层的组织和调用方案（上）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/ios-app-arch-3-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈（三）：网络层设计方案(上)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://casatwy.com/iOS-Modulization.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈 组件化方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.cnbluebox.com/blog/2015/11/28/module-and-decoupling/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模块化与解耦&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.cnbluebox.com/blog/2015/05/07/architecture-ios-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IOS应用架构思考一（网络层)&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于网络层的改造其实就相当于iOS应用的APP的架构了，然后就去查了相关的资料。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS网络层的封装</title>
    <link href="http://peilinghui.com/2017/07/10/iOS%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>http://peilinghui.com/2017/07/10/iOS网络层的封装/</id>
    <published>2017-07-10T13:26:39.000Z</published>
    <updated>2017-07-13T09:44:38.000Z</updated>
    
    <content type="html">&lt;p&gt;对于项目的重构，很重要的就是对网络层的重构，其实也就是对AFN的二次封装。对于AFN的介绍在前一篇：&lt;a href=&quot;&quot;&gt;研究AFNetworking框架&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;AFN2.0是基于NSURLConnection封装的。而AFN3.0是基于NSURLSession封装的。(NSURLSession是iOS7推出的是为了取代NSURLConnection的)。&lt;/p&gt;
&lt;h1 id=&quot;关于AFN3-0&quot;&gt;&lt;a href=&quot;#关于AFN3-0&quot; class=&quot;headerlink&quot; title=&quot;关于AFN3.0&quot;&gt;&lt;/a&gt;关于AFN3.0&lt;/h1&gt;&lt;h2 id=&quot;HTTP协议&quot;&gt;&lt;a href=&quot;#HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议&quot;&gt;&lt;/a&gt;HTTP协议&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;客户端发给服务器的HTTP请求包含了：&lt;br&gt;&lt;strong&gt;请求行&lt;/strong&gt;：请求方法、请求资源路径、HTTP协议版本号&lt;br&gt;GET /index.htm HTTP/1.1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;请求头：&lt;/strong&gt;对客户端环境的描述，客户端请求的主机的地址。&lt;br&gt;HOST: 192.168.1.105：8080&lt;br&gt;User-Agent:MAC或者IPhone （客户端环境）&lt;br&gt;Accept：text/html   (客户端所能接受的数据类型)&lt;br&gt;Accept-Language：zh-cn   （客户端的语言）&lt;/p&gt;
&lt;p&gt;在POST中有&lt;strong&gt;请求体：&lt;/strong&gt;客户端发给服务器的具体数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器返回给客户端的HTTP响应包含了：（NSHTTPUELResponse）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;状态行：&lt;/strong&gt;协议版本、状态码、状态英文名称&lt;br&gt;HTTP/1.1 200 OK&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应头：&lt;/strong&gt;对服务器的描述、对返回数据的描述。&lt;br&gt;Server：Apache             （服务器）&lt;br&gt;Date: Sat,  22:07:00 GMT&lt;br&gt;Content-Length: 500      （返回数据长度）&lt;br&gt;Content-Type: text/html  (返回数据类型)  &lt;/p&gt;
&lt;p&gt;&lt;html&gt;…..&lt;/html&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实体内容：&lt;/strong&gt;服务器返回给客户端的具体数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1436896-f274db501af46b86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2016-11-07 下午4.44.02.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GET与POST&lt;br&gt;GET：所有的请求参数都拼接在URL后面，如果访问资源，向服务器索要数据就是GET请求。URL长度有限，不能发送太多数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST：把所有请求参数放在请求体(HTTPBody)中，发给服务器的长度没有限制，&lt;br&gt;200：请求成功。 400：客户端请求的语法错误，服务器无法解析。&lt;br&gt;404：服务器无法根据客户端的请求找到资源。&lt;br&gt;500：服务器内部错误，无法完成请求。&lt;/p&gt;
&lt;p&gt;URL还要注意对中文的转码：&lt;br&gt;方法：&lt;code&gt;urlString = [urlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何使用-NSURLSession-发出-HTTP-请求&quot;&gt;&lt;a href=&quot;#如何使用-NSURLSession-发出-HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;如何使用 NSURLSession 发出 HTTP 请求&quot;&gt;&lt;/a&gt;如何使用 NSURLSession 发出 HTTP 请求&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.得到session对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURLSession&lt;/span&gt; *session = [&lt;span class=&quot;built_in&quot;&gt;NSURLSession&lt;/span&gt; sharedSession];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *url = [&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; URLWithString:&lt;span class=&quot;string&quot;&gt;@&quot;http://。。。/Server/login&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;NSMutableURLRequest&lt;/span&gt; *request = [&lt;span class=&quot;built_in&quot;&gt;NSMutableURLRequest&lt;/span&gt; requestWithURL:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request&lt;span class=&quot;variable&quot;&gt;.HTTPMethod&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;@&quot;POST&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置请求体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request&lt;span class=&quot;variable&quot;&gt;.HTTPBody&lt;/span&gt; = [&lt;span class=&quot;string&quot;&gt;@&quot;username=123&amp;amp;pwd=123&quot;&lt;/span&gt; dataUsingEncoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置请求头信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[request setValue:&lt;span class=&quot;string&quot;&gt;@&quot;iPhone 6&quot;&lt;/span&gt; forHTTPHeaderField:&lt;span class=&quot;string&quot;&gt;@&quot;User-Agent&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *task = [session dataTaskWithRequest:request completionHandler:^(&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *data, &lt;span class=&quot;built_in&quot;&gt;NSURLResponse&lt;/span&gt; *response, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//系统的解析方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *dict = [&lt;span class=&quot;built_in&quot;&gt;NSJSONSerialization&lt;/span&gt; JSONObjectWithData:data options:&lt;span class=&quot;built_in&quot;&gt;NSJSONReadingMutableLeaves&lt;/span&gt; error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;----%@&quot;&lt;/span&gt;, dict);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3.开始任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[task resume];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;如何使用-AFNetworking-发出-HTTP-请求&quot;&gt;&lt;a href=&quot;#如何使用-AFNetworking-发出-HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;如何使用 AFNetworking 发出 HTTP 请求&quot;&gt;&lt;/a&gt;如何使用 AFNetworking 发出 HTTP 请求&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;manager&lt;span class=&quot;variable&quot;&gt;.responseSerializer&lt;/span&gt; = [AFHTTPResponseSerializer serializer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[manager POST:&lt;span class=&quot;string&quot;&gt;@&quot;http://baidu.com/verification/user/loginNew.htm?token=&amp;amp;random=27289&amp;amp;version=1.19.0&quot;&lt;/span&gt; parameters:dict progress:^(&lt;span class=&quot;built_in&quot;&gt;NSProgress&lt;/span&gt; * _Nonnull downloadProgress) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;请求成功&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;success:^(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; * _Nonnull task, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;  _Nullable responseObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//请求返回的数据(二进制数据)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;responseObject(二进制) = %@&quot;&lt;/span&gt;,responseObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//转化二进制数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;responseObject = %@&quot;&lt;/span&gt;, [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; alloc] initWithData:responseObject encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; oaLoginSuccess];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;failure:^(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; * _Nullable task, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; * _Nonnull   error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,error);  &lt;span class=&quot;comment&quot;&gt;//这里打印错误信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在 iOS9 中，苹果默认全局 HTTPs，如果你要发送不安全的 HTTP 请求，需要在 info.plist 中加入如下键值对才能发出不安全的 HTTP 请求.&lt;br&gt;还有一件事情是要注意的是，AFNetworking 默认接收 json 格式的响应（因为这是在 iOS 平台上的框架，一般不需要 text/html），如果想要返回 html，需要设置 acceptableContentTypes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;AFN中的相应类&quot;&gt;&lt;a href=&quot;#AFN中的相应类&quot; class=&quot;headerlink&quot; title=&quot;AFN中的相应类&quot;&gt;&lt;/a&gt;AFN中的相应类&lt;/h3&gt;&lt;h5 id=&quot;AFURLSessionManager-核心类&quot;&gt;&lt;a href=&quot;#AFURLSessionManager-核心类&quot; class=&quot;headerlink&quot; title=&quot;AFURLSessionManager(核心类)&quot;&gt;&lt;/a&gt;AFURLSessionManager(核心类)&lt;/h5&gt;&lt;p&gt;AFURLSessionManager 是 AFHTTPSessionManager 的父类&lt;br&gt;AFURLSessionManager 负责生成 NSURLSession 的实例，管理 AFSecurityPolicy 和 AFNetworkReachabilityManager，来保证请求的安全和查看网络连接情况，它有一个 AFJSONResponseSerializer 的实例来序列化 HTTP 响应&lt;/p&gt;
&lt;h5 id=&quot;AFHTTPSessionManager&quot;&gt;&lt;a href=&quot;#AFHTTPSessionManager&quot; class=&quot;headerlink&quot; title=&quot;AFHTTPSessionManager&quot;&gt;&lt;/a&gt;AFHTTPSessionManager&lt;/h5&gt;&lt;p&gt;其中 AFHTTPSessionManager 有着自己的 AFHTTPRequestSerializer 和 AFJSONResponseSerializer 来管理请求和响应的序列化，同时依赖父类提供的接口保证安全、监控网络状态，实现发出 HTTP 请求这一核心功能&lt;/p&gt;
&lt;h5 id=&quot;AFURLRequestSerialization&quot;&gt;&lt;a href=&quot;#AFURLRequestSerialization&quot; class=&quot;headerlink&quot; title=&quot;AFURLRequestSerialization&quot;&gt;&lt;/a&gt;AFURLRequestSerialization&lt;/h5&gt;&lt;p&gt;主要用于 AFHTTPSessionManager 中，因为它主要用于修改 HTTP 头部，提供了一些语义明确的接口设置 HTTP 头部字段。HTTP 头部字段 Accept-Language User-Agent&lt;/p&gt;
&lt;h5 id=&quot;AFURLResponseSerialization&quot;&gt;&lt;a href=&quot;#AFURLResponseSerialization&quot; class=&quot;headerlink&quot; title=&quot;AFURLResponseSerialization&quot;&gt;&lt;/a&gt;AFURLResponseSerialization&lt;/h5&gt;&lt;p&gt;处理响应的模块，将请求返回的数据解析成对应的格式。这个模块使用在 AFURLSessionManager 也就是核心类中&lt;/p&gt;
&lt;h3 id=&quot;为什么要对AFN进行二次封装呢？&quot;&gt;&lt;a href=&quot;#为什么要对AFN进行二次封装呢？&quot; class=&quot;headerlink&quot; title=&quot;为什么要对AFN进行二次封装呢？&quot;&gt;&lt;/a&gt;为什么要对AFN进行二次封装呢？&lt;/h3&gt;&lt;p&gt;上面这种写法可维护性差：主要是因为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址是写死的字符串，对于一个应用来说，网络请求的地址通常是统一而且具有规律的。如果大量的请求都用这种写法，那么想要统一进行修改的话就变得很困难。&lt;/li&gt;
&lt;li&gt;没有统一的请求和响应过滤机制。通常客户端开发当中需要对于请求和响应进行一些处理，例如在请求中加入验证字段（如 Token），以验证请求的合法性。&lt;/li&gt;
&lt;li&gt;对 AFNetworking 产生了强依赖，如果要进行网络库的替换，成本会非常高。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;随着应用复杂程度的增加，上面这种在控制层直接对网络请求层进行交互的方式，会产生越来越多的问题。因此有必要通过单独的一层把控制层（业务层）和网络请求层隔离开来，这一层我们暂时把它叫做“网络封装层”。&lt;/p&gt;
&lt;h3 id=&quot;封装的目标&quot;&gt;&lt;a href=&quot;#封装的目标&quot; class=&quot;headerlink&quot; title=&quot;封装的目标&quot;&gt;&lt;/a&gt;封装的目标&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;监测网络状态&lt;/li&gt;
&lt;li&gt;业务层和网络层分离&lt;/li&gt;
&lt;li&gt;处理环境的变化，开发，测试，预发布，发布&lt;/li&gt;
&lt;li&gt;处理GET、POST、下载、上传的操作&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;如何封装&quot;&gt;&lt;a href=&quot;#如何封装&quot; class=&quot;headerlink&quot; title=&quot;如何封装&quot;&gt;&lt;/a&gt;如何封装&lt;/h2&gt;封装主要是把业务层和网络层分开，此次的封装分为三层：&lt;blockquote&gt;
&lt;p&gt;第一层：首先，从应用层ViewController获取参数，这个参数传到第二层的业务Service，在回调中利用网络请求返回的responseModel来显示在页面上。&lt;br&gt;第二层：设置一个BaseService，然后+LoginService。BaseService中主要是配置公有的参数。在每个业务层的Service中设置每一个的接口定义。业务层主要是暴露接口的定义，而BaseService中定义了BaseRequestModel来实现发起请求到第三层Client。&lt;br&gt;第三层：这层就是CLient，由ASI或者AFN充当，发起网络请求。这一层最好是个单例，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;BaseRequestModel中定义了：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PLHRequestModel&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//网络请求参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nonnull, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * serverRoot; &lt;span class=&quot;comment&quot;&gt;//网络请求的根地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nonnull, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * actionPath;&lt;span class=&quot;comment&quot;&gt;//发起响应的二级地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; timeout;  &lt;span class=&quot;comment&quot;&gt;//时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) PLHHTTPRequestType requestType;  &lt;span class=&quot;comment&quot;&gt;//网络请求方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nonnull, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * serviceName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nullable, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *apiVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nullable, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *parameters; &lt;span class=&quot;comment&quot;&gt;// 请求参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) PLHHTTPServiceType serviceType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Client&quot;&gt;&lt;a href=&quot;#Client&quot; class=&quot;headerlink&quot; title=&quot;Client&quot;&gt;&lt;/a&gt;Client&lt;/h3&gt;&lt;p&gt;单例的，定义了AFURLSessionManager *sessionManager;生成并且发出网络请求。或者直接继承自AFURLSessionManager&lt;/p&gt;
&lt;h4 id=&quot;PLHHTTPRequestSerializer&quot;&gt;&lt;a href=&quot;#PLHHTTPRequestSerializer&quot; class=&quot;headerlink&quot; title=&quot;PLHHTTPRequestSerializer&quot;&gt;&lt;/a&gt;PLHHTTPRequestSerializer&lt;/h4&gt;&lt;p&gt;单例的，生成AFHTTPRequestSerializer，或者直接继承自AFHTTPRequestSerializer。为的是生成NSURLRequest&lt;/p&gt;
&lt;h4 id=&quot;PLHRequestModel&quot;&gt;&lt;a href=&quot;#PLHRequestModel&quot; class=&quot;headerlink&quot; title=&quot;PLHRequestModel&quot;&gt;&lt;/a&gt;PLHRequestModel&lt;/h4&gt;&lt;h4 id=&quot;PLHResponseModel&quot;&gt;&lt;a href=&quot;#PLHResponseModel&quot; class=&quot;headerlink&quot; title=&quot;PLHResponseModel&quot;&gt;&lt;/a&gt;PLHResponseModel&lt;/h4&gt;&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://draveness.me/afnetworking1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AFNetworking 概述&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于项目的重构，很重要的就是对网络层的重构，其实也就是对AFN的二次封装。对于AFN的介绍在前一篇：&lt;a href=&quot;&quot;&gt;研究AFNetworking框架&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目重构遇到的问题</title>
    <link href="http://peilinghui.com/2017/07/05/%E9%A1%B9%E7%9B%AE%E9%87%8D%E6%9E%84%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://peilinghui.com/2017/07/05/项目重构遇到的问题/</id>
    <published>2017-07-05T07:12:10.000Z</published>
    <updated>2018-10-14T09:38:11.344Z</updated>
    
    <content type="html">&lt;p&gt;在项目重构的时候难免会遇到问题。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;旧项目的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用老式框架 ASI，并且没有做任何封装和抽取； 如果工程是ARC的 第三方文件编译选项加上-fno-objc-arc -O0&lt;/li&gt;
&lt;li&gt;字典转模型用的是Jastor.&lt;/li&gt;
&lt;li&gt;没有使用 Cocoa Pods，所有框架都是拖进去的。&lt;/li&gt;
&lt;li&gt;所有的网络请求只用了两个方法，一个同步一个异步。&lt;/li&gt;
&lt;li&gt;所有的VC都是用的代码写的，布局用的frame，这点还好一点，上家公司一大片storyboard，新加需求能把人逼疯的那种。&lt;/li&gt;
&lt;li&gt;一个VC的数据模型在一个类中。&lt;/li&gt;
&lt;li&gt;代码不规范，没有用固定的前缀，Deployment Target设置为6.0.当你把target设置为8.0的时候，警告暴增，很多的方法以及过期了。&lt;/li&gt;
&lt;li&gt;目录结构：项目中目录结构还算清晰，文件中的目录都没有，一大片.h和.m文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了上家公司的经验，我有个初步的计划和构想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把第三方的库可以把一些替换成Pod管理。&lt;/li&gt;
&lt;li&gt;对于网络层以前用的ASI，如果有新的需求就要用AFN，然后对于AFN进行一些封装，写的网络请求的方法要有successBlock和failureBlock。对于数据转模型用yymodel。&lt;/li&gt;
&lt;li&gt;可以写if debug运行环境的配置代码，来切换测试，预发和正式环境。或者我发现用SwitchHost直接切换环境开发的人比较方便，对于测试的人，就得用Charles或者是fiddler的抓包工具设置代理连到自己的电脑来切换到不同的环境测试。&lt;/li&gt;
&lt;li&gt;打包现在是用Xcode的手工打包可以引入Jenkins来实现自动化打包的模式。这就需要搭建Jenkins服务器和配置到gitlab上面。&lt;/li&gt;
&lt;li&gt;Jenkins也可以结合OCLint实现代码的review。&lt;/li&gt;
&lt;li&gt;使用 fir 和 fastlane 实现 iOS 持续集成。实现iOS应用发布流程的自动化&lt;/li&gt;
&lt;li&gt;对于推送可以使用极光推送还有一些统计崩溃率的第三方工具，还有设置埋点来统计APP的功能。&lt;/li&gt;
&lt;li&gt;对于一些登录还有一些公共组件可以抽取成私有的Pod，然后打tag，以便可以共用。&lt;/li&gt;
&lt;li&gt;对于业务方面就是要把数据和业务分离，对于重复出现的tableview可以写基类，然后再进行扩展。&lt;/li&gt;
&lt;li&gt;对于页面的布局要用masonary框架。&lt;/li&gt;
&lt;li&gt;对于一些第三方的框架和组件旧的逐步替换成新的第三方(一直有人维护和更新)的框架。&lt;/li&gt;
&lt;li&gt;当然最最重要的就是把代码进行完善，然后实现业务需求的继续扩张。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，上面都是我暂时的目标和想法，还有待去实践和一步步的改造。需要足够的耐心和坚持。&lt;/p&gt;
&lt;p&gt;在这期间遇到的一些问题：&lt;/p&gt;
&lt;h1 id=&quot;错误1：clang-error-Linker-command-failed-with-exit-code-1&quot;&gt;&lt;a href=&quot;#错误1：clang-error-Linker-command-failed-with-exit-code-1&quot; class=&quot;headerlink&quot; title=&quot;错误1：clang error: Linker command failed with exit code 1&quot;&gt;&lt;/a&gt;错误1：clang error: Linker command failed with exit code 1&lt;/h1&gt;&lt;h2 id=&quot;解决方法：-m文件被重复编译&quot;&gt;&lt;a href=&quot;#解决方法：-m文件被重复编译&quot; class=&quot;headerlink&quot; title=&quot;解决方法：.m文件被重复编译&quot;&gt;&lt;/a&gt;解决方法：.m文件被重复编译&lt;/h2&gt;&lt;p&gt;好好检查代码，看是不是在.m文件中的引入写成了引入.m文件。&lt;br&gt;看看是不是有新添加的文件跟之前文件同名&lt;br&gt;2，错误信息中出现了某个类的名字，去原文件中看看#import了哪些第三方库，把这些库挨个注释排除，找到出错的那个库，然后按照官方提供的步骤重新添加一遍。&lt;/p&gt;
&lt;h2 id=&quot;解决方法：使用Pod管理的时候&quot;&gt;&lt;a href=&quot;#解决方法：使用Pod管理的时候&quot; class=&quot;headerlink&quot; title=&quot;解决方法：使用Pod管理的时候&quot;&gt;&lt;/a&gt;解决方法：使用Pod管理的时候&lt;/h2&gt;&lt;p&gt;在把引入的第三方库改为Cocoapods管理的时候，遇到Linker command failed。&lt;br&gt;链接文件没有找到CocoaPods中的文件，&lt;/p&gt;
&lt;h3 id=&quot;解决方法1：&quot;&gt;&lt;a href=&quot;#解决方法1：&quot; class=&quot;headerlink&quot; title=&quot;解决方法1：&quot;&gt;&lt;/a&gt;解决方法1：&lt;/h3&gt;&lt;p&gt;找到 Build settings-&amp;gt;Linking-&amp;gt;Other Linker Flags&lt;br&gt;将此属性修改成-all_load 或者 -ObjC ，这个视情况而定。总之可以多试几次。&lt;/p&gt;
&lt;h3 id=&quot;解决方法2：&quot;&gt;&lt;a href=&quot;#解决方法2：&quot; class=&quot;headerlink&quot; title=&quot;解决方法2：&quot;&gt;&lt;/a&gt;解决方法2：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Go to project path and remove Pods folder and Podfile.lock file.&lt;/li&gt;
&lt;li&gt;Reinstall pods again using “pod install” command.&lt;/li&gt;
&lt;li&gt;Open xcworkspace and clean it before running.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解决方法3：&quot;&gt;&lt;a href=&quot;#解决方法3：&quot; class=&quot;headerlink&quot; title=&quot;解决方法3：&quot;&gt;&lt;/a&gt;解决方法3：&lt;/h3&gt;&lt;p&gt;如果添加的是第三方静态库（.a文件）&lt;br&gt;这种情况就可能是这个静态库路径混乱导致的链接错误。解决方法：Build settings-&amp;gt;Search Path-&amp;gt;Library Search Paths 添加静态库的相应路径。&lt;/p&gt;
&lt;h1 id=&quot;CocoaPods的相关问题&quot;&gt;&lt;a href=&quot;#CocoaPods的相关问题&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods的相关问题&quot;&gt;&lt;/a&gt;CocoaPods的相关问题&lt;/h1&gt;&lt;h3 id=&quot;pod-install-和-pod-update-的区别：&quot;&gt;&lt;a href=&quot;#pod-install-和-pod-update-的区别：&quot; class=&quot;headerlink&quot; title=&quot;pod install 和 pod update 的区别：&quot;&gt;&lt;/a&gt;pod install 和 pod update 的区别：&lt;/h3&gt;&lt;p&gt;使用 pod install，你只会安装 Podfile 中新改变的东西，并且会：优先遵循 Podfile 里指定的版本信息；其次遵循 Podfile.lock 里指定的版本信息来安装对应的依赖库。比如：下面在 Podfile 里没指定 iRate 的版本，但是 Podfile.lock 里指定了 iRate 的版本是 1.11.1，那么即使现在有最新的 1.11.4，最终也会安装 1.11.1。但是如果 Podfile 里指定了 iRate 版本是 1.11.3，那么则会安装 1.11.3，并更新 Podfile.lock 里的信息。&lt;/p&gt;
&lt;p&gt;使用 pod update，你会根据 Podfile 的规则更新所有依赖库，不会理睬现有的 Podfile.lock，而是根据安装依赖库的情况生成新的 Podfile.lock 文件&lt;br&gt;&lt;a href=&quot;http://www.samirchen.com/about-podfile-lock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于 Podfile.lock 带来的痛&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用CocoaPods开发并打包静态库&quot;&gt;&lt;a href=&quot;#使用CocoaPods开发并打包静态库&quot; class=&quot;headerlink&quot; title=&quot;使用CocoaPods开发并打包静态库&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/brycezhang/p/4117180.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用CocoaPods开发并打包静态库&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;用-CocoaPods-集成本地私有库&quot;&gt;&lt;a href=&quot;#用-CocoaPods-集成本地私有库&quot; class=&quot;headerlink&quot; title=&quot;用 CocoaPods 集成本地私有库&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.samirchen.com/use-cocoapods-to-manage-private-libs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用 CocoaPods 集成本地私有库&lt;/a&gt;&lt;/h3&gt;&lt;h1 id=&quot;静态库-a打包成支持64位的&quot;&gt;&lt;a href=&quot;#静态库-a打包成支持64位的&quot; class=&quot;headerlink&quot; title=&quot;静态库.a打包成支持64位的&quot;&gt;&lt;/a&gt;静态库.a打包成支持64位的&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;2015年2月1日不允许不支持arm64的应用的提交；&lt;/li&gt;
&lt;li&gt;iOS10发布后，如果你的应用中使用到了32位的类、库，没有相应支持64位机型的库，则首次启动后会弹窗式提示：“ xxx可能使iPhone变慢…”；&lt;/li&gt;
&lt;li&gt;iOS10.3公测版发布:封杀32位应用；&lt;/li&gt;
&lt;li&gt;苹果系统（iOS7/iOS8-iOS9）,32位的framework和64位的framework是共存的，所以如果所有的应用都是64位的话，系统就自动不加载32位的framework，这样可以少占用资源，另外对运行的速度是有好处的，也就是说，你会感觉手机运行的快了一点。应用在兼容64位系统后，内存的占用肯定会变多一点，不过性能也有相应的提升。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;i386是针对intel通用微处理器32位处理器&lt;br&gt;x86_64是针对x86架构的64位处理器&lt;br&gt;模拟器32位处理器测试需要i386架构&lt;br&gt;模拟器64位处理器测试需要x86_64架构&lt;br&gt;真机32位处理器需要armv7,或者armv7s架构&lt;br&gt;真机64位处理器需要arm64架构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/567d3b730608&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS armv7, armv7s, arm64区别与应用32位、64位配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;制作方法：一般只要是模拟器一运行就会生成.a的静态库，然后cd到目录下输入lipo -info XXX.a就可以打印出支持的是x86_34,还是什么了，现在一般都要求32位和64位了，如果要是某些项目要在模拟器上运行还要支持i386,所以，可以进行.a静态包的合并。用命令输入lipo -create XX.a XXX.a -output XXXX.a 就可以生成了XXXX.a的静态包。然后导入工程并且在building setting中设置支持arm7,arm7s和arm64即可。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/kaqijiang/blog/649632&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS静态库.a 和framework&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zybuluo.com/qidiandasheng/note/603907&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS里的动态库和静态库&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2014/12/20/64-bit-tips/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;64-bit Tips&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Xib问题&quot;&gt;&lt;a href=&quot;#Xib问题&quot; class=&quot;headerlink&quot; title=&quot;Xib问题&quot;&gt;&lt;/a&gt;Xib问题&lt;/h1&gt;&lt;p&gt;由于更新手机系统iOS11以及xcode9 beta，然后项目在xcode9运行出现一些错误：Compiling IB documents for earlier than iOS 7 is no longer supported.如截图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1244409-5cf0c15ba87dd1f2.png?imageMogr2/auto-orient/strip%7CimageView2/2&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决办法是：Builds for更改版本7之后，我更改成9.0&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1244409-e59c5cbfe0074c5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;关于APP一启动就crash&quot;&gt;&lt;a href=&quot;#关于APP一启动就crash&quot; class=&quot;headerlink&quot; title=&quot;关于APP一启动就crash&quot;&gt;&lt;/a&gt;关于APP一启动就crash&lt;/h1&gt;&lt;p&gt;由于更新手机系统iOS11以及xcode9 beta，然后项目在xcode9运行出现_runWithMainScene:transitionContext:completion错误。解决方法在&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&lt;/code&gt;方法中的UIWindow必须设置它的rootViewController&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在项目重构的时候难免会遇到问题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS中的图表Charts</title>
    <link href="http://peilinghui.com/2017/06/30/iOS%E4%B8%AD%E7%9A%84%E5%9B%BE%E8%A1%A8Charts/"/>
    <id>http://peilinghui.com/2017/06/30/iOS中的图表Charts/</id>
    <published>2017-06-30T12:17:16.000Z</published>
    <updated>2017-07-06T03:28:17.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS中的图表，包括：折线图，柱状图，饼图。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对于数据的展示，最常见的就是柱状图，折线图了。在的上家公司用的柱状图都是自己写的，自己封装的。现在公司接手的项目原来是用core-plot&lt;a href=&quot;https://github.com/core-plot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/core-plot&lt;/a&gt;的第三方库。现在打算尝试一下新的第三方库：&lt;strong&gt;Charts&lt;/strong&gt;&lt;a href=&quot;https://github.com/danielgindi/Charts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/danielgindi/Charts&lt;/a&gt;界面更加的好看了。&lt;/p&gt;
&lt;h1 id=&quot;charts的前期准备&quot;&gt;&lt;a href=&quot;#charts的前期准备&quot; class=&quot;headerlink&quot; title=&quot;charts的前期准备&quot;&gt;&lt;/a&gt;charts的前期准备&lt;/h1&gt;&lt;p&gt;可以看它那个READMe.md,就写了使用，一种共识直接拖进项目，由于是用swift写的，OC也可以使用，因此要设置桥接文件，才可以。一种是使用cocoapods，还有一种是使用Carthage安装。&lt;/p&gt;
&lt;p&gt;我用的是cocoapods的方式：&lt;/p&gt;
&lt;h2 id=&quot;先cocoads安装：&quot;&gt;&lt;a href=&quot;#先cocoads安装：&quot; class=&quot;headerlink&quot; title=&quot;先cocoads安装：&quot;&gt;&lt;/a&gt;先cocoads安装：&lt;/h2&gt;&lt;p&gt;$sudo gem install -n /usr/local/bin cocoapods&lt;/p&gt;
&lt;p&gt;$pod setup&lt;/p&gt;
&lt;h2 id=&quot;集成Charts：&quot;&gt;&lt;a href=&quot;#集成Charts：&quot; class=&quot;headerlink&quot; title=&quot;集成Charts：&quot;&gt;&lt;/a&gt;集成Charts：&lt;/h2&gt;&lt;p&gt;新建一个项目TestChatDemos&lt;/p&gt;
&lt;p&gt;cd 把工程直接拖过来&lt;/p&gt;
&lt;h2 id=&quot;创建podfile文件&quot;&gt;&lt;a href=&quot;#创建podfile文件&quot; class=&quot;headerlink&quot; title=&quot;创建podfile文件&quot;&gt;&lt;/a&gt;创建podfile文件&lt;/h2&gt;&lt;p&gt;touch podfile&lt;/p&gt;
&lt;p&gt;open -a xcode podfile &lt;/p&gt;
&lt;p&gt;在podfile文件中输入&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;platform&lt;/span&gt; :iOS, &lt;span class=&quot;string&quot;&gt;&#39;8.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use_frameworks!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &lt;span class=&quot;string&quot;&gt;&#39;TestCharsDemo&#39;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;Charts&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;Charts/Realm&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post_install &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt; |installer|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    installer.pods_project.targets.&lt;span class=&quot;keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt; |target|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       target.build_configurations.&lt;span class=&quot;keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt; |config|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           config.build_settings[&lt;span class=&quot;string&quot;&gt;&#39;SWIFT_VERSION&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;3.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;pod search Charts&lt;/p&gt;
&lt;p&gt;pod install&lt;/p&gt;
&lt;h2 id=&quot;设置桥接文件&quot;&gt;&lt;a href=&quot;#设置桥接文件&quot; class=&quot;headerlink&quot; title=&quot;设置桥接文件&quot;&gt;&lt;/a&gt;设置桥接文件&lt;/h2&gt;&lt;p&gt;建立与Swift的桥接文件，建立一个以swift文件，提示是否建立桥接，点击creat bridging header&lt;/p&gt;
&lt;p&gt;将pods——testChatDemos。frameworkios添加到 general-&amp;gt;embedded binaries&lt;/p&gt;
&lt;p&gt;在桥接文件中写上要引用的swift头文件 @import Charts；&lt;/p&gt;
&lt;p&gt;用到时导入 #import “testChartDemos-bridging-header.h”的头文件，然后就可以使用Charts里的东西了&lt;/p&gt;
&lt;p&gt;使用ChartsDemos里的东西的时候，要配置product module name 为（TestCharsDemo）系统会自动生成&lt;/p&gt;
&lt;p&gt;“TestCharsDemo-Swift.h”导入&lt;br&gt;“Chart-swift.h”的文件导入&lt;/p&gt;
&lt;p&gt;这样基本就可以运行程序看到ChartsDemo里的案例了。&lt;/p&gt;
&lt;h1 id=&quot;使用Charts&quot;&gt;&lt;a href=&quot;#使用Charts&quot; class=&quot;headerlink&quot; title=&quot;使用Charts&quot;&gt;&lt;/a&gt;使用Charts&lt;/h1&gt;&lt;p&gt;接下来就可以参照GitHUB官网上的Demo来写你需要的图形了。&lt;/p&gt;
&lt;p&gt;使用这个库无非就是几个问题：&lt;br&gt;写界面，放入数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看你的需求是需要那种图，各个图的样式的属性。&lt;/li&gt;
&lt;li&gt;x轴，y轴的数据是从哪里获得的。&lt;/li&gt;
&lt;li&gt;x轴和y轴的数据是否可以动态变化。&lt;/li&gt;
&lt;li&gt;该如何把从服务器传过来的数组对应到图中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;LineChart折线图&quot;&gt;&lt;a href=&quot;#LineChart折线图&quot; class=&quot;headerlink&quot; title=&quot;LineChart折线图&quot;&gt;&lt;/a&gt;LineChart折线图&lt;/h2&gt;&lt;h3 id=&quot;Line-Chart单折线&quot;&gt;&lt;a href=&quot;#Line-Chart单折线&quot; class=&quot;headerlink&quot; title=&quot;Line Chart单折线&quot;&gt;&lt;/a&gt;Line Chart单折线&lt;/h3&gt;&lt;p&gt;1.首先是需要LineChartView。&lt;br&gt;然后是ChartLimitLine-x轴的限制线。&lt;br&gt;ChartLimitLine-Y轴的限制线&lt;br&gt;ChartYAxis设置Y轴，有左边的Y轴leftAxis和右边的Y轴rightAxis。&lt;br&gt;BalloonMarker&lt;/p&gt;
&lt;p&gt;设置x轴和Y轴的数据的方法.&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *values = [[NSMutableArray alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt; val = arc4random_uniform(range) + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [values &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[ChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithX:&lt;/span&gt;i &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;val &lt;span class=&quot;string&quot;&gt;icon:&lt;/span&gt; [UIImage &lt;span class=&quot;string&quot;&gt;imageNamed:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;icon&quot;&lt;/span&gt;]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于0到Count的x轴的值，随机的产生y值，并放入数组values中，其中values是&lt;__nsarraym 0x600000057670=&quot;&quot;&gt;(&lt;br&gt;ChartDataEntry, x: 0.0, y 53.0,&lt;br&gt;ChartDataEntry, x: 1.0, y 91.0,&lt;br&gt;ChartDataEntry, x: 2.0, y 44.0）这样的。&lt;/__nsarraym&gt;&lt;/p&gt;
&lt;p&gt;然后是LineChartDataSet，每一个set对应一条折线。把上面的values放入这个set中当做这条线的各个坐标点。设置它的属性。&lt;br&gt;把每一个set都放入dataSets中，作为LineChartData的数据源，也就是chartView的data源了。&lt;/p&gt;
&lt;h3 id=&quot;Line-Chart-Dual-YAxis-双折线&quot;&gt;&lt;a href=&quot;#Line-Chart-Dual-YAxis-双折线&quot; class=&quot;headerlink&quot; title=&quot;Line Chart(Dual YAxis)双折线&quot;&gt;&lt;/a&gt;Line Chart(Dual YAxis)双折线&lt;/h3&gt;&lt;p&gt;ChartLegend设置图例，就是每条线Dataset的说明。&lt;br&gt;对于其他同上面，其中上面的values变成了三个yVals.放入三个LineChartDataSet中，设置每一个set的属性。&lt;/p&gt;
&lt;h3 id=&quot;Multiple-Lines-Chart多种折线图&quot;&gt;&lt;a href=&quot;#Multiple-Lines-Chart多种折线图&quot; class=&quot;headerlink&quot; title=&quot;Multiple Lines Chart多种折线图&quot;&gt;&lt;/a&gt;Multiple Lines Chart多种折线图&lt;/h3&gt;&lt;p&gt;设置ChartLegend，没有设置x轴和y轴。其他同上。&lt;/p&gt;
&lt;h3 id=&quot;Colored-Line-Chart彩色的折线图&quot;&gt;&lt;a href=&quot;#Colored-Line-Chart彩色的折线图&quot; class=&quot;headerlink&quot; title=&quot;Colored Line Chart彩色的折线图&quot;&gt;&lt;/a&gt;Colored Line Chart彩色的折线图&lt;/h3&gt;&lt;p&gt;设置了_chartViews的Count为4，然后对于每一个_chartViews固定了range就是高度为100.其他同上。&lt;/p&gt;
&lt;h3 id=&quot;TimeLine-Chart时间线的折线图&quot;&gt;&lt;a href=&quot;#TimeLine-Chart时间线的折线图&quot; class=&quot;headerlink&quot; title=&quot;TimeLine Chart时间线的折线图&quot;&gt;&lt;/a&gt;TimeLine Chart时间线的折线图&lt;/h3&gt;&lt;p&gt;LineChartTimeViewController&lt;/p&gt;
&lt;h3 id=&quot;Filled-Line-Chart-填充的折线图&quot;&gt;&lt;a href=&quot;#Filled-Line-Chart-填充的折线图&quot; class=&quot;headerlink&quot; title=&quot;Filled Line Chart 填充的折线图&quot;&gt;&lt;/a&gt;Filled Line Chart 填充的折线图&lt;/h3&gt;&lt;h2 id=&quot;BarChart柱状条形图&quot;&gt;&lt;a href=&quot;#BarChart柱状条形图&quot; class=&quot;headerlink&quot; title=&quot;BarChart柱状条形图&quot;&gt;&lt;/a&gt;BarChart柱状条形图&lt;/h2&gt;&lt;h3 id=&quot;Bar-Chart竖的条形图&quot;&gt;&lt;a href=&quot;#Bar-Chart竖的条形图&quot; class=&quot;headerlink&quot; title=&quot;Bar Chart竖的条形图&quot;&gt;&lt;/a&gt;Bar Chart竖的条形图&lt;/h3&gt;&lt;p&gt;和折线图也差不多。设置x轴ChartXAxis，设置y轴ChartYAxis的leftAxis和rightAxis，图例ChartLegend.&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *yVals = [[NSMutableArray alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; i = start; i &amp;lt; start + count + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt; mult = (range + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt; val = (&lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt;) (arc4random_uniform(mult));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arc4random_uniform(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &amp;lt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [yVals &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[BarChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithX:&lt;/span&gt;i &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;val &lt;span class=&quot;string&quot;&gt;icon:&lt;/span&gt; [UIImage &lt;span class=&quot;string&quot;&gt;imageNamed:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;icon&quot;&lt;/span&gt;]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [yVals &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[BarChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithX:&lt;/span&gt;i &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;val]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;po yVals&lt;/p&gt;
&lt;p&gt;&lt;__nsarraym 0x60800004d4d0=&quot;&quot;&gt;(&lt;br&gt;ChartDataEntry, x: 1.0, y 18.0,&lt;br&gt;ChartDataEntry, x: 2.0, y 36.0,&lt;br&gt;ChartDataEntry, x: 3.0, y 17.0&lt;br&gt;)&lt;/__nsarraym&gt;&lt;/p&gt;
&lt;p&gt;每一个BarChartDataSet是一个柱状图，然后放到datasets中他们会作为BarChartData的数据源。也是_chartView的data&lt;/p&gt;
&lt;h3 id=&quot;Horizontal-Bar-Chart横的条形图&quot;&gt;&lt;a href=&quot;#Horizontal-Bar-Chart横的条形图&quot; class=&quot;headerlink&quot; title=&quot;Horizontal Bar Chart横的条形图&quot;&gt;&lt;/a&gt;Horizontal Bar Chart横的条形图&lt;/h3&gt;&lt;p&gt;就是左边的Y轴是数据的X轴，下面的一条x轴是数据的Y轴。yVals是&lt;__nsarraym 0x6100000591a0=&quot;&quot;&gt;(&lt;br&gt;ChartDataEntry, x: 0.0, y 3.0,&lt;br&gt;ChartDataEntry, x: 10.0, y 20.0,&lt;br&gt;ChartDataEntry, x: 20.0, y 50.0,&lt;br&gt;ChartDataEntry, x: 30.0, y 7.0,&lt;br&gt;ChartDataEntry, x: 40.0, y 33.0,&lt;br&gt;ChartDataEntry, x: 50.0, y 19.0,&lt;br&gt;ChartDataEntry, x: 60.0, y 26.0）&lt;/__nsarraym&gt;&lt;/p&gt;
&lt;h3 id=&quot;Multiple-Bars-Chart多种条形图&quot;&gt;&lt;a href=&quot;#Multiple-Bars-Chart多种条形图&quot; class=&quot;headerlink&quot; title=&quot;Multiple Bars Chart多种条形图&quot;&gt;&lt;/a&gt;Multiple Bars Chart多种条形图&lt;/h3&gt;&lt;h3 id=&quot;Stack-Bar-Chart堆积的柱状条形图&quot;&gt;&lt;a href=&quot;#Stack-Bar-Chart堆积的柱状条形图&quot; class=&quot;headerlink&quot; title=&quot;Stack Bar Chart堆积的柱状条形图&quot;&gt;&lt;/a&gt;Stack Bar Chart堆积的柱状条形图&lt;/h3&gt;&lt;h3 id=&quot;Stack-Bar-Chart-Negative堆积的反向柱状条形图&quot;&gt;&lt;a href=&quot;#Stack-Bar-Chart-Negative堆积的反向柱状条形图&quot; class=&quot;headerlink&quot; title=&quot;Stack Bar Chart Negative堆积的反向柱状条形图&quot;&gt;&lt;/a&gt;Stack Bar Chart Negative堆积的反向柱状条形图&lt;/h3&gt;&lt;h3 id=&quot;Another-Bar-Chart干净的条形图&quot;&gt;&lt;a href=&quot;#Another-Bar-Chart干净的条形图&quot; class=&quot;headerlink&quot; title=&quot;Another Bar Chart干净的条形图&quot;&gt;&lt;/a&gt;Another Bar Chart干净的条形图&lt;/h3&gt;&lt;h3 id=&quot;Sinus-Bar-Chart正弦柱状图&quot;&gt;&lt;a href=&quot;#Sinus-Bar-Chart正弦柱状图&quot; class=&quot;headerlink&quot; title=&quot;Sinus Bar Chart正弦柱状图&quot;&gt;&lt;/a&gt;Sinus Bar Chart正弦柱状图&lt;/h3&gt;&lt;h3 id=&quot;BarChart-positive-negative正反向的柱状图&quot;&gt;&lt;a href=&quot;#BarChart-positive-negative正反向的柱状图&quot; class=&quot;headerlink&quot; title=&quot;BarChart positive/negative正反向的柱状图&quot;&gt;&lt;/a&gt;BarChart positive/negative正反向的柱状图&lt;/h3&gt;&lt;h2 id=&quot;PieChart饼图&quot;&gt;&lt;a href=&quot;#PieChart饼图&quot; class=&quot;headerlink&quot; title=&quot;PieChart饼图&quot;&gt;&lt;/a&gt;PieChart饼图&lt;/h2&gt;&lt;p&gt;PieChartView.不再是X轴和Y轴，而是表示一共把饼图分几块和一共的百分比。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *values = [[NSMutableArray alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [values &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[PieChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithValue:&lt;/span&gt;(arc4random_uniform(mult) + mult / &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;label:&lt;/span&gt;parties[i % parties.count] &lt;span class=&quot;string&quot;&gt;icon:&lt;/span&gt; [UIImage &lt;span class=&quot;string&quot;&gt;imageNamed:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;icon&quot;&lt;/span&gt;]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把values放入PieChartDataSet中，其中values是下面的：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;__NSArrayM &lt;span class=&quot;number&quot;&gt;0x610000042910&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;96.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;118.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;27.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;115.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Pie-Chart饼图、&quot;&gt;&lt;a href=&quot;#Pie-Chart饼图、&quot; class=&quot;headerlink&quot; title=&quot;Pie Chart饼图、&quot;&gt;&lt;/a&gt;Pie Chart饼图、&lt;/h3&gt;&lt;h3 id=&quot;Pie-Chart-With-Value-lines带有值的饼图&quot;&gt;&lt;a href=&quot;#Pie-Chart-With-Value-lines带有值的饼图&quot; class=&quot;headerlink&quot; title=&quot;Pie Chart With Value lines带有值的饼图&quot;&gt;&lt;/a&gt;Pie Chart With Value lines带有值的饼图&lt;/h3&gt;&lt;h3 id=&quot;Half-Pie-Chart一半的饼图&quot;&gt;&lt;a href=&quot;#Half-Pie-Chart一半的饼图&quot; class=&quot;headerlink&quot; title=&quot;Half Pie Chart一半的饼图&quot;&gt;&lt;/a&gt;Half Pie Chart一半的饼图&lt;/h3&gt;&lt;h2 id=&quot;Scatter-Chart离散图&quot;&gt;&lt;a href=&quot;#Scatter-Chart离散图&quot; class=&quot;headerlink&quot; title=&quot;Scatter Chart离散图&quot;&gt;&lt;/a&gt;Scatter Chart离散图&lt;/h2&gt;&lt;h2 id=&quot;Bubble-Chart气泡图&quot;&gt;&lt;a href=&quot;#Bubble-Chart气泡图&quot; class=&quot;headerlink&quot; title=&quot;Bubble Chart气泡图&quot;&gt;&lt;/a&gt;Bubble Chart气泡图&lt;/h2&gt;&lt;h2 id=&quot;Combine-Chart结合的图&quot;&gt;&lt;a href=&quot;#Combine-Chart结合的图&quot; class=&quot;headerlink&quot; title=&quot;Combine Chart结合的图&quot;&gt;&lt;/a&gt;Combine Chart结合的图&lt;/h2&gt;&lt;h2 id=&quot;Radar-Chart雷达分散图&quot;&gt;&lt;a href=&quot;#Radar-Chart雷达分散图&quot; class=&quot;headerlink&quot; title=&quot;Radar Chart雷达分散图&quot;&gt;&lt;/a&gt;Radar Chart雷达分散图&lt;/h2&gt;&lt;h2 id=&quot;Candle-Stick-Chart蜡烛状的图&quot;&gt;&lt;a href=&quot;#Candle-Stick-Chart蜡烛状的图&quot; class=&quot;headerlink&quot; title=&quot;Candle Stick Chart蜡烛状的图&quot;&gt;&lt;/a&gt;Candle Stick Chart蜡烛状的图&lt;/h2&gt;&lt;p&gt;Demo地址：&lt;a href=&quot;https://github.com/peilinghui/BokeDemo/tree/master/PLHDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/BokeDemo/tree/master/PLHDemo&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;其他图表框架&quot;&gt;&lt;a href=&quot;#其他图表框架&quot; class=&quot;headerlink&quot; title=&quot;其他图表框架&quot;&gt;&lt;/a&gt;其他图表框架&lt;/h1&gt;&lt;p&gt;PNChart&lt;a href=&quot;https://github.com/peilinghui/PNChart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/PNChart&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS中的图表，包括：折线图，柱状图，饼图。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动应用的设计模式</title>
    <link href="http://peilinghui.com/2017/06/26/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://peilinghui.com/2017/06/26/移动应用的设计模式/</id>
    <published>2017-06-26T10:55:14.000Z</published>
    <updated>2017-06-27T10:48:13.000Z</updated>
    
    <content type="html">&lt;p&gt;在我们平时使用APP的时候，尤其是现在那些主流的APP，它们的设计模式。是如何迎合用户的需求和喜好。如果你自己做的一款产品你自己都不喜欢的话，如何让更多的用户去使用这个APP呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对于iPhone手机的系统的不断的更新，也是在不断的融合用户的喜好。从指纹解锁，唤起APP的模式。还有通知栏的设计，控制中心的设计，各个应用的排列和图标的显示，只有在意了每个细节才能造就一个更加完美的产品。&lt;br&gt;而对于一个开发人员来讲，不仅要关注现在市场的技术的革新，更重要的是不断的研究其他的主流的产品和主流产品的设计。不然你连自己都不知道自己的产品设计已经out了。&lt;/p&gt;
&lt;h1 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h1&gt;&lt;p&gt;导航有主导航和次级导航。&lt;br&gt;对于iOS用户来讲，一个APP可能更偏好于使用左右滑动的模式。因为上下滑动的模式很容易和系统的控制中心、通知的手势冲突。&lt;/p&gt;
&lt;h2 id=&quot;主导航&quot;&gt;&lt;a href=&quot;#主导航&quot; class=&quot;headerlink&quot; title=&quot;主导航&quot;&gt;&lt;/a&gt;主导航&lt;/h2&gt;&lt;p&gt;没错，在前几年比较流行的就是那种侧边抽屉的主导航，就是“突破画布”的思维来打破虚拟的边界，让这个屏幕尺寸有限的手机可以呈现更多的内容。&lt;br&gt;但是，facebook在千万级用户批量测试中，选项卡式完胜侧边抽屉式和其他类型的导航模式。这也是为什么现在打开很多主流的APP。你会发现很多的APP都使用的是选项式的导航，就是下面的tab的切换，最多只有5个tab。  &lt;/p&gt;
&lt;p&gt;微信：下面有4个tab。微信、通讯录、发现和我。使用用户偏好的左右滑动的手势来实现了聊天记录的标记与删除。而在上部使用简洁的搜索和一个＋的点击，来发起群聊，添加朋友，扫一扫和收付款，这就说明了在顶部的导航，应该放一些比较显目，提醒用户或是做一些常用的功能的入口。&lt;/p&gt;
&lt;p&gt;微博：下面有5个tab。微博、消息、弹框、发现和我。而微博的新版也为了迎合用户喜好的左右滑动，把常用的热门的功能放在外面（原来是在发现里面的）和全部微博平行的左右滑动的入口。左边还是照相机，推出了微博的新功能，微博故事–可以用来拍摄照片和视频，类似朋友圈的小视频，时间大于10秒，而且可以用户个性化的编辑，添加表情、文字、图片，而且类似直播的画面设计，粉丝可以关注然后评论。很赞！&lt;br&gt;右边是扫一扫和打车的入口。顶部是简洁的搜索。  &lt;/p&gt;
&lt;p&gt;京东：下面是5个tab，首页，分类，觅Me，购物车和我的。上面是搜索框。左边是扫一扫，右边是消息。&lt;br&gt;实话说，我比较喜欢京东的设计，尤其是分类tab中的两级的菜单的显示。左边是菜单的项，联动的是菜单下面的collectionView的显示。很容易找到自己所喜欢的类别。然后是觅Me的tab，上面是ScrollView的滑动，很符合用户的左右滑动的习惯，而且一点也不卡的显示了视频精选、直播、关注、清单、问答、视频够、社区、生活、亲子、风尚、美食，滑动特别的流畅，对于视频的缓存，图片和文字的排版，图片的缓存还有下拉图标的动画是一个快递员。真的很好的设计呐~&lt;/p&gt;
&lt;p&gt;淘宝：下面也是5个tab，首页、微淘、问大家、购物车和我的淘宝。上面也同样是扫一扫和搜索框，还有消息。我一直觉得淘宝的拍照购物很神奇，不过现在好像很多电商：比如京东，都实现了这种是一种类似算法匹配的搜索吧。虽然有的时候也不是很准啦。第一个tab还实现了点击一个图标的跳动，显示成了火箭🚀的标识。直接跳转到了猜你喜欢的一系列（这个应该是现在最流行的机器学习大数据来统计用户的喜好）来推荐你的习惯和购物习惯来定制的为你推荐产品，促进你的购物消费。&lt;/p&gt;
&lt;p&gt;支付宝：&lt;/p&gt;
&lt;p&gt;网易云音乐：&lt;/p&gt;
&lt;p&gt;简书：&lt;/p&gt;
&lt;p&gt;手机QQ：手机QQ及更不用说了，都好多年沉淀的技术了，好多的功能的隐藏。都没有注意到过，主要现在跟多的在玩微博，很少玩QQ了，QQ里面有个日迹的入口和微博故事很像。但是入口就没有微博辣么明显了。&lt;/p&gt;
&lt;p&gt;对于这种主流的导航可以写一些个Demo了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在我们平时使用APP的时候，尤其是现在那些主流的APP，它们的设计模式。是如何迎合用户的需求和喜好。如果你自己做的一款产品你自己都不喜欢的话，如何让更多的用户去使用这个APP呢？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jenkins搭建来实现自动化打包</title>
    <link href="http://peilinghui.com/2017/06/14/Jenkins%E6%90%AD%E5%BB%BA%E6%9D%A5%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
    <id>http://peilinghui.com/2017/06/14/Jenkins搭建来实现自动化打包/</id>
    <published>2017-06-14T10:45:34.000Z</published>
    <updated>2017-06-19T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;Jenkins持续集成自动化打包平台在一般公司都会使用，但是有的时候都不用我来弄，凡事都是觉知此事要躬行，只有亲身经历了才会知道怎么做额。好了，就来探索一下吧。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;配置Java环境&quot;&gt;&lt;a href=&quot;#配置Java环境&quot; class=&quot;headerlink&quot; title=&quot;配置Java环境&quot;&gt;&lt;/a&gt;配置Java环境&lt;/h1&gt;&lt;p&gt;mac OS 10.6及以前的版本中系统已经自带了JDK 1.6可以直接使用JDK1.6 ，现在最新是jdk1.8&lt;/p&gt;
&lt;p&gt;在mac OS 10.7及之后的版本中苹果移除了Java的本地支持，所以需要手动安装JDK&lt;/p&gt;
&lt;p&gt;一、  JDK 的下载与安装&lt;br&gt;下载jdk：&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oracle官方下载链接:&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;版本 $ java -version &lt;/li&gt;
&lt;li&gt;&lt;p&gt;mac系统自带的jdk的安装目录在如下目录：/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home&lt;br&gt;在mac系统里面jdk的路径是要到Home这里的，所以我们在后面配置环境变量的时候一点要记住选择到home这个文件这里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们自己安装的jdk的目录一般在：/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home  下,也就是到Library这个目录下面去找应该就可以找到。找到路径以后就是如何配置环境变量的问题，配置环境变量比较简单：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置jdk环境变量&lt;br&gt;编辑profile文件: $ vi /etc/profile,配置JAVA_HOME,Java JDK安装路径,根据你自己的版本来写。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.&lt;span class=&quot;number&quot;&gt;7.0_79&lt;/span&gt;.jdk/Contents/Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLASSPAHT=.:&lt;span class=&quot;variable&quot;&gt;$JAVA&lt;/span&gt;_HOME/lib/dt.jar:&lt;span class=&quot;variable&quot;&gt;$JAVA&lt;/span&gt;_HOME/lib/tools.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PATH=&lt;span class=&quot;variable&quot;&gt;$JAVA&lt;/span&gt;_HOME/bin:&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export JAVA_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export CLASSPATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;保存退出 ,&lt;code&gt;$ source .bash_profile&lt;/code&gt;&lt;br&gt;环境变量是否已经配置成功：&lt;code&gt;echo $JAVA_HOME&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装Jenkins&quot;&gt;&lt;a href=&quot;#安装Jenkins&quot; class=&quot;headerlink&quot; title=&quot;安装Jenkins&quot;&gt;&lt;/a&gt;安装Jenkins&lt;/h1&gt;&lt;p&gt;访问 &lt;a href=&quot;http://localhost:8080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jenkins Master/Slave 架构&lt;/p&gt;
&lt;p&gt;Master/Slave 相当于 Server 和 agent 的概念。Master 提供 web 接口让用户来管理 job 和 slave，job 可以运行在 master 本机或者被分配到 slave 上运行。一个 master 可以关联多个 slave 用来为不同的 job 或相同的 job 的不同配置来服务。&lt;/p&gt;
&lt;p&gt;当 job 被分配到 slave 上运行的时候，此时 master 和 slave 其实是建立的双向字节流的连接， 其中连接方法主要有如下几种:&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins持续集成自动化打包平台在一般公司都会使用，但是有的时候都不用我来弄，凡事都是觉知此事要躬行，只有亲身经历了才会知道怎么做额。好了，就来探索一下吧。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AFNetworking3.0</title>
    <link href="http://peilinghui.com/2017/06/05/AFNetworking3.0/"/>
    <id>http://peilinghui.com/2017/06/05/AFNetworking3.0/</id>
    <published>2017-06-05T06:08:53.000Z</published>
    <updated>2018-07-18T01:34:43.130Z</updated>
    
    <content type="html">&lt;p&gt;研究AFNetworking框架。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;AFNetworking3-0&quot;&gt;&lt;a href=&quot;#AFNetworking3-0&quot; class=&quot;headerlink&quot; title=&quot;AFNetworking3.0&quot;&gt;&lt;/a&gt;AFNetworking3.0&lt;/h1&gt;&lt;h1 id=&quot;NSURLSession&quot;&gt;&lt;a href=&quot;#NSURLSession&quot; class=&quot;headerlink&quot; title=&quot;NSURLSession&quot;&gt;&lt;/a&gt;NSURLSession&lt;/h1&gt;&lt;h2 id=&quot;AFNHTTPSessionManager&quot;&gt;&lt;a href=&quot;#AFNHTTPSessionManager&quot; class=&quot;headerlink&quot; title=&quot;AFNHTTPSessionManager&quot;&gt;&lt;/a&gt;AFNHTTPSessionManager&lt;/h2&gt;&lt;p&gt;&lt;code&gt;AFHTTPSessionManager&lt;/code&gt; is a subclass of &lt;code&gt;AFURLSessionManager&lt;/code&gt; with convenience methods for making HTTP requests. When a &lt;code&gt;baseURL&lt;/code&gt; is provided, requests made with the &lt;code&gt;GET&lt;/code&gt; / &lt;code&gt;POST&lt;/code&gt; / et al. convenience methods can be made with relative paths.&lt;/p&gt;
&lt;h3 id=&quot;在-h文件中&quot;&gt;&lt;a href=&quot;#在-h文件中&quot; class=&quot;headerlink&quot; title=&quot;在.h文件中&quot;&gt;&lt;/a&gt;在.h文件中&lt;/h3&gt;&lt;p&gt;遵守NSSecureCoding, NSCopying协议&lt;/p&gt;
&lt;h4 id=&quot;定义属性&quot;&gt;&lt;a href=&quot;#定义属性&quot; class=&quot;headerlink&quot; title=&quot;定义属性&quot;&gt;&lt;/a&gt;定义属性&lt;/h4&gt;&lt;p&gt;baseURL(NSURL)，requestSerializer(AFHTTPRequestSerializer)，responseSerializer(AFHTTPResponseSerializer)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化方法：&lt;br&gt;&lt;code&gt;+ (instancetype)manager;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (instancetype)initWithBaseURL:(nullable NSURL *)url;&lt;/code&gt;&lt;br&gt;`- (instancetype)initWithBaseURL:(nullable NSURL *)url&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sessionConfiguration:(nullable NSURLSessionConfiguration *)configuration NS_DESIGNATED_INITIALIZER;`
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建HTTP请求&lt;br&gt;主要是发送GET，POST(有无下载，downloadProgress是在Session queue中，不在主队列)，HEAD，PUT，PATCH，DELETE。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (nullable &lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *)GET:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)URLString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            parameters:(nullable &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)parameters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              progress:(nullable &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSProgress&lt;/span&gt; *downloadProgress))downloadProgress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               success:(nullable &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *task, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; _Nullable responseObject))success&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               failure:(nullable &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; * _Nullable task, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error))failure;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只有POST请求有多种，需要加&lt;code&gt;constructingBodyWithBlock:(nullable void (^)(id &amp;lt;AFMultipartFormData&amp;gt; formData))block&lt;/code&gt;将一个参数和拼接数据到HTTP主体。该block参数是采用&lt;code&gt;AFMultipartFormData&lt;/code&gt;协议的对象。&lt;/p&gt;
&lt;h3 id=&quot;在-m文件中&quot;&gt;&lt;a href=&quot;#在-m文件中&quot; class=&quot;headerlink&quot; title=&quot;在.m文件中&quot;&gt;&lt;/a&gt;在.m文件中&lt;/h3&gt;&lt;p&gt;主要是方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *)dataTaskWithHTTPMethod:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       URLString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)URLString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                      parameters:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)parameters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  uploadProgress:(nullable &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSProgress&lt;/span&gt; *uploadProgress)) uploadProgress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                downloadProgress:(nullable &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSProgress&lt;/span&gt; *downloadProgress)) downloadProgress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         success:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;))success&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         failure:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *))failure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *serializationError = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableURLRequest&lt;/span&gt; *request = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.requestSerializer&lt;/span&gt; requestWithMethod:method URLString:[[&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; URLWithString:URLString relativeToURL:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.baseURL&lt;/span&gt;] absoluteString] parameters:parameters error:&amp;amp;serializationError];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (serializationError) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (failure) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.completionQueue&lt;/span&gt; ?: dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                failure(&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, serializationError);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __block &lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *dataTask = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataTask = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dataTaskWithRequest:request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          uploadProgress:uploadProgress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        downloadProgress:downloadProgress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       completionHandler:^(&lt;span class=&quot;built_in&quot;&gt;NSURLResponse&lt;/span&gt; * __unused response, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; responseObject, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (failure) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                failure(dataTask, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (success) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                success(dataTask, responseObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dataTask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所有的网络请求都调用dataTaskWithHTTPMethod这个方法来实现。&lt;br&gt;实现了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NSObject中的description方法来打印出BaseURL，session，和operationQueue。&lt;/li&gt;
&lt;li&gt;NSSecureCoding中的supportsSecureCoding，initWithCoder，encodeWithCoder方法。&lt;/li&gt;
&lt;li&gt;NSCopying中的copyWithZone方法（HTTPClient）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;AFURLSessionManager&quot;&gt;&lt;a href=&quot;#AFURLSessionManager&quot; class=&quot;headerlink&quot; title=&quot;AFURLSessionManager&quot;&gt;&lt;/a&gt;AFURLSessionManager&lt;/h2&gt;&lt;p&gt;&lt;code&gt;AFURLSessionManager&lt;/code&gt;创建和管理一个 &lt;code&gt;NSURLSession&lt;/code&gt; 对象根据一个特殊的 &lt;code&gt;NSURLSessionConfiguration&lt;/code&gt; 对象, 它符合&lt;code&gt;&amp;lt;NSURLSessionTaskDelegate&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;NSURLSessionDataDelegate&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;NSURLSessionDownloadDelegate&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;NSURLSessionDelegate&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;NSURLSession-amp-NSURLSessionTask-Delegate-Methods：&quot;&gt;&lt;a href=&quot;#NSURLSession-amp-NSURLSessionTask-Delegate-Methods：&quot; class=&quot;headerlink&quot; title=&quot;NSURLSession &amp;amp; NSURLSessionTask Delegate Methods：&quot;&gt;&lt;/a&gt;&lt;strong&gt;NSURLSession &amp;amp; NSURLSessionTask Delegate Methods：&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;NSURLSessionDelegate&quot;&gt;&lt;a href=&quot;#NSURLSessionDelegate&quot; class=&quot;headerlink&quot; title=&quot;NSURLSessionDelegate&quot;&gt;&lt;/a&gt;NSURLSessionDelegate&lt;/h4&gt;&lt;p&gt;&lt;code&gt;- URLSession:didBecomeInvalidWithError:&lt;/code&gt;&lt;br&gt;&lt;code&gt;- URLSession:didReceiveChallenge:completionHandler:&lt;/code&gt;&lt;br&gt; &lt;code&gt;- URLSessionDidFinishEventsForBackgroundURLSession:&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;NSURLSessionTaskDelegate&quot;&gt;&lt;a href=&quot;#NSURLSessionTaskDelegate&quot; class=&quot;headerlink&quot; title=&quot;NSURLSessionTaskDelegate&quot;&gt;&lt;/a&gt;NSURLSessionTaskDelegate&lt;/h4&gt;&lt;p&gt;&lt;code&gt;-URLSession:willPerformHTTPRedirection:newRequest:completionHandler:&lt;/code&gt;&lt;br&gt;&lt;code&gt;- URLSession:task:didReceiveChallenge:completionHandler:&lt;/code&gt;&lt;br&gt;&lt;code&gt;-URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:&lt;/code&gt;&lt;br&gt;&lt;code&gt;- URLSession:task:needNewBodyStream:&lt;/code&gt;&lt;br&gt;&lt;code&gt;- URLSession:task:didCompleteWithError:&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;NSURLSessionDataDelegate&quot;&gt;&lt;a href=&quot;#NSURLSessionDataDelegate&quot; class=&quot;headerlink&quot; title=&quot;NSURLSessionDataDelegate&quot;&gt;&lt;/a&gt;NSURLSessionDataDelegate&lt;/h4&gt;&lt;p&gt;&lt;code&gt;URLSession:dataTask:didReceiveResponse:completionHandler:&lt;/code&gt;&lt;br&gt;&lt;code&gt;URLSession:dataTask:didBecomeDownloadTask:&lt;/code&gt;&lt;br&gt;&lt;code&gt;URLSession:dataTask:didReceiveData:&lt;/code&gt;&lt;br&gt;&lt;code&gt;URLSession:dataTask:willCacheResponse:completionHandler:&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;NSURLSessionDownloadDelegate&quot;&gt;&lt;a href=&quot;#NSURLSessionDownloadDelegate&quot; class=&quot;headerlink&quot; title=&quot;NSURLSessionDownloadDelegate&quot;&gt;&lt;/a&gt;NSURLSessionDownloadDelegate&lt;/h4&gt;&lt;p&gt;&lt;code&gt;URLSession:downloadTask:didFinishDownloadingToURL:&lt;/code&gt;&lt;br&gt;&lt;code&gt;URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesWritten:totalBytesExpectedToWrite:&lt;/code&gt;&lt;br&gt;&lt;code&gt;URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;在-h文件中-1&quot;&gt;&lt;a href=&quot;#在-h文件中-1&quot; class=&quot;headerlink&quot; title=&quot;在.h文件中&quot;&gt;&lt;/a&gt;在.h文件中&lt;/h3&gt;&lt;p&gt;遵守协议protocol为 &lt;nsurlsessiondelegate, nsurlsessiontaskdelegate,=&quot;&quot; nsurlsessiondatadelegate,=&quot;&quot; nsurlsessiondownloaddelegate,=&quot;&quot; nssecurecoding,=&quot;&quot; nscopying=&quot;&quot;&gt;，对应相应的代理方法。&lt;/nsurlsessiondelegate,&gt;&lt;/p&gt;
&lt;h4 id=&quot;定义属性-1&quot;&gt;&lt;a href=&quot;#定义属性-1&quot; class=&quot;headerlink&quot; title=&quot;定义属性&quot;&gt;&lt;/a&gt;定义属性&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;session(NSURLSession),operationQueue(NSOperationQueue).responseSerializer(AFURLResponseSerialization)。&lt;/li&gt;
&lt;li&gt;管理安全的策略：securityPolicy(AFSecurityPolicy).&lt;/li&gt;
&lt;li&gt;管理检测网络的连通性：reachabilityManager(AFNetworkReachabilityManager).&lt;/li&gt;
&lt;li&gt;获得 Session Tasks：tasks，dataTasks,uploadTasks,downloadTasks.&lt;/li&gt;
&lt;li&gt;管理回调的队列：&lt;br&gt;completionQueue(dispatch_queue_t),completionGroup(dispatch_group_t).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;定义方法：&quot;&gt;&lt;a href=&quot;#定义方法：&quot; class=&quot;headerlink&quot; title=&quot;定义方法：&quot;&gt;&lt;/a&gt;定义方法：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始化方法：&lt;br&gt;&lt;code&gt;- (instancetype)initWithSessionConfiguration:(nullable NSURLSessionConfiguration *)configuration;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)invalidateSessionCancelingTasks:(BOOL)cancelPendingTasks;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行Data Tasks:&lt;br&gt;`- (NSURLSessionDataTask &lt;em&gt;)dataTaskWithRequest:(NSURLRequest &lt;/em&gt;)request&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   uploadProgress:(nullable void (^)(NSProgress *uploadProgress))uploadProgressBlock
 downloadProgress:(nullable void (^)(NSProgress *downloadProgress))downloadProgressBlock
completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject,  NSError * _Nullable error))completionHandler;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;`&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;运行上传任务：&lt;br&gt;`- (NSURLSessionUploadTask &lt;em&gt;)uploadTaskWithRequest:(NSURLRequest &lt;/em&gt;)request&lt;pre&gt;&lt;code&gt;         fromFile:(NSURL *)fileURL
         progress:(nullable void (^)(NSProgress *uploadProgress))uploadProgressBlock
completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject, NSError  * _Nullable error))completionHandler;`
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;运行下载任务：&lt;br&gt;`- (NSURLSessionDownloadTask &lt;em&gt;)downloadTaskWithRequest:(NSURLRequest &lt;/em&gt;)request&lt;pre&gt;&lt;code&gt;         progress:(nullable void (^)(NSProgress *downloadProgress))downloadProgressBlock
      destination:(nullable NSURL * (^)(NSURL *targetPath, NSURLResponse *response))destination
completionHandler:(nullable void (^)(NSURLResponse *response, NSURL * _Nullable filePath, NSError * _Nullable error))completionHandler;`
&lt;/code&gt;&lt;/pre&gt;还有就是把NSURLRequest替换成NSData,&lt;/li&gt;
&lt;li&gt;获取任务的进程(Getting Progress for Tasks)：&lt;br&gt;&lt;code&gt;- (nullable NSProgress *)uploadProgressForTask:(NSURLSessionTask *)task;&lt;/code&gt;还有downloadProgressForTask&lt;/li&gt;
&lt;li&gt;设置Session的代理回调&lt;br&gt;&lt;code&gt;- (void)setSessionDidBecomeInvalidBlock:(nullable void (^)(NSURLSession *session, NSError *error))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setSessionDidReceiveAuthenticationChallengeBlock:(nullable NSURLSessionAuthChallengeDisposition (^)(NSURLSession *session, NSURLAuthenticationChallenge *challenge, NSURLCredential * _Nullable __autoreleasing * _Nullable credential))block;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置Task的代理回调&lt;br&gt;&lt;code&gt;- (void)setTaskNeedNewBodyStreamBlock:(nullable NSInputStream * (^)(NSURLSession *session, NSURLSessionTask *task))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setTaskWillPerformHTTPRedirectionBlock:(nullable NSURLRequest * (^)(NSURLSession *session, NSURLSessionTask *task, NSURLResponse *response, NSURLRequest *request))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setTaskDidReceiveAuthenticationChallengeBlock:(nullable NSURLSessionAuthChallengeDisposition (^)(NSURLSession *session, NSURLSessionTask *task, NSURLAuthenticationChallenge *challenge, NSURLCredential * _Nullable __autoreleasing * _Nullable credential))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setTaskDidSendBodyDataBlock:(nullable void (^)(NSURLSession *session, NSURLSessionTask *task, int64_t bytesSent, int64_t totalBytesSent, int64_t totalBytesExpectedToSend))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setTaskDidCompleteBlock:(nullable void (^)(NSURLSession *session, NSURLSessionTask *task, NSError * _Nullable error))block;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置Data Task 的代理回调&lt;br&gt;&lt;code&gt;- (void)setDataTaskDidReceiveResponseBlock:(nullable NSURLSessionResponseDisposition (^)(NSURLSession *session, NSURLSessionDataTask *dataTask, NSURLResponse *response))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setDataTaskDidBecomeDownloadTaskBlock:(nullable void (^)(NSURLSession *session, NSURLSessionDataTask *dataTask, NSURLSessionDownloadTask *downloadTask))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setDataTaskDidReceiveDataBlock:(nullable void (^)(NSURLSession *session, NSURLSessionDataTask *dataTask, NSData *data))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setDataTaskWillCacheResponseBlock:(nullable NSCachedURLResponse * (^)(NSURLSession *session, NSURLSessionDataTask *dataTask, NSCachedURLResponse *proposedResponse))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setDidFinishEventsForBackgroundURLSessionBlock:(nullable void (^)(NSURLSession *session))block;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置Download Task的回调方法&lt;br&gt;&lt;code&gt;- (void)setDownloadTaskDidFinishDownloadingBlock:(nullable NSURL * _Nullable  (^)(NSURLSession *session, NSURLSessionDownloadTask *downloadTask, NSURL *location))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setDownloadTaskDidWriteDataBlock:(nullable void (^)(NSURLSession *session, NSURLSessionDownloadTask *downloadTask, int64_t bytesWritten, int64_t totalBytesWritten, int64_t totalBytesExpectedToWrite))block;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)setDownloadTaskDidResumeBlock:(nullable void (^)(NSURLSession *session, NSURLSessionDownloadTask *downloadTask, int64_t fileOffset, int64_t expectedTotalBytes))block;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置通知Notification&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;在-m-文件中&quot;&gt;&lt;a href=&quot;#在-m-文件中&quot; class=&quot;headerlink&quot; title=&quot;在.m 文件中&quot;&gt;&lt;/a&gt;在.m 文件中&lt;/h3&gt;&lt;p&gt;主要有是三个@interface和@implement。&lt;br&gt;一个是AFURLSessionManagerTaskDelegate。&lt;br&gt;一个是_AFURLSessionTaskSwizzling。&lt;br&gt;一个是AFURLSessionManager。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AFURLSessionManagerTaskDelegate&lt;br&gt;遵守协议&lt;nsurlsessiontaskdelegate, nsurlsessiondatadelegate,nsurlsessiondownloaddelegate=&quot;&quot;&gt;，&lt;/nsurlsessiontaskdelegate,&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;NSProgress-Tracking&quot;&gt;&lt;a href=&quot;#NSProgress-Tracking&quot; class=&quot;headerlink&quot; title=&quot;NSProgress Tracking&quot;&gt;&lt;/a&gt;NSProgress Tracking&lt;/h4&gt;&lt;p&gt;&lt;code&gt;- (void)setupProgressForTask:(NSURLSessionTask *)task&lt;/code&gt;&lt;br&gt;一部分是对代理持有的两个属性 uploadProgress和 downloadProgress设置回调&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self.uploadProgress.totalUnitCount &lt;/span&gt;= task.countOfBytesExpectedToSend&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;keyword&quot;&gt;self.uploadProgress &lt;/span&gt;setCancellable:YES]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;keyword&quot;&gt;self.uploadProgress &lt;/span&gt;setCancellationHandler:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       __typeof__(weakTask) &lt;span class=&quot;keyword&quot;&gt;strongTask &lt;/span&gt;= weakTask&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&lt;span class=&quot;keyword&quot;&gt;strongTask &lt;/span&gt;cancel]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;keyword&quot;&gt;self.uploadProgress &lt;/span&gt;setPausable:YES]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;keyword&quot;&gt;self.uploadProgress &lt;/span&gt;setPausingHandler:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       __typeof__(weakTask) &lt;span class=&quot;keyword&quot;&gt;strongTask &lt;/span&gt;= weakTask&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&lt;span class=&quot;keyword&quot;&gt;strongTask &lt;/span&gt;suspend]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;preprocessor&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self.uploadProgress &lt;/span&gt;respondsToSelector:&lt;span class=&quot;comment&quot;&gt;@selector(setResumingHandler:)]) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&lt;span class=&quot;keyword&quot;&gt;self.uploadProgress &lt;/span&gt;setResumingHandler:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           __typeof__(weakTask) &lt;span class=&quot;keyword&quot;&gt;strongTask &lt;/span&gt;= weakTask&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&lt;span class=&quot;keyword&quot;&gt;strongTask &lt;/span&gt;resume]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置上传的取消暂停，下载一样的道理。&lt;br&gt;另一个部分是对 task 和 NSProgress的uploadProgress和downloadPreogress属性进行键值观测。&lt;br&gt;&lt;code&gt;- (void)cleanUpProgressForTask:(NSURLSessionTask *)task&lt;/code&gt;&lt;br&gt;主要是移除download和upload的observer。&lt;br&gt;&lt;code&gt;- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&amp;lt;NSString *,id&amp;gt; *)change context:(void *)context&lt;/code&gt;&lt;br&gt;主要是上面第一个函数中的实现NSURLSessionTask和NSURLSessionDownloadTask的类中下载和上传的的接收和期望接收的字节数，发送和期望发送的字节数。改变进度，并调用 block&lt;/p&gt;
&lt;h4 id=&quot;NSURLSessionTaskDelegate-1&quot;&gt;&lt;a href=&quot;#NSURLSessionTaskDelegate-1&quot; class=&quot;headerlink&quot; title=&quot;NSURLSessionTaskDelegate&quot;&gt;&lt;/a&gt;NSURLSessionTaskDelegate&lt;/h4&gt;&lt;p&gt;&lt;code&gt;- (void)URLSession:(__unused NSURLSession *)session   task:(NSURLSessionTask *)task   didCompleteWithError:(NSError *)error&lt;/code&gt;&lt;br&gt;如果遇到error，dispatch_group_async，如果当前 manager持有 completionGroup或者 completionQueue就在主线程中调用 completionHandler并发送通知(在主线程中)&lt;br&gt;如果在执行当前 task 时没有遇到错误，那么先&lt;strong&gt;对数据进行序列化&lt;/strong&gt;，然后同样调用 block 并发送通知。&lt;/p&gt;
&lt;h4 id=&quot;NSURLSessionDataTaskDelegate与NSURLSessionDownloadTaskDelegate&quot;&gt;&lt;a href=&quot;#NSURLSessionDataTaskDelegate与NSURLSessionDownloadTaskDelegate&quot; class=&quot;headerlink&quot; title=&quot;NSURLSessionDataTaskDelegate与NSURLSessionDownloadTaskDelegate&quot;&gt;&lt;/a&gt;NSURLSessionDataTaskDelegate与NSURLSessionDownloadTaskDelegate&lt;/h4&gt;&lt;p&gt;&lt;code&gt;- (void)URLSession:(__unused NSURLSession *)session    dataTask:(__unused NSURLSessionDataTask *)dataTask    didReceiveData:(NSData *)data&lt;/code&gt;&lt;br&gt;在收到数据后调用。并拼接data.&lt;br&gt;&lt;code&gt;- (void)URLSession:(NSURLSession *)session   downloadTask:(NSURLSessionDownloadTask *)downloadTask    didFinishDownloadingToURL:(NSURL *)location&lt;/code&gt;&lt;br&gt;在下载完成对应文件后调用，并处理下载文件。如果fileManagerError，则发出通知。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;_AFURLSessionTaskSwizzling&lt;br&gt;主要用到runtime的知识，来交换方法。修改 NSURLSessionTask的 resume和 suspend 方法。这样做的目的是为了在方法 resume或者 suspend被调用时发出通知。具体方法调剂过程是在 + load方法中进行的.a.首先用 NSClassFromString(@”NSURLSessionTask”)&lt;br&gt;判断当前部署的 iOS 版本是否含有类 NSURLSessionTask。b.因为 iOS7 和 iOS8 上对于 NSURLSessionTask的实现不同，所以会通过 - [NSURLSession dataTaskWithURL:]方法返回一个 NSURLSessionTask 实例。c .取得当前类 _AFURLSessionTaskSwizzling 中的实现 af_resume。d.如果当前类 currentClass有 resume。&lt;br&gt;方法真：使用 swizzleResumeAndSuspendMethodForClass:调剂该类的 resume 和 suspend方法&lt;br&gt;假：currentClass = [currentClass superclass]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AFURLSessionManager(最重要的地方)&lt;br&gt;a.初始化在&lt;code&gt;- (instancetype)initWithSessionConfiguration:(NSURLSessionConfiguration *)configuration&lt;/code&gt;中，初始化会话配置，设置为默认的defaultSessionConfiguration，初始化会话session，并设置会话的代理和代理队列，初始化响应序列化responseSerializer，安全认证securityPolicy，和监控网络状态reachabilityManager。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;b. 两通知：&lt;code&gt;- (void)taskDidResume:(NSNotification *)notification&lt;/code&gt;与&lt;code&gt;- (void)taskDidSuspend:(NSNotification *)notification&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;c.然后为NSURLSessionTask设置AFURLSessionManagerTaskDelegate，&lt;br&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (AFURLSessionManagerTaskDelegate *)delegateForTask:(NSURLSessionTask *)task&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSParameterAssert(task);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AFURLSessionManagerTaskDelegate *&lt;span class=&quot;keyword&quot;&gt;delegate&lt;/span&gt; = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.&lt;span class=&quot;keyword&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lock&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;delegate&lt;/span&gt; = self.mutableTaskDelegatesKeyedByTaskIdentifier[@(task.taskIdentifier)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.&lt;span class=&quot;keyword&quot;&gt;lock&lt;/span&gt; unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;delegate&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;AFURLSessionManager就是通过字典 mutableTaskDelegatesKeyedByTaskIdentifier来存储并管理每一个 NSURLSessionTask，它以 taskIdentifier为键存储 task。该方法使用 NSLock&lt;br&gt; 来保证不同线程使用 mutableTaskDelegatesKeyedByTaskIdentifier时，不会出现&lt;strong&gt;线程竞争&lt;/strong&gt;的问题。&lt;/p&gt;
&lt;p&gt;d.为DataTask加代理。&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addDelegateForDataTask:(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *)dataTask&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                uploadProgress:(nullable &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSProgress&lt;/span&gt; *uploadProgress)) uploadProgressBlock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              downloadProgress:(nullable &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSProgress&lt;/span&gt; *downloadProgress)) downloadProgressBlock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             completionHandler:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSURLResponse&lt;/span&gt; *response, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; responseObject, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error))completionHandler&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为uploadTask加代理,为downloadTask加代理。移除代理方法&lt;br&gt;&lt;code&gt;- (void)removeDelegateForTask:(NSURLSessionTask *)task&lt;/code&gt;.&lt;br&gt;用KVO检测&lt;br&gt;&lt;code&gt;- (NSArray *)tasksForKeyPath:(NSString *)keyPath&lt;/code&gt;&lt;br&gt;如果无效session，则取消任务：&lt;br&gt;&lt;code&gt;- (void)invalidateSessionCancelingTasks:(BOOL)cancelPendingTasks&lt;/code&gt;&lt;br&gt;设置response的序列&lt;br&gt;&lt;code&gt;- (void)setResponseSerializer:(id &amp;lt;AFURLResponseSerialization&amp;gt;)responseSerializer&lt;/code&gt;&lt;br&gt;为任务添加(add)和移除(remove)通知观察者.&lt;br&gt;&lt;code&gt;- (void)addNotificationObserverForTask:(NSURLSessionTask *)task&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;管理NSURLSessionTask&quot;&gt;&lt;a href=&quot;#管理NSURLSessionTask&quot; class=&quot;headerlink&quot; title=&quot;管理NSURLSessionTask&quot;&gt;&lt;/a&gt;管理NSURLSessionTask&lt;/h4&gt;&lt;p&gt;先调用&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *)dataTaskWithRequest:(&lt;span class=&quot;built_in&quot;&gt;NSURLRequest&lt;/span&gt; *)request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            completionHandler:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSURLResponse&lt;/span&gt; *response, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; responseObject, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error))completionHandler&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;方法传入NSURLRequest，&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *)dataTaskWithRequest:(&lt;span class=&quot;built_in&quot;&gt;NSURLRequest&lt;/span&gt; *)request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               uploadProgress:(nullable &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSProgress&lt;/span&gt; *uploadProgress)) uploadProgressBlock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             downloadProgress:(nullable &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSProgress&lt;/span&gt; *downloadProgress)) downloadProgressBlock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            completionHandler:(nullable &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSURLResponse&lt;/span&gt; *response, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; _Nullable responseObject,  &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; * _Nullable error))completionHandler &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __block &lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *dataTask = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url_session_manager_create_task_safely(^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataTask = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.session&lt;/span&gt; dataTaskWithRequest:request];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addDelegateForDataTask:dataTask uploadProgress:uploadProgressBlock downloadProgress:downloadProgressBlock completionHandler:completionHandler];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dataTask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回一个 AFURLSessionManagerTaskDelegate对象，将 completionHandler的&lt;br&gt; uploadProgressBlock和 downloadProgressBlock 传入该对象并在相应事件发生时进行回调&lt;br&gt;然后&lt;/p&gt;
&lt;h1 id=&quot;Reachability&quot;&gt;&lt;a href=&quot;#Reachability&quot; class=&quot;headerlink&quot; title=&quot;Reachability&quot;&gt;&lt;/a&gt;Reachability&lt;/h1&gt;&lt;h2 id=&quot;AFNetworkReachabilityManager&quot;&gt;&lt;a href=&quot;#AFNetworkReachabilityManager&quot; class=&quot;headerlink&quot; title=&quot;AFNetworkReachabilityManager&quot;&gt;&lt;/a&gt;AFNetworkReachabilityManager&lt;/h2&gt;&lt;p&gt;主要是网络的可用性，类似于苹果文档的&lt;a href=&quot;https://developer.apple.com/library/ios/samplecode/reachability/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reachability&lt;/a&gt;&lt;br&gt; AFNetworkReachabilityStatusUnknow= -1,&lt;br&gt;AFNetworkReachabilityStatusNotReachable     = 0,&lt;br&gt;AFNetworkReachabilityStatusReachableViaWWAN = 1,&lt;br&gt;AFNetworkReachabilityStatusReachableViaWiFi = 2,&lt;/p&gt;
&lt;h3 id=&quot;在-h文件中-2&quot;&gt;&lt;a href=&quot;#在-h文件中-2&quot; class=&quot;headerlink&quot; title=&quot;在.h文件中&quot;&gt;&lt;/a&gt;在.h文件中&lt;/h3&gt;&lt;p&gt;先是初始化：&lt;br&gt;&lt;code&gt;+ (instancetype)sharedManager;&lt;/code&gt;&lt;br&gt;&lt;code&gt;+ (instancetype)manager;&lt;/code&gt;&lt;br&gt;&lt;code&gt;+ (instancetype)managerForDomain:(NSString *)domain;&lt;/code&gt;&lt;br&gt;&lt;code&gt;+ (instancetype)managerForAddress:(const void *)address;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (instancetype)initWithReachability:(SCNetworkReachabilityRef)reachability NS_DESIGNATED_INITIALIZER;&lt;/code&gt;&lt;br&gt;然后开始或停止可用性的监控：&lt;br&gt;&lt;code&gt;- (void)startMonitoring;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (void)stopMonitoring;&lt;/code&gt;&lt;br&gt;&lt;code&gt;- (NSString *)localizedNetworkReachabilityStatusString;&lt;/code&gt;&lt;br&gt;再设置网络可用性来改变回调：&lt;br&gt;&lt;code&gt;- (void)setReachabilityStatusChangeBlock:(nullable void (^)(AFNetworkReachabilityStatus status))block;&lt;/code&gt;&lt;br&gt;最后是一些常量，通知和功能。&lt;/p&gt;
&lt;h3 id=&quot;在-m文件中：&quot;&gt;&lt;a href=&quot;#在-m文件中：&quot; class=&quot;headerlink&quot; title=&quot;在.m文件中：&quot;&gt;&lt;/a&gt;在.m文件中：&lt;/h3&gt;&lt;p&gt;初始化：&lt;br&gt;&lt;code&gt;+ (instancetype)sharedManager&lt;/code&gt;中用dispatch_once，调用&lt;code&gt;+ (instancetype)manager&lt;/code&gt;,&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)managerForDomain:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)domain &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SCNetworkReachabilityRef reachability = SCNetworkReachabilityCreateWithName(k&lt;span class=&quot;built_in&quot;&gt;CFAllocatorDefault&lt;/span&gt;, [domain UTF8String]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AFNetworkReachabilityManager *manager = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; alloc] initWithReachability:reachability];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRelease&lt;/span&gt;(reachability);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; manager;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)managerForAddress:(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)address &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SCNetworkReachabilityRef reachability = SCNetworkReachabilityCreateWithAddress(k&lt;span class=&quot;built_in&quot;&gt;CFAllocatorDefault&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AFNetworkReachabilityManager *manager = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; alloc] initWithReachability:reachability];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRelease&lt;/span&gt;(reachability);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; manager;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 SCNetworkReachabilityCreateWithAddress或者 SCNetworkReachabilityCreateWithName生成一个 SCNetworkReachabilityRef的引用。&lt;/li&gt;
&lt;li&gt;两个方法会通过一个&lt;strong&gt;域名&lt;/strong&gt;或者一个 sockaddr_in的指针生个 SCNetworkReachabilityRef。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;- [AFNetworkReachabilityManager initWithReachability:]&lt;/code&gt;将生成的 SCNetworkReachabilityRef引用传给networkReachability.&lt;/li&gt;
&lt;li&gt;当调用 CFBridgingRelease(reachability)后，会把 reachability桥接成一个 NSObject 对象赋值给self.networkReachability，然后释放原来的 CoreFoundation 对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithReachability:(SCNetworkReachabilityRef)reachability &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _networkReachability = &lt;span class=&quot;built_in&quot;&gt;CFRetain&lt;/span&gt;(reachability);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.networkReachabilityStatus&lt;/span&gt; = AFNetworkReachabilityStatusUnknown;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;监控网络状态：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)startMonitoring &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; stopMonitoring];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.networkReachability&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; __&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)weakSelf = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AFNetworkReachabilityStatusBlock callback = ^(AFNetworkReachabilityStatus status) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt; __&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(weakSelf)strongSelf = weakSelf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        strongSelf&lt;span class=&quot;variable&quot;&gt;.networkReachabilityStatus&lt;/span&gt; = status;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strongSelf&lt;span class=&quot;variable&quot;&gt;.networkReachabilityStatusBlock&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            strongSelf&lt;span class=&quot;variable&quot;&gt;.networkReachabilityStatusBlock&lt;/span&gt;(status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SCNetworkReachabilityContext context = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (__bridge &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)callback, AFNetworkReachabilityRetainCallback, AFNetworkReachabilityReleaseCallback, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SCNetworkReachabilitySetCallback(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.networkReachability&lt;/span&gt;, AFNetworkReachabilityCallback, &amp;amp;context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SCNetworkReachabilityScheduleWithRunLoop(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.networkReachability&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;CFRunLoopGetMain&lt;/span&gt;(), k&lt;span class=&quot;built_in&quot;&gt;CFRunLoopCommonModes&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SCNetworkReachabilityFlags flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (SCNetworkReachabilityGetFlags(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.networkReachability&lt;/span&gt;, &amp;amp;flags)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            AFPostReachabilityStatusChange(flags, callback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)stopMonitoring &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.networkReachability&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SCNetworkReachabilityUnscheduleFromRunLoop(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.networkReachability&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;CFRunLoopGetMain&lt;/span&gt;(), k&lt;span class=&quot;built_in&quot;&gt;CFRunLoopCommonModes&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先调用 - stopMonitoring方法，如果之前设置过对网络状态的监听，使用SCNetworkReachabilityUnscheduleFromRunLoop方法取消之前在 Main Runloop 中的监听.&lt;/li&gt;
&lt;li&gt;创建一个在每次网络状态改变时的回调block，每次回调被调用时，重新设置networkReachabilityStatus的属性，调用networkReachabilityStatus，&lt;/li&gt;
&lt;li&gt;创建一个SCNetworkReachabilityContext，其中的 callback就是上一步中的创建的 block 对象。这里的 AFNetworkReachabilityRetainCallback 和 AFNetworkReachabilityReleaseCallback&lt;br&gt;都是非常简单的 block，在回调被调用时，只是使用 Block_copy和 Block_release&lt;br&gt;这样的宏。传入的 info&lt;br&gt;会以参数的形式在 AFNetworkReachabilityCallback&lt;br&gt;执行时传入&lt;br&gt;static const void &lt;em&gt; AFNetworkReachabilityRetainCallback(const void &lt;/em&gt;info) { return Block_copy(info); }&lt;br&gt;static void AFNetworkReachabilityReleaseCallback(const void *info) { if (info) { Block_release(info); } }&lt;/li&gt;
&lt;li&gt;当目标的网络状态改变时，会调用传入的回调&lt;/li&gt;
&lt;li&gt;在 Main Runloop 中对应的模式开始监控网络状态。&lt;/li&gt;
&lt;li&gt;取当前的网络状态，调用 callback&lt;br&gt;其中&lt;code&gt;SCNetworkReachabilitySetCallback(self.networkReachability, AFNetworkReachabilityCallback, &amp;amp;context);&lt;/code&gt;回调了AFNetworkReachabilityManager的AFNetworkReachabilityCallback。&lt;br&gt;总结：&lt;br&gt;AFNetworkReachabilityManager实际上只是一个对底层 SystemConfiguration库中的 C 函数封装的类，它为我们隐藏了 C 语言的实现，提供了统一的 Objective-C 语言接口。&lt;br&gt;它是 AFNetworking中一个即插即用的模块&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Security&quot;&gt;&lt;a href=&quot;#Security&quot; class=&quot;headerlink&quot; title=&quot;Security&quot;&gt;&lt;/a&gt;Security&lt;/h1&gt;&lt;h2 id=&quot;AFSecurityPolicy&quot;&gt;&lt;a href=&quot;#AFSecurityPolicy&quot; class=&quot;headerlink&quot; title=&quot;AFSecurityPolicy&quot;&gt;&lt;/a&gt;AFSecurityPolicy&lt;/h2&gt;&lt;p&gt;为了阻止中间人攻击，以及其它漏洞的工具。&lt;/p&gt;
&lt;p&gt;用枚举设置了验证服务器被信任的方式SSL的类型有None，PublicKey，还有Certificate。&lt;br&gt;AFSSLPinningModeNone是默认的认证方式，只会在系统的信任的证书列表中对服务端返回的证书进行验证&lt;br&gt;AFSSLPinningModeCertificate需要客户端预先保存服务端的证书&lt;br&gt;AFSSLPinningModePublicKey也需要预先保存服务端发送的证书，但是这里只会验证证书中的公钥是否正确&lt;br&gt;遵守&lt;nssecurecoding, nscopying=&quot;&quot;&gt;。&lt;/nssecurecoding,&gt;&lt;/p&gt;
&lt;h3 id=&quot;从bundle获取证书-并返回&quot;&gt;&lt;a href=&quot;#从bundle获取证书-并返回&quot; class=&quot;headerlink&quot; title=&quot;从bundle获取证书,并返回&quot;&gt;&lt;/a&gt;从bundle获取证书,并返回&lt;/h3&gt;&lt;p&gt;&lt;code&gt;+ (NSSet &amp;lt;NSData *&amp;gt; *)certificatesInBundle:(NSBundle *)bundle;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取特殊的安全策略&quot;&gt;&lt;a href=&quot;#获取特殊的安全策略&quot; class=&quot;headerlink&quot; title=&quot;获取特殊的安全策略&quot;&gt;&lt;/a&gt;获取特殊的安全策略&lt;/h3&gt;&lt;p&gt;&lt;code&gt;+ (instancetype)defaultPolicy;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;p&gt;&lt;code&gt;+ (instancetype)policyWithPinningMode:(AFSSLPinningMode)pinningMode;&lt;/code&gt;&lt;br&gt;&lt;code&gt;+ (instancetype)policyWithPinningMode:(AFSSLPinningMode)pinningMode withPinnedCertificates:(NSSet &amp;lt;NSData *&amp;gt; *)pinnedCertificates;&lt;/code&gt;&lt;br&gt;初始化方法时，主要目的是设置&lt;strong&gt;验证服务器是否受信任的方式&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;验证服务端是否信任&quot;&gt;&lt;a href=&quot;#验证服务端是否信任&quot; class=&quot;headerlink&quot; title=&quot;验证服务端是否信任&quot;&gt;&lt;/a&gt;验证服务端是否信任&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)evaluateServerTrust:(SecTrustRef)serverTrust&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  forDomain:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)domain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (domain &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.allowInvalidCertificates&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.validatesDomainName&lt;/span&gt; &amp;amp;&amp;amp; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.SSLPinningMode&lt;/span&gt; == AFSSLPinningModeNone || [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.pinnedCertificates&lt;/span&gt; count] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;In order to validate a domain name for self signed certificates, you MUST use pinning.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *policies = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.validatesDomainName&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [policies addObject:(__bridge_transfer &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)SecPolicyCreateSSL(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, (__bridge &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt;)domain)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [policies addObject:(__bridge_transfer &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)SecPolicyCreateBasicX509()];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SecTrustSetPolicies(serverTrust, (__bridge &lt;span class=&quot;built_in&quot;&gt;CFArrayRef&lt;/span&gt;)policies);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.SSLPinningMode&lt;/span&gt; == AFSSLPinningModeNone) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.allowInvalidCertificates&lt;/span&gt; || AFServerTrustIsValid(serverTrust);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!AFServerTrustIsValid(serverTrust) &amp;amp;&amp;amp; !&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.allowInvalidCertificates&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.SSLPinningMode&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; AFSSLPinningModeNone:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; AFSSLPinningModeCertificate: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *pinnedCertificates = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *certificateData &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.pinnedCertificates&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [pinnedCertificates addObject:(__bridge_transfer &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)SecCertificateCreateWithData(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, (__bridge &lt;span class=&quot;built_in&quot;&gt;CFDataRef&lt;/span&gt;)certificateData)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            SecTrustSetAnchorCertificates(serverTrust, (__bridge &lt;span class=&quot;built_in&quot;&gt;CFArrayRef&lt;/span&gt;)pinnedCertificates);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!AFServerTrustIsValid(serverTrust)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// obtain the chain after being validated, which *should* contain the pinned certificate in the last position (if it&#39;s the Root CA)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *serverCertificates = AFCertificateTrustChainForServerTrust(serverTrust);            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *trustChainCertificate &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [serverCertificates reverseObjectEnumerator]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.pinnedCertificates&lt;/span&gt; containsObject:trustChainCertificate]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; AFSSLPinningModePublicKey: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; trustedPublicKeyCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *publicKeys = AFPublicKeyTrustChainForServerTrust(serverTrust);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; trustChainPublicKey &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; publicKeys) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; pinnedPublicKey &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.pinnedPublicKeys&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (AFSecKeyIsEqualToKey((__bridge SecKeyRef)trustChainPublicKey, (__bridge SecKeyRef)pinnedPublicKey)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        trustedPublicKeyCount += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; trustedPublicKeyCount &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;所以如果没有提供证书或者不验证证书，并且还设置 allowInvalidCertificates为&lt;strong&gt;真&lt;/strong&gt;，满足上面的所有条件，说明这次的验证是不安全的，会直接返回 NO.&lt;/li&gt;
&lt;li&gt;设置 policy:如果要验证域名的话，就以域名为参数创建一个 SecPolicyRef，否则会创建一个符合 X509 标准的默认SecPolicyRef对象&lt;/li&gt;
&lt;li&gt;验证证书的有效性:如果&lt;strong&gt;只根据信任列表中的证书&lt;/strong&gt;进行验证，即 self.SSLPinningMode == AFSSLPinningModeNone&lt;br&gt;。如果允许无效的证书的就会直接返回 YES&lt;br&gt;。不允许就会对服务端信任进行验证。&lt;br&gt;如果服务器信任无效，并且不允许无效证书，就会返回 NO.&lt;/li&gt;
&lt;li&gt;根据 SSLPinningMode对服务器信任进行验证&lt;br&gt;AFSSLPinningModeNone直接返回 NO&lt;br&gt;AFSSLPinningModeCertificate&lt;br&gt;AFSSLPinningModePublicKey&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Serialization&quot;&gt;&lt;a href=&quot;#Serialization&quot; class=&quot;headerlink&quot; title=&quot;Serialization&quot;&gt;&lt;/a&gt;Serialization&lt;/h1&gt;&lt;p&gt;们&lt;strong&gt;对发出请求以及接收响应的过程&lt;/strong&gt;进行序列化，这涉及到两个&lt;strong&gt;模块&lt;/strong&gt;：&lt;/p&gt;
&lt;h2 id=&quot;AFURLRequestSerialization&quot;&gt;&lt;a href=&quot;#AFURLRequestSerialization&quot; class=&quot;headerlink&quot; title=&quot;AFURLRequestSerialization&quot;&gt;&lt;/a&gt;AFURLRequestSerialization&lt;/h2&gt;&lt;p&gt;修改请求（主要是 HTTP 请求）的头部，提供了一些语义明确的接口设置 HTTP 头部字段。&lt;br&gt;主要用于 AFHTTPSessionManager中，因为它主要用于&lt;strong&gt;修改 HTTP 头部&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;AFURLResponseSerialization（重要）&quot;&gt;&lt;a href=&quot;#AFURLResponseSerialization（重要）&quot; class=&quot;headerlink&quot; title=&quot;AFURLResponseSerialization（重要）&quot;&gt;&lt;/a&gt;AFURLResponseSerialization（重要）&lt;/h2&gt;&lt;p&gt;处理响应的模块，将请求返回的数据解析成对应的格式.这个模块使用在 AFURLSessionManager&lt;br&gt; 也就是核心类。其实也只是个协议&lt;br&gt;&lt;code&gt;@protocol AFURLResponseSerialization &amp;lt;NSObject, NSSecureCoding, NSCopying&amp;gt;&lt;/code&gt;&lt;br&gt;遵循这个协议的类同时也要遵循 NSObject、NSSecureCoding 和 NSCopying 这三个协议，实现安全编码、拷贝以及 Objective-C 对象的基本行为。&lt;br&gt;这个协议只有一个必须实现的方法：&lt;br&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (nullable id)responseObjectForResponse:(nullable &lt;span class=&quot;type&quot;&gt;NSURLResponse&lt;/span&gt; *)response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;:&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSData&lt;/span&gt; *)&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          error:(&lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt; * _Nullable __autoreleasing *)error &lt;span class=&quot;type&quot;&gt;NS_SWIFT_NOTHROW&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在.h文件中中有7个类：&lt;br&gt; 第一个&lt;br&gt;&lt;code&gt;@interface AFHTTPResponseSerializer : NSObject &amp;lt;AFURLResponseSerialization&amp;gt;&lt;/code&gt;剩下的六个AFJSONResponseSerializer，AFXMLParserResponseSerializer，AFXMLDocumentResponseSerializer，AFPropertyListResponseSerializer，AFImageResponseSerializer，AFCompoundResponseSerializer都继承自AFHTTPResponseSerializer。&lt;/p&gt;
&lt;h3 id=&quot;AFHTTPResponseSerializer&quot;&gt;&lt;a href=&quot;#AFHTTPResponseSerializer&quot; class=&quot;headerlink&quot; title=&quot;AFHTTPResponseSerializer&quot;&gt;&lt;/a&gt;AFHTTPResponseSerializer&lt;/h3&gt;&lt;p&gt;先看一下AFHTTPResponseSerializer的实现：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)serializer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.stringEncoding&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.acceptableStatusCodes&lt;/span&gt; = [&lt;span class=&quot;built_in&quot;&gt;NSIndexSet&lt;/span&gt; indexSetWithIndexesInRange:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.acceptableContentTypes&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为是对 HTTP 响应进行序列化，所以这里设置了 stringEncoding为 NSUTF8StringEncoding而且没有对接收的内容类型加以限制。&lt;br&gt;将 acceptableStatusCodes设置为从 200 到 299 之间的状态码, 因为只有这些状态码表示&lt;strong&gt;获得了有效的响应&lt;/strong&gt;&lt;br&gt;验证响应的有效性：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)validateResponse:(&lt;span class=&quot;built_in&quot;&gt;NSHTTPURLResponse&lt;/span&gt; *)response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    data:(&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *)data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   error:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; * __autoreleasing *)error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; responseIsValid = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *validationError = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response &amp;amp;&amp;amp; [response isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;NSHTTPURLResponse&lt;/span&gt; class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.acceptableContentTypes&lt;/span&gt; &amp;amp;&amp;amp; ![&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.acceptableContentTypes&lt;/span&gt; containsObject:[response MIMEType]] &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            !([response MIMEType] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; [data length] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([data length] &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; [response URL]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; *mutableUserInfo = [@&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;built_in&quot;&gt;NSLocalizedDescriptionKey&lt;/span&gt;: [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;built_in&quot;&gt;NSLocalizedStringFromTable&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Request failed: unacceptable content-type: %@&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;AFNetworking&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;), [response MIMEType]],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                          &lt;span class=&quot;built_in&quot;&gt;NSURLErrorFailingURLErrorKey&lt;/span&gt;:[response URL],                                                          AFNetworkingOperationFailingURLResponseErrorKey: response,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                        &amp;#125; mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   mutableUserInfo[AFNetworkingOperationFailingURLResponseDataErrorKey] = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                validationError = AFErrorWithUnderlyingError([&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:AFURLResponseSerializationErrorDomain code:&lt;span class=&quot;built_in&quot;&gt;NSURLErrorCannotDecodeContentData&lt;/span&gt; userInfo:mutableUserInfo], validationError);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            responseIsValid = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.acceptableStatusCodes&lt;/span&gt; &amp;amp;&amp;amp; ![&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.acceptableStatusCodes&lt;/span&gt; containsIndex:(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt;)response&lt;span class=&quot;variable&quot;&gt;.statusCode&lt;/span&gt;] &amp;amp;&amp;amp; [response URL]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; *mutableUserInfo = [@&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               &lt;span class=&quot;built_in&quot;&gt;NSLocalizedDescriptionKey&lt;/span&gt;: [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;built_in&quot;&gt;NSLocalizedStringFromTable&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Request failed: %@ (%ld)&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;AFNetworking&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;), [&lt;span class=&quot;built_in&quot;&gt;NSHTTPURLResponse&lt;/span&gt; localizedStringForStatusCode:response&lt;span class=&quot;variable&quot;&gt;.statusCode&lt;/span&gt;], (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)response&lt;span class=&quot;variable&quot;&gt;.statusCode&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               &lt;span class=&quot;built_in&quot;&gt;NSURLErrorFailingURLErrorKey&lt;/span&gt;:[response URL],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               AFNetworkingOperationFailingURLResponseErrorKey: response,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       &amp;#125; mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mutableUserInfo[AFNetworkingOperationFailingURLResponseDataErrorKey] = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            validationError = AFErrorWithUnderlyingError([&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:AFURLResponseSerializationErrorDomain code:&lt;span class=&quot;built_in&quot;&gt;NSURLErrorBadServerResponse&lt;/span&gt; userInfo:mutableUserInfo], validationError);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            responseIsValid = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error &amp;amp;&amp;amp; !responseIsValid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *error = validationError;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; responseIsValid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个方法根据在初始化方法中初始化的属性 acceptableContentTypes 和 acceptableStatusCodes来判断当前响应是否有效。&lt;/p&gt;
&lt;h3 id=&quot;AFURLResponseSerialization协议的实现&quot;&gt;&lt;a href=&quot;#AFURLResponseSerialization协议的实现&quot; class=&quot;headerlink&quot; title=&quot;AFURLResponseSerialization协议的实现&quot;&gt;&lt;/a&gt;AFURLResponseSerialization协议的实现&lt;/h3&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (id)responseObjectForResponse:(&lt;span class=&quot;type&quot;&gt;NSURLResponse&lt;/span&gt; *)response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;:&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;NSData&lt;/span&gt; *)&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          error:(&lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt; *__autoreleasing *)error&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self validateResponse:(&lt;span class=&quot;type&quot;&gt;NSHTTPURLResponse&lt;/span&gt; *)response &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;:&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; error:error];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要是调用上面的方法对响应进行验证，然后返回数据，实在是没什么难度。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NSSecureCoding&lt;br&gt;对安全协议的实现，就是支持安全编码，根据属性acceptableStatusCodes，acceptableContentTypes然后初始化，然后encode&lt;/li&gt;
&lt;li&gt;NSCopying&lt;br&gt;实现copy属性&lt;h3 id=&quot;AFJSONResponseSerializer&quot;&gt;&lt;a href=&quot;#AFJSONResponseSerializer&quot; class=&quot;headerlink&quot; title=&quot;AFJSONResponseSerializer&quot;&gt;&lt;/a&gt;AFJSONResponseSerializer&lt;/h3&gt;初始化方法只是在调用父类的初始化方法之后更新了 acceptableContentTypes&lt;br&gt;属性：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.acceptableContentTypes = [&lt;span class=&quot;type&quot;&gt;NSSet&lt;/span&gt; setWithObjects:@&lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;text/json&quot;&lt;/span&gt;, @&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个类中与父类差别最大的就是对 AFURLResponseSerialization协议的实现。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)responseObjectForResponse:(&lt;span class=&quot;built_in&quot;&gt;NSURLResponse&lt;/span&gt; *)response data:(&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *)data error:(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *__autoreleasing *)error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#1: 验证请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; validateResponse:(&lt;span class=&quot;built_in&quot;&gt;NSHTTPURLResponse&lt;/span&gt; *)response data:data error:error]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!error || AFErrorOrUnderlyingErrorHasCodeInDomain(*error, &lt;span class=&quot;built_in&quot;&gt;NSURLErrorCannotDecodeContentData&lt;/span&gt;, AFURLResponseSerializationErrorDomain)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;preprocessor&quot;&gt;#2: 解决一个由只包含一个空格的响应引起的 bug, 略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;preprocessor&quot;&gt;#3: 序列化 JSON&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; responseObject = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *serializationError = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Workaround for behavior of Rails to return a single space for `head :ok` (a workaround for a bug in Safari), which is not interpreted as valid input by NSJSONSerialization.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// See https://github.com/rails/rails/issues/1742&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; isSpace = [data isEqualToData:[&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; dataWithBytes:&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; length:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data&lt;span class=&quot;variable&quot;&gt;.length&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; !isSpace) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        responseObject = [&lt;span class=&quot;built_in&quot;&gt;NSJSONSerialization&lt;/span&gt; JSONObjectWithData:data options:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.readingOptions&lt;/span&gt; error:&amp;amp;serializationError];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.removesKeysWithNullValues&lt;/span&gt; &amp;amp;&amp;amp; responseObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        responseObject = AFJSONObjectByRemovingKeysWithNullValues(responseObject, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.readingOptions&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#4: 移除 JSON 中的 null &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*error = AFErrorWithUnderlyingError(serializationError, *error); &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; responseObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后实现NSSecureCoding，NSCopying与上面类似&lt;br&gt;其他几个子类实现差不多。&lt;/p&gt;
&lt;h2 id=&quot;AFURLRequestSerialization-1&quot;&gt;&lt;a href=&quot;#AFURLRequestSerialization-1&quot; class=&quot;headerlink&quot; title=&quot;AFURLRequestSerialization&quot;&gt;&lt;/a&gt;AFURLRequestSerialization&lt;/h2&gt;&lt;p&gt;AFURLRequestSerialization的主要工作是对发出的 HTTP 请求进行处理，它有几部分的工作需要完成。&lt;br&gt;而这个文件中的大部分类都是为 AFHTTPRequestSerializer服务的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;处理查询的 URL 参数&lt;/li&gt;
&lt;li&gt;设置 HTTP 头部字段&lt;/li&gt;
&lt;li&gt;设置请求的属性&lt;/li&gt;
&lt;li&gt;分块上传&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;处理查询参数&quot;&gt;&lt;a href=&quot;#处理查询参数&quot; class=&quot;headerlink&quot; title=&quot;处理查询参数&quot;&gt;&lt;/a&gt;处理查询参数&lt;/h3&gt;&lt;p&gt;处理查询参数这部分主要是通过 AFQueryStringPair还有一些 C 函数来完成的，这个类有两个属性 field和 value对应 HTTP 请求的查询 URL 中的参数。在.m文件中，先是它的实现。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AFQueryStringPair&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;readwrite&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; field;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;readwrite&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithField:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)field value:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)URLEncodedStringValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中URLEncodedStringValue方法会返回&lt;br&gt;&lt;code&gt;return [NSString stringWithFormat:@&amp;quot;%@=%@&amp;quot;, AFPercentEscapedStringFromString([self.field description]), AFPercentEscapedStringFromString([self.value description])];&lt;/code&gt;&lt;br&gt;key=value这种格式，同时使用 AFPercentEscapedStringFromString函数来对 field和 value进行处理，将其中的 :#[]@!$&amp;amp;’()*+,;=等字符转换为百分号表示的形式。&lt;br&gt;这一部分代码还负责返回查询参数，将 AFQueryStringPair中key和value&lt;br&gt; 转换为以下这种形式：&lt;br&gt;username=tom&amp;amp;password=123456&amp;amp;hello[world]=helloworld&lt;br&gt;下面是用FOUNDATION_EXPORT定义的NSArray的数组，有AFQueryStringPairsFromDictionary，AFQueryStringPairsFromKeyAndValue，AFQueryStringFromParameters，AFQueryStringPairsFromDictionary，AFQueryStringPairsFromKeyAndValue。&lt;br&gt;它的实现主要依赖于一个递归函数 AFQueryStringPairsFromKeyAndValue，如果当前的 value&lt;br&gt; 是一个集合类型的话，那么它就会不断地递归调用自己。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSArray * AFQueryStringPairsFromKeyAndValue(NSString *key, id value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableArray *mutableQueryStringComponents = [NSMutableArray array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSSortDescriptor *sortDescriptor = [NSSortDescriptor &lt;span class=&quot;string&quot;&gt;sortDescriptorWithKey:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ascending:&lt;/span&gt;YES &lt;span class=&quot;string&quot;&gt;selector:&lt;/span&gt;&lt;span class=&quot;annotation&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;compare:&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([value &lt;span class=&quot;string&quot;&gt;isKindOfClass:&lt;/span&gt;[NSDictionary &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]]) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSDictionary *dictionary = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Sort dictionary keys to ensure consistent ordering in query string, which is important when deserializing potentially ambiguous sequences, such as an array of dictionaries&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (id nestedKey &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [dictionary.allKeys &lt;span class=&quot;string&quot;&gt;sortedArrayUsingDescriptors:&lt;/span&gt;@[ sortDescriptor ]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            id nestedValue = dictionary[nestedKey];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nestedValue) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [mutableQueryStringComponents &lt;span class=&quot;string&quot;&gt;addObjectsFromArray:&lt;/span&gt;AFQueryStringPairsFromKeyAndValue((key ? [NSString stringWithFormat:@&lt;span class=&quot;string&quot;&gt;&quot;%@[%@]&quot;&lt;/span&gt;, key, nestedKey] : nestedKey), nestedValue)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([value &lt;span class=&quot;string&quot;&gt;isKindOfClass:&lt;/span&gt;[NSArray &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]]) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSArray *array = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (id nestedValue &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; array) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [mutableQueryStringComponents &lt;span class=&quot;string&quot;&gt;addObjectsFromArray:&lt;/span&gt;AFQueryStringPairsFromKeyAndValue([NSString &lt;span class=&quot;string&quot;&gt;stringWithFormat:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;%@[]&quot;&lt;/span&gt;, key], nestedValue)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([value &lt;span class=&quot;string&quot;&gt;isKindOfClass:&lt;/span&gt;[NSSet &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]]) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSSet *set = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (id obj &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [set &lt;span class=&quot;string&quot;&gt;sortedArrayUsingDescriptors:&lt;/span&gt;@[ sortDescriptor ]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [mutableQueryStringComponents &lt;span class=&quot;string&quot;&gt;addObjectsFromArray:&lt;/span&gt;AFQueryStringPairsFromKeyAndValue(key, obj)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [mutableQueryStringComponents &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[AFQueryStringPair alloc] &lt;span class=&quot;string&quot;&gt;initWithField:&lt;/span&gt;key &lt;span class=&quot;string&quot;&gt;value:&lt;/span&gt;value]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mutableQueryStringComponents;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回一个数组&lt;br&gt;[ username=tom, password=123456, hello[world]=helloworld]&lt;br&gt;得到这个数组之后就会调用 AFQueryStringFromParameters使用 &amp;amp;来拼接它们。&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * AFQueryStringFromParameters(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *parameters) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *mutablePairs = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (AFQueryStringPair *pair &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; AFQueryStringPairsFromDictionary(parameters)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [mutablePairs addObject:[pair URLEncodedStringValue]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [mutablePairs componentsJoinedByString:&lt;span class=&quot;string&quot;&gt;@&quot;&amp;amp;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置请求的属性&lt;br&gt;这个下面有一个AFStreamingMultipartFormData的声明，是多形式的数据流。&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; * AFHTTPRequestSerializerObservedKeyPaths() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *_AFHTTPRequestSerializerObservedKeyPaths = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _AFHTTPRequestSerializerObservedKeyPaths = @[&lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(allowsCellularAccess)), &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(cachePolicy)), &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(HTTPShouldHandleCookies)), &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(HTTPShouldUsePipelining)), &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(networkServiceType)), &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(timeoutInterval))];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _AFHTTPRequestSerializerObservedKeyPaths;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这些属性被设置时，会触发 KVO，然后将新的属性存储在一个名为 mutableObservedChangedKeyPaths的字典中：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;tag&quot;&gt;observeValueForKeyPath&lt;/span&gt;:(NSString *)&lt;span class=&quot;tag&quot;&gt;keyPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;tag&quot;&gt;ofObject&lt;/span&gt;:(__unused id)&lt;span class=&quot;tag&quot;&gt;object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;tag&quot;&gt;change&lt;/span&gt;:(NSDictionary *)&lt;span class=&quot;tag&quot;&gt;change&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;tag&quot;&gt;context&lt;/span&gt;:(void *)&lt;span class=&quot;tag&quot;&gt;context&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;if&lt;/span&gt; (context == AFHTTPRequestSerializerObserverContext) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;if&lt;/span&gt; ([change[NSKeyValueChangeNewKey] &lt;span class=&quot;attribute&quot;&gt;isEqual&lt;/span&gt;:[NSNull null]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr_selector&quot;&gt;[self.mutableObservedChangedKeyPaths removeObject:keyPath]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;tag&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr_selector&quot;&gt;[self.mutableObservedChangedKeyPaths addObject:keyPath]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后会在生成NSURLRequest的时候设置这些属性：&lt;/p&gt;
&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableURLRequest *mutableRequest = [[NSMutableURLRequest alloc] initWithURL:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mutableRequest.HTTPMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;method&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (NSString *keyPath &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; AFHTTPRequestSerializerObservedKeyPaths()) &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if ([self.mutableObservedChangedKeyPaths containsObject:keyPath]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [mutableRequest setValue:[self valueForKeyPath:keyPath] forKey:keyPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;设置HTTP头部字段&lt;br&gt;在AFHTTPRequestSerializer的interface文件中提供了一些属性方便我们设置 HTTP 头部字段&lt;br&gt;mutableHTTPRequestHeaders.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)HTTPRequestHeaders &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在设置 HTTP 头部字段时，都会存储到这个可变字典中。而当真正使用时，用这个方法，来获取对应版本的不可变字典。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; dictionaryWithDictionary:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.mutableHTTPRequestHeaders&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setValue:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;forHTTPHeaderField:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)field&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.mutableHTTPRequestHeaders&lt;/span&gt; setValue:value forKey:field];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)valueForHTTPHeaderField:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)field &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.mutableHTTPRequestHeaders&lt;/span&gt; valueForKey:field];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个类是如何设置一些我们平时常用的头部字段的。首先是 User-Agent，AFHTTPRequestSerializer刚刚初始化时，就会根据当前编译的平台生成一个 userAgent。在iOS，ios_watch还有iOS_VERSION_MIN的平台下生成不同。&lt;br&gt;之后有方法设置授权头部用用户名和密码，还有清除方法：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setAuthorizationHeaderFieldWithUsername:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)username&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       password:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *basicAuthCredentials = [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@:%@&quot;&lt;/span&gt;, username, password] dataUsingEncoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *base64AuthCredentials = [basicAuthCredentials base64EncodedStringWithOptions:(&lt;span class=&quot;built_in&quot;&gt;NSDataBase64EncodingOptions&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setValue:[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;Basic %@&quot;&lt;/span&gt;, base64AuthCredentials] forHTTPHeaderField:&lt;span class=&quot;string&quot;&gt;@&quot;Authorization&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)clearAuthorizationHeader &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.mutableHTTPRequestHeaders&lt;/span&gt; removeObjectForKey:&lt;span class=&quot;string&quot;&gt;@&quot;Authorization&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置了AFHTTPBodyPart，AFMultipartBodyStream的@interface。&lt;/p&gt;
&lt;p&gt; 字符串：&lt;/p&gt;
&lt;p&gt;#UIKit+AFNetworking&lt;/p&gt;
&lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/AFNetworking/%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%20AFURLSerialization%EF%BC%88%E4%B8%89%EF%BC%89.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码解析&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;研究AFNetworking框架。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搜索框的Demo</title>
    <link href="http://peilinghui.com/2017/05/27/%E6%90%9C%E7%B4%A2%E6%A1%86%E7%9A%84Demo/"/>
    <id>http://peilinghui.com/2017/05/27/搜索框的Demo/</id>
    <published>2017-05-27T15:11:25.000Z</published>
    <updated>2018-07-18T01:43:18.746Z</updated>
    
    <content type="html">&lt;p&gt;打开手机，就会发现我们用的最多的就是TableView和搜索框了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;打开手机，从通知中心的搜索，APP store的搜索，通讯录的搜索，设置页面的搜索，照片搜索，信息搜索，再到打开每一个APP，都有的搜索。看了下，实现的需求类似，基本上都是输入关键字从网络接口上来搜索，只要点击过的都会保存到历史记录中，然后显示到历史记录的tableview中，下次可以直接点击然后搜索。可以清空单个记录或者所有的历史记录。还有一些APP还有热门搜索的标签。&lt;br&gt;所以，鉴于此，决定做一个Demo出来。&lt;/p&gt;
&lt;h1 id=&quot;搜索框&quot;&gt;&lt;a href=&quot;#搜索框&quot; class=&quot;headerlink&quot; title=&quot;搜索框&quot;&gt;&lt;/a&gt;搜索框&lt;/h1&gt;&lt;p&gt;对于搜索框可以用系统自带的UISearchBar，UISearchController，UISearchDisplayController，或者是自定义搜索框–把UIView和UITextField代理结合起来，&lt;/p&gt;
&lt;h1 id=&quot;搜索功能&quot;&gt;&lt;a href=&quot;#搜索功能&quot; class=&quot;headerlink&quot; title=&quot;搜索功能&quot;&gt;&lt;/a&gt;搜索功能&lt;/h1&gt;&lt;p&gt;对于搜索功能的实现，&lt;br&gt;动态的：可以在输入一个字符，根据关键字去请求接口来返回数据加载在tableView上。&lt;br&gt;静态的：如果数据是本地的，或者是已经加载出来的数据中来搜索的话，可以用&lt;br&gt;NSPredicate来做过滤筛选出想要搜索的结果。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; *resultPredicate = [&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; predicateWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;SELF contains[cd] %@&quot;&lt;/span&gt;, searchText];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.searchResults&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.items&lt;/span&gt; filteredArrayUsingPredicate:resultPredicate];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;历史记录的存储&quot;&gt;&lt;a href=&quot;#历史记录的存储&quot; class=&quot;headerlink&quot; title=&quot;历史记录的存储&quot;&gt;&lt;/a&gt;历史记录的存储&lt;/h1&gt;&lt;p&gt;对于已经搜索过的历史记录可以选择的数据化存储有NSUserDefault，存在本地的Plist。还有就是Core Data的存储。&lt;br&gt;在APPdelegate中打印NSLog(@”%@”, NSHomeDirectory());记录本地存储的地址。&lt;br&gt;一般是/Users/peilinghui/Library/Developer/CoreSimulator/Devices/44CFA0DF-507C-4C90-A9E2-215F6706FB36/data/Containers/Data/Application/AA25A5E2-6E19-47F4-AB43-D4C73B1C3DE5。每次登陆都不一样额。&lt;/p&gt;
&lt;p&gt;[[NSUserDefaults standardUserDefaults] objectForKey:obj];&lt;/p&gt;
&lt;p&gt;对于多用户的历史记录的存储要拼接用户名&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *paths = &lt;span class=&quot;built_in&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSDocumentDirectory&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSUserDomainMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *docDir = [paths objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NSString *historyScheduleListPath = [docDir stringByAppendingPathComponent:@&quot;historySchedule.plist&quot;];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *historyScheduleListPath = [docDir stringByAppendingPathComponent:[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;history--%@.plist&quot;&lt;/span&gt;,UserDefaultsObjectForKey(LOGINUSERNAME)]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;tableView的数据源&quot;&gt;&lt;a href=&quot;#tableView的数据源&quot; class=&quot;headerlink&quot; title=&quot;tableView的数据源&quot;&gt;&lt;/a&gt;tableView的数据源&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;如果是从接口查询数据的话，必然有历史记录的table和查询结果table。这个需要用到两个tableView两个数据源。通过判断来加载不同的数据源。&lt;/li&gt;
&lt;li&gt;如果是从已经有的数据源中搜索结果，不论是静态的还是先从历史记录中搜索，用到谓词匹配的时候，也可以设置两个数据源来刷新一个table，或者是两个table两个数据源.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;键盘的收起&quot;&gt;&lt;a href=&quot;#键盘的收起&quot; class=&quot;headerlink&quot; title=&quot;键盘的收起&quot;&gt;&lt;/a&gt;键盘的收起&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;当数据加载到tableview上，然后滚动时，要收起键盘：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#pragma mark - &lt;span class=&quot;title&quot;&gt;&amp;lt; UIScrollViewDelegate &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewWillBeginDragging:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.searchBar&lt;/span&gt; setShowsCancelButton:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt; animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.searchBar&lt;/span&gt; endEditing:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;点击searchBar的确定搜索和取消按钮的时候，要收起键盘：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;[searchBar resignFirstResponder];&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当进入后台的时候要收起键盘：不用view实现endEditing的方法&lt;br&gt;&lt;code&gt;[[[UIApplication sharedApplication] keyWindow] endEditing:YES];&lt;/code&gt;&lt;br&gt;或者&lt;br&gt;&lt;code&gt;[[UIApplication sharedApplication] sendAction:@selector(resignFirstResponder) to:nil from:nil forEvent:nil];&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击背景View的时候收起键盘：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;点击背景收起键盘可以实现view的&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesBegan:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event方法，然后执行view的- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)endEditing:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)force;方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesBegan:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt; endEditing:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//实现该方法是需要注意view需要是继承UIControl而来的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在背景view上面加手势，添加UIButton或者view，然后在对应的点击事件的监听方法中实现resignFirstResponder或者endEditing。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt; *tapGestureRecognizer = [[&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(keyboardHide:)];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置成NO表示当前控件响应后会传播到其他控件上，默认为YES。  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tapGestureRecognizer&lt;span class=&quot;variable&quot;&gt;.cancelsTouchesInView&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//将触摸事件添加到view上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt; addGestureRecognizer:tapGestureRecognizer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)keyboardHide:(&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt;*)tap&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [textFiled resignFirstResponder];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Demo地址：&lt;a href=&quot;https://github.com/peilinghui/BokeDemo/tree/master/%E7%A4%BA%E4%BE%8B%E6%90%9C%E7%B4%A2%E6%A1%86%E7%9A%84Table&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/BokeDemo/tree/master/%E7%A4%BA%E4%BE%8B%E6%90%9C%E7%B4%A2%E6%A1%86%E7%9A%84Table&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;打开手机，就会发现我们用的最多的就是TableView和搜索框了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何使用Mac本地服务器</title>
    <link href="http://peilinghui.com/2017/05/27/%E4%BD%BF%E7%94%A8Mac%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://peilinghui.com/2017/05/27/使用Mac本地服务器/</id>
    <published>2017-05-27T14:27:26.000Z</published>
    <updated>2017-05-27T15:42:26.000Z</updated>
    
    <content type="html">&lt;p&gt;我们经常性的需要使用局域网搭建 Web 服务器测试环境，如部署局域网无线安装企业应用，模拟某个接口的返回JSON的时候，Mac OS X 自带了 Apache 和 PHP 环境，我们只需要简单的启动它就行了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;启动-Apache&quot;&gt;&lt;a href=&quot;#启动-Apache&quot; class=&quot;headerlink&quot; title=&quot;启动 Apache&quot;&gt;&lt;/a&gt;启动 Apache&lt;/h1&gt;&lt;h4 id=&quot;查看Apache版本&quot;&gt;&lt;a href=&quot;#查看Apache版本&quot; class=&quot;headerlink&quot; title=&quot;查看Apache版本&quot;&gt;&lt;/a&gt;查看Apache版本&lt;/h4&gt;&lt;p&gt;打开终端，输入&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ httpd -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server version: Apache/&lt;span class=&quot;number&quot;&gt;2.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.25&lt;/span&gt; (Unix)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server built:   Feb  &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;08&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;启动Apache&quot;&gt;&lt;a href=&quot;#启动Apache&quot; class=&quot;headerlink&quot; title=&quot;启动Apache&quot;&gt;&lt;/a&gt;启动Apache&lt;/h4&gt;&lt;p&gt;在终端输入 sudo apachectl start 即可启动 Apache。&lt;br&gt;启动后，在浏览器中输入 &lt;a href=&quot;http://127.0.0.1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1&lt;/a&gt; 或 &lt;a href=&quot;http://localhost&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost&lt;/a&gt; 如果看到 It Works! 页面。那么 Apache 就启动成功了，站点的根目录为系统级根目录 /Library/WebServer/Documents。&lt;/p&gt;
&lt;p&gt;启动后，你可以通过编辑 /etc/apache2/httpd.conf 文件来修改 Apache 配置&lt;/p&gt;
&lt;h4 id=&quot;停止-Apache：sudo-apachectl-stop&quot;&gt;&lt;a href=&quot;#停止-Apache：sudo-apachectl-stop&quot; class=&quot;headerlink&quot; title=&quot;停止 Apache：sudo apachectl stop&quot;&gt;&lt;/a&gt;停止 Apache：sudo apachectl stop&lt;/h4&gt;&lt;h4 id=&quot;重启-Apache：sudo-apachectl-restart&quot;&gt;&lt;a href=&quot;#重启-Apache：sudo-apachectl-restart&quot; class=&quot;headerlink&quot; title=&quot;重启 Apache：sudo apachectl restart&quot;&gt;&lt;/a&gt;重启 Apache：sudo apachectl restart&lt;/h4&gt;&lt;h2 id=&quot;创建用户级根目录&quot;&gt;&lt;a href=&quot;#创建用户级根目录&quot; class=&quot;headerlink&quot; title=&quot;创建用户级根目录&quot;&gt;&lt;/a&gt;创建用户级根目录&lt;/h2&gt;&lt;p&gt;我们也可以创建用户级根目录，更方便管理和操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在用户目录下创建 Sites 目录，cd; mkdir Sites; touch Sites/.localized，旧的 Mac 系统中如果该目录已存在，则略过。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cd /etc/apache2/users 检查目录下是否存在 username.conf 文件，username 为当前用户名，如果没有则创建一个 sudo touch username.conf，并修改文件权限 sudo chmod 644 username.conf。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建之后，打开 username.conf 文件，sudo vi  username.conf 将下面的配置信息写入文件，username 依然为当前用户名：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;Directory &quot;/Users/username/Sites/&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Options&lt;/span&gt;&lt;/span&gt; Indexes MultiViews FollowSymLinks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;All&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Order&lt;/span&gt;&lt;/span&gt; allow,deny&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Allow&lt;/span&gt;&lt;/span&gt; from &lt;span class=&quot;literal&quot;&gt;all&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;all&lt;/span&gt; granted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;编辑 /etc/apache2/httpd.conf 文件，找到下列代码，并将前面的注释符号 # 删除：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Include &lt;span class=&quot;regexp&quot;&gt;/private/&lt;/span&gt;etc&lt;span class=&quot;regexp&quot;&gt;/apache2/&lt;/span&gt;extra/httpd-userdir.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LoadModule userdir_module libexec&lt;span class=&quot;regexp&quot;&gt;/apache2/&lt;/span&gt;mod_userdir.so&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编辑 /etc/apache2/extra/httpd-userdir.conf 文件，找到下列代码，并将前面的注释符号 # 删除：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Include /private/etc/apache2/users/*.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重启 Apache：sudo apachectl restart&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在浏览器中输入 &lt;a href=&quot;http://127.0.0.1/~username&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1/~username&lt;/a&gt; 或 &lt;a href=&quot;http://localhost/~username，即可测试用户目录是否工作。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/~username，即可测试用户目录是否工作。&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们经常性的需要使用局域网搭建 Web 服务器测试环境，如部署局域网无线安装企业应用，模拟某个接口的返回JSON的时候，Mac OS X 自带了 Apache 和 PHP 环境，我们只需要简单的启动它就行了。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS打包和发布流程</title>
    <link href="http://peilinghui.com/2017/05/10/iOS%E6%89%93%E5%8C%85%E5%92%8C%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B/"/>
    <id>http://peilinghui.com/2017/05/10/iOS打包和发布流程/</id>
    <published>2017-05-10T08:56:16.000Z</published>
    <updated>2017-05-28T17:41:11.000Z</updated>
    
    <content type="html">&lt;p&gt;学习iOS的打包和发布流程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;两种证书&quot;&gt;&lt;a href=&quot;#两种证书&quot; class=&quot;headerlink&quot; title=&quot;两种证书&quot;&gt;&lt;/a&gt;两种证书&lt;/h2&gt;&lt;p&gt;App证书分为两种：开发证书、发布证书。App发布证书分：AppStore(正常的发布到商店) 及 Adhoc（内部测试发布） 两种。&lt;/p&gt;
&lt;h2 id=&quot;真机运行-dev&quot;&gt;&lt;a href=&quot;#真机运行-dev&quot; class=&quot;headerlink&quot; title=&quot;真机运行(dev)&quot;&gt;&lt;/a&gt;真机运行(dev)&lt;/h2&gt;&lt;p&gt;真机调试指 mac 连上 iphone, xcode 可以直接以这台 iphone 设备为 build target, 能在 iphone 里执行编译结果&lt;br&gt;为什么真机调试？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;部分功能需要硬件支持，模拟器是不支持的，如：&lt;br&gt;传感器：磁力计、陀螺仪、距离传感器等&lt;br&gt;特定功能：拍照、打电话、发短信、蓝牙等&lt;/p&gt;
&lt;p&gt;真机的环境和模拟器的环境是不一样，模拟器是使用电脑的环境， CPU、Memory、Disk、Network 这些和真机环境都不一样，有些bug可能会在特定的环境才会出现，比如网络非常慢，内存特别小的时候，可能在模拟器上不会有bug，在真机上就有可能出现bug&lt;br&gt;使用真机开发比使用模拟器体验更好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Xcode7以前：&quot;&gt;&lt;a href=&quot;#Xcode7以前：&quot; class=&quot;headerlink&quot; title=&quot;Xcode7以前：&quot;&gt;&lt;/a&gt;Xcode7以前：&lt;/h4&gt;&lt;p&gt;真机调试的主要步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录开发者主页&lt;/li&gt;
&lt;li&gt;生成cer证书：cer是一个跟电脑相关联的证书文件，让电脑具备真机调试的功能&lt;/li&gt;
&lt;li&gt;添加App ID：调试哪些app？&lt;/li&gt;
&lt;li&gt;注册真机设备：哪台设备需要做真机调试？&lt;/li&gt;
&lt;li&gt;生成MobileProvision文件：结合2、3、4生成一个手机规定文件&lt;/li&gt;
&lt;li&gt;导入cer、MobileProvision文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终会得到2个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cer文件：让电脑具备真机调试的功能&lt;/li&gt;
&lt;li&gt;MobileProvision文件：哪台设备、哪些app、哪台电脑需要做真机调试？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Xcode7以后&quot;&gt;&lt;a href=&quot;#Xcode7以后&quot; class=&quot;headerlink&quot; title=&quot;Xcode7以后&quot;&gt;&lt;/a&gt;Xcode7以后&lt;/h4&gt;&lt;p&gt;Xcode–&amp;gt;Preferences—&amp;gt;Accounts—&amp;gt; Add Apple ID 然后选择真机直接允许App，弹出来个框点击Fix Issue即可，这样就完成真机测试了。&lt;/p&gt;
&lt;p&gt;Xcode7.0真机测试Apple ID必须加入苹果开发者计划，而Xcode7.0之后直接使用普通的Apple ID即可真机测试。注意Xcode7.0之后并不是不需要.cer和.mobileprovision文件，而是苹果已经生产了这两个文件，并将.cer文件安装到钥匙串访问里，.mobileprovision已经复制到Library/MobileDevice/Provisioning Profiles文件夹中.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ios.jobbole.com/89870/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS真机调试详解&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试打包&quot;&gt;&lt;a href=&quot;#测试打包&quot; class=&quot;headerlink&quot; title=&quot;测试打包&quot;&gt;&lt;/a&gt;测试打包&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;登录apple的开发者主页:developer.apple.com&lt;/li&gt;
&lt;li&gt;选择Ad Hoc生成一个ios_distribution.cer: 让电脑具备打包程序的能力&lt;/li&gt;
&lt;li&gt;新建一个App ID : 方便打包哪个程序&lt;/li&gt;
&lt;li&gt;利用用户设备的UDID注册设备&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择Ad Hoc利用ios_distribution.cer + 设备UDID + App ID –&amp;gt; 描述文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(描述文件的作用:
1&amp;gt; 能知道在哪台电脑上, 为哪台设备打包哪个程序
2&amp;gt; 哪台设备需要安装打包哪个程序    )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最终产生了3个文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&amp;gt; CertificateSigningRequest.certSigningRequest(CSR证书)
* 包含了电脑的信息
* 发送给苹果服务器, 苹果服务器根据文件信息来生成一个电脑证书
* 生成的证书就可以让对应的电脑具备某个特殊的能力
2&amp;gt; ios_distribution.cer
* 打包证书
* 安装这个证书后, 电脑就具备打包程序的能力
3&amp;gt; nj_iphone6_news.mobileprovision
* 里面包含了3个信息:ios_distribution.cer + 设备UDID + App ID
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装证书和描述文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&amp;gt; ios_distribution.cer
2&amp;gt; nj_iphone6_news.mobileprovision
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;项目Scheme右边的设备选择iOS Device&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;点击Xcode的菜单&lt;br&gt;Product –&amp;gt; Archive –&amp;gt; Distribute –&amp;gt; ….Ad Hoc… –&amp;gt; 选择对应的描述文件&lt;/li&gt;
&lt;li&gt;生成一个ipa文件,发给测试人员和客户&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多：&lt;a href=&quot;http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用Jenkins搭建iOS/Android持续集成打包平台&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;发布&quot;&gt;&lt;a href=&quot;#发布&quot; class=&quot;headerlink&quot; title=&quot;发布&quot;&gt;&lt;/a&gt;发布&lt;/h2&gt;&lt;p&gt;四种发布方式：&lt;/p&gt;
&lt;h3 id=&quot;苹果应用商店发布AppStore&quot;&gt;&lt;a href=&quot;#苹果应用商店发布AppStore&quot; class=&quot;headerlink&quot; title=&quot;苹果应用商店发布AppStore&quot;&gt;&lt;/a&gt;苹果应用商店发布AppStore&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;developer.apple.com : 开发者主页, 配置证书\AppId\描述文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&amp;gt;发布的证书, 说清楚哪台电脑可以发布程序
2&amp;gt;添加发布的描述文件，描述在哪台计算机上能够发布哪些应用程序
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iTunesConnect网站(专门用来发布应用程序)&lt;br&gt;&lt;a href=&quot;https://itunesconnect.apple.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://itunesconnect.apple.com&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&amp;gt;    如果想挣钱，先设置在Agreements, Tax, and Banking设置个人储蓄卡信息
做一次就行
2&amp;gt; 添加应用程序
－ 名称，不能重复，可以使用 - 添加一些后缀信息
－ 关键字，增加软件被搜中的几率，使用英文的都好分隔，不能超过255个字节
－图片，图片文件名称中不能有中文
－ Rating，设置应用程序的等级，默认都选择最低的，成人，赌博……
－ App Review Information
提供给苹果的审核人员，来辅助测试使用的。
如果有测试帐号，必须提供！
如果有测试数据，需要提供给苹果，例如快递查询！
需要提供联系人的联系方式，电子邮件，电话需要添加国际区号，+86
3&amp;gt; 从Xcode6开始，上传完应用程序之后，程序默认会在prerelease中，需要等待5～50分钟不等。只有Prerelease中的状态变化后，才能够在Versions中添加Build，提示，这个过程中，不要重复在Xcode中上传。    
4&amp;gt; 所有准备就绪后，点Submit按钮提交应用程序，出现的三个选项，都选择No。
卡通形象，第三方内容，商标！
5&amp;gt; 等待，2天～20天不等……
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;苹果应用商店批量购买发布（Volume-Purchase-Program）&quot;&gt;&lt;a href=&quot;#苹果应用商店批量购买发布（Volume-Purchase-Program）&quot; class=&quot;headerlink&quot; title=&quot;苹果应用商店批量购买发布（Volume Purchase Program）&quot;&gt;&lt;/a&gt;苹果应用商店批量购买发布（Volume Purchase Program）&lt;/h3&gt;&lt;h3 id=&quot;Ad-Hoc应用发布方式&quot;&gt;&lt;a href=&quot;#Ad-Hoc应用发布方式&quot; class=&quot;headerlink&quot; title=&quot;Ad Hoc应用发布方式.&quot;&gt;&lt;/a&gt;Ad Hoc应用发布方式.&lt;/h3&gt;&lt;p&gt;Ad Hoc方式发布应用，应用的具体内容也不需要经过苹果的评审，但限制每个应用不能发布到超过100个设备上。如果应用需要小规模的测试或者企业规模很小可以采用这种方式发布企业应用.&lt;/p&gt;
&lt;h3 id=&quot;In-House企业应用发布&quot;&gt;&lt;a href=&quot;#In-House企业应用发布&quot; class=&quot;headerlink&quot; title=&quot;In-House企业应用发布&quot;&gt;&lt;/a&gt;In-House企业应用发布&lt;/h3&gt;&lt;p&gt;In-House企业应用是不能提交到App Store,发布应用的具体内容也是不需要苹果官方审核.安装设备的数量目前也没有任何限制.所以权限最为开放，适合针对支持开放大批量对外用户测试使用.所以你看到很多第三方开放渠道下载IPA其实基于其他企业账号来支持的.&lt;/p&gt;
&lt;h4 id=&quot;内网OTA&quot;&gt;&lt;a href=&quot;#内网OTA&quot; class=&quot;headerlink&quot; title=&quot;内网OTA&quot;&gt;&lt;/a&gt;内网OTA&lt;/h4&gt;&lt;p&gt;OTA即Over-the-Air，是Apple在 iOS4 中新加的一项技术，目的是让开发者能够脱离Appstore，实现从自己的服务器下载并安装iOS应用。简单地说，就是用户只需要在Safari中点开一条链接，就能直接在主界面中安装App。&lt;/p&gt;
&lt;p&gt; 实现步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用Xcode打包release版本&lt;/li&gt;
&lt;li&gt;搭建本地Web服务器&lt;/li&gt;
&lt;li&gt;开启HTTPS&lt;/li&gt;
&lt;li&gt;编写好对应的.plist文件&lt;/li&gt;
&lt;li&gt;上传ipa、.plist、ca证书到Web服务器，配置好index.html&lt;/li&gt;
&lt;li&gt;在手机上用Safari打开链接，完成下载&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多参考：&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/35ca63ec0d8e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一步一步实现无线安装iOS应用(内网OTA)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/close_marty/article/details/38559673&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jenkins中集成OTA发布&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;APNS远程通知&quot;&gt;&lt;a href=&quot;#APNS远程通知&quot; class=&quot;headerlink&quot; title=&quot;APNS远程通知&quot;&gt;&lt;/a&gt;APNS远程通知&lt;/h2&gt;&lt;p&gt;iOS中提供了2种推送通知:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本地推送通知（Local Notification）:不需要联网就能发出的推送通知（不需要服务器的支持）定时提醒用户完成一些任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;远程推送通知（Remote Notification）：就是从远程服务器推送给客户端的通知（需要联网）远程推送服务，又称为APNs（Apple Push Notification Services）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;创建支持远程推送功能的App ID&lt;/li&gt;
&lt;li&gt;申请开发者证书，并选中刚刚创建的App ID&lt;/li&gt;
&lt;li&gt;下载CER文件，并导入钥匙串管理&lt;/li&gt;
&lt;li&gt;申请发布证书，并选中刚刚创建的App ID&lt;/li&gt;
&lt;li&gt;下载CER文件，并导入钥匙串管理&lt;/li&gt;
&lt;li&gt;检查App ID，确认证书已经指定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)application didFinishLaunchingWithOptions:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)launchOptions&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#ifdef __IPHONE_8_0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 注册接收通知的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationSettings&lt;/span&gt; *settings = [&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationSettings&lt;/span&gt; settingsForTypes:&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeAlert&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeBadge&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeSound&lt;/span&gt; categories:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [application registerUserNotificationSettings:settings];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 注册允许接收远程推送通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [application registerForRemoteNotifications];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果是iOS7.0，使用以下方法注册&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [application registerForRemoteNotificationTypes:&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeAlert&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeBadge&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeSound&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PushMeBaby是一款用来测试ANPs的开源Mac项目：&lt;a href=&quot;https://github.com/stefanhafeneger/PushMeBaby&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/stefanhafeneger/PushMeBaby&lt;/a&gt;它充当了服务器的作用，用法非常简单。它负责将内容提交给苹果的APNs服务器，苹果的APNs服务器再将内容推送给用户的设备。将推送的调试证书改为名apns.cer，添加到PushMeBaby项目中。&lt;/li&gt;
&lt;li&gt;JPush：&lt;a href=&quot;https://www.jpush.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jpush.cn&lt;/a&gt;&lt;br&gt;一套远程推送解决方案，支持android和iOS两个平台。&lt;br&gt;它能够快捷地为iOS App增加推送功能，减少集成APNs需要的工作量、开发复杂度。[集成iOS SDK]&lt;br&gt;(&lt;a href=&quot;http://docs.jpush.cn/pages/viewpage.action?pageId=2621727&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.jpush.cn/pages/viewpage.action?pageId=2621727&lt;/a&gt;)&lt;br&gt;JPush会自动记录和管理所有安装过此app的设备deviceToken&lt;br&gt;利用JPush，可以轻易地给所有设备发送远程推送通知.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;更多参考：&quot;&gt;&lt;a href=&quot;#更多参考：&quot; class=&quot;headerlink&quot; title=&quot;更多参考：&quot;&gt;&lt;/a&gt;更多参考：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.qcloud.com/community/article/673429&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 程序从开发完到上 AppStore 那点事儿&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/mddblog/p/4718228.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;苹果企业账号打包发布APP流程详解&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;学习iOS的打包和发布流程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS中JS与OC相互调用的方式</title>
    <link href="http://peilinghui.com/2017/05/05/iOS%E4%B8%ADJS%E4%B8%8EOC%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://peilinghui.com/2017/05/05/iOS中JS与OC相互调用的方式/</id>
    <published>2017-05-05T06:50:42.000Z</published>
    <updated>2018-07-18T01:42:15.113Z</updated>
    
    <content type="html">&lt;p&gt;Web App即是HTML5 APP框架开发模式，使用HTML5,CSS3以及JavaScript以及服务器端语言来完成开发，Web App具有跨平台的优势。那么就来学习一下iOS中JS与OC相互调用的方式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;目前JS与OC相互调用的方式&quot;&gt;&lt;a href=&quot;#目前JS与OC相互调用的方式&quot; class=&quot;headerlink&quot; title=&quot;目前JS与OC相互调用的方式&quot;&gt;&lt;/a&gt;目前JS与OC相互调用的方式&lt;/h1&gt;&lt;p&gt;目前主要的JS与OC相互调用方式主要有如下6种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在JS 中做一次URL跳转，然后在OC中拦截跳转。（这里分为UIWebView 和 WKWebView两种，UIWebView兼容iOS 6）&lt;/li&gt;
&lt;li&gt;利用WKWebView 的MessageHandler。(有坑)&lt;/li&gt;
&lt;li&gt;利用系统库JavaScriptCore，来做相互调用。（iOS 7推出）&lt;/li&gt;
&lt;li&gt;利用第三方库WebViewJavascriptBridge。&lt;/li&gt;
&lt;li&gt;利用第三方cordova库，以前叫PhoneGap。（这是一个库平台的库）&lt;/li&gt;
&lt;li&gt;当下盛行的React Native。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-08%20%E4%B8%8A%E5%8D%8811.49.52.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;拦截URL&quot;&gt;&lt;a href=&quot;#拦截URL&quot; class=&quot;headerlink&quot; title=&quot;拦截URL&quot;&gt;&lt;/a&gt;拦截URL&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-08%20%E4%B8%8A%E5%8D%8811.55.32.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;UIWebView&quot;&gt;&lt;a href=&quot;#UIWebView&quot; class=&quot;headerlink&quot; title=&quot;UIWebView&quot;&gt;&lt;/a&gt;UIWebView&lt;/h2&gt;&lt;p&gt;在以前我们只能通过UIWebView的UIWebViewDelegate协议来实现oc与js的通信交互就是发送消息，也即函数调用。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (nullable &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)stringByEvaluatingJavaScriptFromString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)script;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIWebViewDelegate&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)webView:(&lt;span class=&quot;built_in&quot;&gt;UIWebView&lt;/span&gt; *)webView shouldStartLoadWithRequest:(&lt;span class=&quot;built_in&quot;&gt;NSURLRequest&lt;/span&gt; *)request navigationType:(&lt;span class=&quot;built_in&quot;&gt;UIWebViewNavigationType&lt;/span&gt;)navigationType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)webViewDidStartLoad:(&lt;span class=&quot;built_in&quot;&gt;UIWebView&lt;/span&gt; *)webView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)webViewDidFinishLoad:(&lt;span class=&quot;built_in&quot;&gt;UIWebView&lt;/span&gt; *)webView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)webView:(&lt;span class=&quot;built_in&quot;&gt;UIWebView&lt;/span&gt; *)webView didFailLoadWithError:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *)error;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;oc–&amp;gt;js stringByEvaluatingJavaScriptFromString,其参数是一NSString 字符串内容是js代码（这又可以是一个js函数、一句js代码或他们的组合），当js函数有返回值或一句js代码有值返回可通过stringByEvaluatingJavaScriptFromString的返回值获取&lt;/li&gt;
&lt;li&gt;js–&amp;gt;oc 利用webView的重定向原理（即重新在js中指定document.location的值，此为一url），只要在这个url字符串中按自定义的规则指定好所需调用oc中的函数和参数，然后通过OC中的shouldStartLoadWithRequest函数去捕获处理请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WKWebView&quot;&gt;&lt;a href=&quot;#WKWebView&quot; class=&quot;headerlink&quot; title=&quot;WKWebView&quot;&gt;&lt;/a&gt;WKWebView&lt;/h2&gt;&lt;p&gt;由于UIWebView比较耗内存，性能上不太好，而苹果在iOS8中推出了WKWebView。同样的用WKWebView也可以拦截URL，做JS与OC交互。WKWebView与UIWebView拦截URL的处理方式基本一样。除了代理方法和WKWebView的使用不太一样。&lt;/p&gt;
&lt;h3 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;更多的支持HTML5的特性
官方宣称的高达60fps的滚动刷新率以及内置手势
将UIWebViewDelegate与UIWebView拆分成了14类与3个协议,以前很多不方便实现的功能得以实现。文档
Safari相同的JavaScript引擎
占用更少的内存
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;WKWebView的创建有几点不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化多了configuration参数，当然这个参数也可以不传，直接使用默认的设置。&lt;/li&gt;
&lt;li&gt;WKWebView的代理有两个navigationDelegate和UIDelegate。我们要拦截URL，就要通过navigationDelegate的一个代理方法来实现。如果在HTML中要使用alert等弹窗，就必须得实现UIDelegate的相应代理方法。&lt;/li&gt;
&lt;li&gt;在iOS9之前，WKWebView加载本地HTML会有一些问题。（不能加载本地HTML，或者部分CSS/本地图片加载不了等）&lt;/li&gt;
&lt;li&gt;注意加载HTTP和HTTPS的时候要在文件设置App Transport Security Settings的Allow Arbitrary Loads设置为YES。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;WKNavigationDelegate&quot;&gt;&lt;a href=&quot;#WKNavigationDelegate&quot; class=&quot;headerlink&quot; title=&quot;WKNavigationDelegate&quot;&gt;&lt;/a&gt;WKNavigationDelegate&lt;/h4&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;webView:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;WKWebView&lt;/span&gt; *)&lt;/span&gt;webView decidePolicyForNavigationAction:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;WKNavigationAction&lt;/span&gt; *)&lt;/span&gt;navigationAction decisionHandler:&lt;span class=&quot;params&quot;&gt;(void (^)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;WKNavigationActionPolicy&lt;/span&gt;)&lt;/span&gt;)decisionHandler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现这个代理方法，必须得调用decisionHandler这个block，否则会导致app 崩溃。block参数是个枚举类型，WKNavigationActionPolicyCancel代表取消加载，相当于UIWebView的代理方法return NO的情况；WKNavigationActionPolicyAllow代表允许加载，相当于UIWebView的代理方法中return YES的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WKWebView中OC直接调用JS方法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *js = &lt;span class=&quot;string&quot;&gt;@&quot;callJsAlert()&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.webView&lt;/span&gt; evaluateJavaScript:js completionHandler:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; _Nullable response, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; * _Nullable error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;response: %@ error: %@&quot;&lt;/span&gt;, response, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;call js alert by native&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;evaluateJavaScript:completionHandler:&lt;/strong&gt;没有返回值，JS 执行成功还是失败会在completionHandler 中返回。所以使用这个API 就可以避免执行耗时的JS，或者alert 导致界面卡住的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WKWebView中JS调用OC原生方法&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;MessageHandler&quot;&gt;&lt;a href=&quot;#MessageHandler&quot; class=&quot;headerlink&quot; title=&quot;MessageHandler&quot;&gt;&lt;/a&gt;MessageHandler&lt;/h2&gt;&lt;p&gt;利用WKWebView的新特性MessageHandler来实现JS调用原生方法。&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-08%20%E4%B8%8B%E5%8D%881.58.58.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;MessageHandler的好处&quot;&gt;&lt;a href=&quot;#MessageHandler的好处&quot; class=&quot;headerlink&quot; title=&quot;MessageHandler的好处&quot;&gt;&lt;/a&gt;MessageHandler的好处&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在JS中写起来简单，不用再用创建URL的方式那么麻烦了。&lt;/li&gt;
&lt;li&gt;JS传递参数更方便。使用拦截URL的方式传递参数，只能把参数拼接在后面，如果遇到要传递的参数中有特殊字符，如&amp;amp;、=、?等，必须得转换，否则参数解析肯定会出错。&lt;/li&gt;
&lt;li&gt;使用MessageHandler就可以避免特殊字符引起的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h3&gt;&lt;p&gt;WKWebView初始化时，有一个参数叫configuration，它是WKWebViewConfiguration类型的参数，而WKWebViewConfiguration有一个属性叫userContentController，它又是WKUserContentController类型的参数。WKUserContentController对象有一个方法- addScriptMessageHandler:name:，我把这个功能简称为MessageHandler。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;- addScriptMessageHandler:name:&lt;/code&gt;有两个参数，第一个参数是userContentController的代理对象，第二个参数是JS里发送postMessage的对象。&lt;/p&gt;
&lt;p&gt;所以要使用MessageHandler功能，就必须要实现WKScriptMessageHandler协议。&lt;br&gt;在OC文件中：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WKWebViewConfiguration *config = [[WKWebViewConfiguration alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.userContentController = [[WKUserContentController alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 注入JS对象名称AppModel，当JS通过AppModel来调用时，我们可以在WKScriptMessageHandler代理中接收到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[config.userContentController &lt;span class=&quot;string&quot;&gt;addScriptMessageHandler:&lt;/span&gt;self &lt;span class=&quot;string&quot;&gt;name:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;AppModel&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//WKScriptMessageHandler协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;typename&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;userContentController:&lt;/span&gt;(WKUserContentController *)userContentController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;      didReceiveScriptMessage:&lt;/span&gt;(WKScriptMessage *)message &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([message.name &lt;span class=&quot;string&quot;&gt;isEqualToString:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;AppModel&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;%@&quot;&lt;/span&gt;, message.body);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现协议方法。&lt;br&gt;这里实现了两个协议&amp;lt; WKUIDelegate,WKScriptMessageHandler &amp;gt;，WKUIDelegate是因为需要在JS中弹出alert。WKScriptMessageHandler是用来处理JS调用OC方法的请求。&lt;strong&gt;名字替换AppModel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在JS文件中：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// AppModel是我们所注入的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.webkit&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.messageHandlers&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.AppModel&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.postMessage&lt;/span&gt;(&amp;#123;&lt;span class=&quot;attribute&quot;&gt;body&lt;/span&gt;: response&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;JavaScriptCore&quot;&gt;&lt;a href=&quot;#JavaScriptCore&quot; class=&quot;headerlink&quot; title=&quot;JavaScriptCore&quot;&gt;&lt;/a&gt;JavaScriptCore&lt;/h2&gt;&lt;p&gt;JavaScriptCore自iOS7之后出现，用Objective-C把WebKit的JavaScript引擎封装了一下，提供了简单快捷的方式与JavaScript交互。&lt;/p&gt;
&lt;p&gt;特点： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS中调用OC方法更简单，参数的传递也更加简单 &lt;/li&gt;
&lt;li&gt;支持iOS7以上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用-1&quot;&gt;&lt;a href=&quot;#使用-1&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;使用前需要先导入JavaScriptCore.framework&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSVirtualMachine直译是JS虚拟机，也就是说JavaScript是在一个虚拟的环境中执行，而JSVirtualMachine为其执行提供底层资源。&lt;/li&gt;
&lt;li&gt;JSContext是为JavaScript的执行提供运行环境，所有的JavaScript的执行都必须在JSContext环境中。JSContext也管理JSVirtualMachine中对象的生命周期。每一个JSValue对象都要强引用关联一个JSContext。当与某JSContext对象关联的所有JSValue释放后，JSContext也会被释放。&lt;/li&gt;
&lt;li&gt;JSValue都是通过JSContext返回或者创建的，并没有构造方法。JSValue包含了每一个JavaScript类型的值，通过JSValue可以将Objective-C中的类型转换为JavaScript中的类型，也可以将JavaScript中的类型转换为Objective-C中的类型。&lt;/li&gt;
&lt;li&gt;JSManagedValue主要用途是解决JSValue对象在Objective-C堆上的安全引用问题。把JSValue保存进Objective-C堆对象中是不正确的，这很容易引发循环引用，而导致JSContext不能释放。但是不常用。&lt;/li&gt;
&lt;li&gt;JSExport是一个协议类，但是该协议并没有任何属性和方法。可以自定义一个协议类，继承自JSExport。无论在JSExport里声明的属性、实例方法还是类方法，继承的协议都会自动的提供给任何JavaScript代码。因此，只需要在自定义的协议类中，添加上属性和方法就可以了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;WKWebVIew中的坑&quot;&gt;&lt;a href=&quot;#WKWebVIew中的坑&quot; class=&quot;headerlink&quot; title=&quot;WKWebVIew中的坑&quot;&gt;&lt;/a&gt;WKWebVIew中的坑&lt;/h1&gt;&lt;h2 id=&quot;WKWebView导致ViewController不调用dealloc方法&quot;&gt;&lt;a href=&quot;#WKWebView导致ViewController不调用dealloc方法&quot; class=&quot;headerlink&quot; title=&quot;WKWebView导致ViewController不调用dealloc方法&quot;&gt;&lt;/a&gt;WKWebView导致ViewController不调用dealloc方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;webview不设置 delegate，可以正常dealloc&lt;/li&gt;
&lt;li&gt;webview.UIDelegate和 navigationDelegate 设置为 self，可以正常dealloc&lt;/li&gt;
&lt;li&gt;webview.configuration.userContentController addScriptMessageHandler 为 self之后，无法正常dealloc，该方法引起ViewController内存泄漏。&lt;/li&gt;
&lt;li&gt;使用 ScriptMessageHandler 作为webview.scriptMessageHandler，当前viewController 可以正常释放。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当前 viewController dealloc 方法中，通过 removeScriptMessazgeHanlder 释放掉&lt;br&gt;scriptMessageHandler&lt;/p&gt;
&lt;p&gt;解决方法：&lt;br&gt;(1)WeakScriptMessageDelegate&lt;br&gt;可以创建一个新的类WeakScriptMessageDelegate，也可以将@interface-@end写在ViewController.h中，@implementation-@end写在ViewController.m中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WeakScriptMessageDelegate&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;WKScriptMessageHandler&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;WKScriptMessageHandler&amp;gt; scriptDelegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithDelegate:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;WKScriptMessageHandler&amp;gt;)scriptDelegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WeakScriptMessageDelegate&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithDelegate:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;WKScriptMessageHandler&amp;gt;)scriptDelegate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _scriptDelegate = scriptDelegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.scriptDelegate&lt;/span&gt; userContentController:userContentController didReceiveScriptMessage:message];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(2)使用&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_webView = [[WKWebView alloc] initWithFrame:&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.view.bounds configuration:configuration];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; _webView.UIDelegate = &lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; _webView.navigationDelegate = &lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;configuration.&lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;ContentController = [WKUserContentController new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//无法正常dealloc[configuration.&lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;ContentController addScriptMessageHandler:&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt; name:@&lt;span class=&quot;string&quot;&gt;&quot;myHandler&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用代理来实现可以调用dealloc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[configuration.&lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;ContentController addScriptMessageHandler:[[WeakScriptMessageDelegate alloc] initWithDelegate:&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;] name:@&lt;span class=&quot;string&quot;&gt;&quot;myHandler&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - (void)dealloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;ContentController removeScriptMessageHandlerForName:@&lt;span class=&quot;string&quot;&gt;&quot;myHandler&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Demo地址：&lt;a href=&quot;https://github.com/peilinghui/BokeDemo/tree/master/PLHWebViewDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/BokeDemo/tree/master/PLHWebViewDemo&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/9513d101e582#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WKWebView使用及注意点(keng)&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://imciel.com/2016/06/18/oc-js-communication/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 JavaScriptCore 实现 JS和OC间的通信&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.brighttj.com/ios/ios-user-safari-debug-webview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用safari对webview进行调试&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Web App即是HTML5 APP框架开发模式，使用HTML5,CSS3以及JavaScript以及服务器端语言来完成开发，Web App具有跨平台的优势。那么就来学习一下iOS中JS与OC相互调用的方式。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NSURLProtocol</title>
    <link href="http://peilinghui.com/2017/04/30/NSURLProtocol/"/>
    <id>http://peilinghui.com/2017/04/30/NSURLProtocol/</id>
    <published>2017-04-30T04:59:56.000Z</published>
    <updated>2018-07-18T01:41:52.609Z</updated>
    
    <content type="html">&lt;p&gt;研究一下NSURLProtocol.h。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;NSURLProtocol是什么？&quot;&gt;&lt;a href=&quot;#NSURLProtocol是什么？&quot; class=&quot;headerlink&quot; title=&quot;NSURLProtocol是什么？&quot;&gt;&lt;/a&gt;NSURLProtocol是什么？&lt;/h1&gt;&lt;p&gt;NSURLProtocol是URL Loading System的重要组成部分。&lt;br&gt;首先虽然名叫NSURLProtocol，但它却不是协议。它是一个抽象类。我们要使用它的时候需要创建它的一个子类。&lt;br&gt;NSURLProtocol在iOS系统中大概处于这样一个位置。&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-30%20%E4%B8%8B%E5%8D%882.12.33.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果开发者自定义的一个NSURLProtocol并且注册到app中，那么在这个自定义的NSURLProtocol中我们可以拦截UIWebView，基于系统的NSURLConnection或者NSURLSession进行封装的网络请求，然后做到自定义的response返回。非常强大。&lt;/p&gt;
&lt;h1 id=&quot;NSURLProtocol能拦截哪些网络请求&quot;&gt;&lt;a href=&quot;#NSURLProtocol能拦截哪些网络请求&quot; class=&quot;headerlink&quot; title=&quot;NSURLProtocol能拦截哪些网络请求&quot;&gt;&lt;/a&gt;NSURLProtocol能拦截哪些网络请求&lt;/h1&gt;&lt;p&gt;URL Loading System&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-30%20%E4%B8%8B%E5%8D%882.13.34.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;所以，可以拦截的网络请求包括NSURLSession，NSURLConnection以及UIWebVIew。&lt;br&gt;基于CFNetwork的网络请求，以及WKWebView的请求是无法拦截的。&lt;/p&gt;
&lt;p&gt;现在主流的iOS网络库，例如AFNetworking，Alamofire等网络库都是基于NSURLSession或NSURLConnection的，所以这些网络库的网络请求都可以被NSURLProtocol所拦截 。&lt;br&gt;还有一些年代比较久远的网络库，例如ASIHTTPRequest，MKNetwokit等网路库都是基于CFNetwork的，所以这些网络库的网络请求无法被NSURLProtocol拦截。&lt;/p&gt;
&lt;h1 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h1&gt;&lt;p&gt;NSURLProtocol是一个抽象类。我们要使用它的时候需要创建它的一个子类。&lt;br&gt;&lt;code&gt;@interface PLHHTTPProtocol : NSURLProtocol&lt;/code&gt;&lt;br&gt;使用NSURLProtocol的主要可以分为5个步骤：&lt;br&gt;注册—&amp;gt;拦截—&amp;gt;转发—&amp;gt;回调—&amp;gt;结束&lt;/p&gt;
&lt;h2 id=&quot;注册：&quot;&gt;&lt;a href=&quot;#注册：&quot; class=&quot;headerlink&quot; title=&quot;注册：&quot;&gt;&lt;/a&gt;注册：&lt;/h2&gt;&lt;p&gt;在系统加载的时候，把自定义的PLHHTTPProtocol注册到URL加载系统中，这样 所有的URL请求都有机会进入我们自定义的PLHHTTPProtocol进行拦截处理。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;-&lt;/span&gt; (BOOL)&lt;span class=&quot;tag&quot;&gt;application&lt;/span&gt;:(UIApplication *)&lt;span class=&quot;tag&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt;:(NSDictionary *)&lt;span class=&quot;tag&quot;&gt;launchOptions&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr_selector&quot;&gt;[NSURLProtocol registerClass:[PLHHTTPURLProtocol class]&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于基于NSURLSession的网络请求，需要通过配置NSURLSessionConfiguration对象的protocolClasses属性。&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSURLSessionConfiguration *sessionConfiguration = [NSURLSessionConfiguration defaultSessionConfiguration];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sessionConfiguration.protocolClasses = @&lt;span class=&quot;string&quot;&gt;[[NSClassFromString(@&quot;CustomURLProtocol&quot;) class]]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;拦截：&quot;&gt;&lt;a href=&quot;#拦截：&quot; class=&quot;headerlink&quot; title=&quot;拦截：&quot;&gt;&lt;/a&gt;拦截：&lt;/h2&gt;&lt;p&gt;在拦截到网络请求后，NSURLProtocol会依次执行下列方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+ (BOOL)canInitWithRequest:(NSURLRequest *)request&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该方法会拿到request的对象，我们可以通过该方法的返回值来筛选request是否需要被NSURLProtocol做拦截处理。&lt;br&gt;如果返回YES则进入该自定义加载器进行处理，如果返回NO则不进入该自定义选择器，使用系统默认行为进行处理。&lt;/p&gt;
&lt;p&gt;重新设置NSURLRequest的信息:&lt;br&gt;&lt;code&gt;+ (NSURLRequest *)canonicalRequestForRequest:(NSURLRequest *)request&lt;/code&gt;&lt;br&gt;比如请求重定向或者添加头部信息等等。如果没有特殊需求，直接返回request就可以了。但是因为这个方法在会在一次请求中被调用多次（暂时我也不知道什么原因为什么需要回调多洗），所以request重定向和添加头部信息也可以在开始加载中startLoading方法中重新设置。&lt;/p&gt;
&lt;h2 id=&quot;转发&quot;&gt;&lt;a href=&quot;#转发&quot; class=&quot;headerlink&quot; title=&quot;转发&quot;&gt;&lt;/a&gt;转发&lt;/h2&gt;&lt;p&gt;在拦截到网络请求，并且对网络请求进行定制处理以后。我们需要将网络请求重新发送出去。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;- (id)initWithRequest:(NSURLRequest *)request cachedResponse:(NSCachedURLResponse *)cachedResponse client:(id&amp;lt;NSURLProtocolClient&amp;gt;)client&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该方法会创建一个NSURLProtocol实例，这里每一个网络请求都会创建一个新的实例。被拦截的请求开始执行的地方.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;- (void)startLoading&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来就是转发的核心方法startLoading。在该方法中，我们把处理过的request重新发送出去。至于发送的形式，可以是基于NSURLConnection，NSURLSession甚至CFNetwork。&lt;/p&gt;
&lt;h2 id=&quot;回调&quot;&gt;&lt;a href=&quot;#回调&quot; class=&quot;headerlink&quot; title=&quot;回调&quot;&gt;&lt;/a&gt;回调&lt;/h2&gt;&lt;p&gt;既是面向切面的编程，就不能影响到原来网络请求的逻辑。所以上一步将网络请求转发出去以后，当收到网络请求的返回，还需要再将返回值返回给原来发送网络请求的地方。&lt;br&gt;主要需要需要调用到&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self.client &lt;/span&gt;URLProtocol:&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;didFailWithError:error]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self.client &lt;/span&gt;URLProtocolDidFinishLoading:&lt;span class=&quot;keyword&quot;&gt;self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;self.client &lt;/span&gt;URLProtocol:&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;didReceiveResponse:response cacheStoragePolicy:NSURLCacheStorageNotAllowed]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self.client &lt;/span&gt;URLProtocol:&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;didLoadData:&lt;span class=&quot;preprocessor&quot;&gt;data&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这四个方法来回调给原来发送网络请求的地方。&lt;br&gt;这里假设我们在转发过程中是使用NSURLSession发送的网络请求，那么在NSURLSession的回调方法中，我们做相应的处理即可。并且我们也可以对这些返回，进行定制化处理。&lt;/p&gt;
&lt;h2 id=&quot;结束：&quot;&gt;&lt;a href=&quot;#结束：&quot; class=&quot;headerlink&quot; title=&quot;结束：&quot;&gt;&lt;/a&gt;结束：&lt;/h2&gt;&lt;p&gt;在一个网络请求完全结束以后，NSURLProtocol回调用到.结束加载URL请求&lt;br&gt;&lt;code&gt;- (void)stopLoading&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h1&gt;&lt;p&gt;既然NSURLProtocol功能非常强大，那么在具体开发中，会有哪些应用呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义请求和响应&lt;/li&gt;
&lt;li&gt;网络的缓存处理（H5离线包 和 网络图片缓存）&lt;/li&gt;
&lt;li&gt;重定向网络请求&lt;/li&gt;
&lt;li&gt;为测试提供数据Mocking功能，在没有网络的情况下使用本地数据返回。&lt;/li&gt;
&lt;li&gt;过滤掉一些非法请求&lt;/li&gt;
&lt;li&gt;快速进行测试环境的切换&lt;/li&gt;
&lt;li&gt;拦截图片加载请求，转为从本地文件加载&lt;/li&gt;
&lt;li&gt;可以拦截UIWebView，基于系统的NSURLConnection或者NSURLSession进行封装的网络请求。目前WKWebView无法被NSURLProtocol拦截。&lt;/li&gt;
&lt;li&gt;当有多个自定义NSURLProtocol注册到系统中的话，会按照他们注册的反向顺序依次调用URL加载流程。当其中有一个NSURLProtocol拦截到请求的话，后续的NSURLProtocol就无法拦截到该请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DEMO地址：&lt;a href=&quot;https://github.com/peilinghui/BokeDemo/tree/master/PLHHTTPDNSDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/BokeDemo/tree/master/PLHHTTPDNSDemo&lt;/a&gt;      &lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/02781c0bbca9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSURLProtocol全攻略&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/55f5ac1ab817&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WKWebView 不支持 NSURLProtocol 吗&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;研究一下NSURLProtocol.h。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
