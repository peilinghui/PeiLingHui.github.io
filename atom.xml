<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向着阳光奔跑</title>
  <subtitle>没有到不了的远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://peilinghui.com/"/>
  <updated>2019-02-02T05:53:34.025Z</updated>
  <id>http://peilinghui.com/</id>
  
  <author>
    <name>向阳</name>
    <email>peilinghuibest@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac获取ipa方法</title>
    <link href="http://peilinghui.com/2019/02/02/Mac%E8%8E%B7%E5%8F%96ipa%E6%96%B9%E6%B3%95/"/>
    <id>http://peilinghui.com/2019/02/02/Mac获取ipa方法/</id>
    <published>2019-02-02T05:46:05.000Z</published>
    <updated>2019-02-02T05:53:34.025Z</updated>
    
    <content type="html">&lt;p&gt;从那次ITunes升级以后就不能显示应用，也不能从ITunes安装应用到手机，就不能从ITunes中导出IPA，并且获取应用程序的Assets资源文件。&lt;br&gt;新的方法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;工具准备&quot;&gt;&lt;a href=&quot;#工具准备&quot; class=&quot;headerlink&quot; title=&quot;工具准备&quot;&gt;&lt;/a&gt;工具准备&lt;/h3&gt;&lt;p&gt; Apple Configurator 2   Mac appstore下载即可&lt;br&gt;登录appleId&lt;/p&gt;
&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在Appstore下载相关App（以XX为例）到iPhone或iPad上;&lt;/li&gt;
&lt;li&gt;打开 Apple Configurator 2&lt;/li&gt;
&lt;li&gt;选中连接Mac的移动设备后，点击 Apple Configurator 2 工具菜单 ”添加“ –&amp;gt; 应用；&lt;/li&gt;
&lt;li&gt;搜索app-xx，选中，点击右下角添加，等待添加完成(如下图)；&lt;/li&gt;
&lt;li&gt;不要操作  Apple Configurator 2,切换到桌面;&lt;/li&gt;
&lt;li&gt;快捷键：command + shift + G 或者在Finder 中前往文件夹…&lt;/li&gt;
&lt;li&gt;输入路径：~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/&lt;/li&gt;
&lt;li&gt;拷贝出 上述路径中的ipa文件，之后在 Apple Configurator 2 工具的弹框中点击停止，即可；&lt;br&gt;zhifubao&lt;br&gt;done&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;获取资源&quot;&gt;&lt;a href=&quot;#获取资源&quot; class=&quot;headerlink&quot; title=&quot;获取资源&quot;&gt;&lt;/a&gt;获取资源&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;修改上述获取的ipa文件，修改后缀名 ipa –&amp;gt;zip;&lt;/li&gt;
&lt;li&gt;解压zip文件，在完成的文件夹中打开Payload 文件夹，即可看到应用xx宝应用程序；&lt;/li&gt;
&lt;li&gt;选中该应用程序，右键显示包内容即可查看图片资源等；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;获取图片资源&quot;&gt;&lt;a href=&quot;#获取图片资源&quot; class=&quot;headerlink&quot; title=&quot;获取图片资源&quot;&gt;&lt;/a&gt;获取图片资源&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;找到包内容中的 Assets.car 文件；&lt;/li&gt;
&lt;li&gt;打开 “Assets提取工具”，导入 Assets.car 文件，添加到处文件夹，点击提取即可获取；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考资料:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mac获取ipa和相关资源&lt;/li&gt;
&lt;li&gt;Assets提取工具&lt;a href=&quot;https://github.com/pcjbird/AssetsExtractor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/pcjbird/AssetsExtractor&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;微信分享二维码&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从那次ITunes升级以后就不能显示应用，也不能从ITunes安装应用到手机，就不能从ITunes中导出IPA，并且获取应用程序的Assets资源文件。&lt;br&gt;新的方法。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习iOS逆向</title>
    <link href="http://peilinghui.com/2019/02/01/%E5%AD%A6%E4%B9%A0iOS%E9%80%86%E5%90%91/"/>
    <id>http://peilinghui.com/2019/02/01/学习iOS逆向/</id>
    <published>2019-02-01T02:26:24.000Z</published>
    <updated>2019-03-06T02:37:11.466Z</updated>
    
    <content type="html">&lt;p&gt;从现有APP实现细节的过程&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;砸壳&quot;&gt;&lt;a href=&quot;#砸壳&quot; class=&quot;headerlink&quot; title=&quot;砸壳&quot;&gt;&lt;/a&gt;砸壳&lt;/h2&gt;&lt;p&gt;壳是应用程序加密保护的一种方式，在APP Store上的应用程序都是有加密保护的。&lt;br&gt;查看是否加壳：&lt;br&gt;&lt;code&gt;otool -l 可执行文件 | grep cryptid&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;工具分析（主要是mac上）&quot;&gt;&lt;a href=&quot;#工具分析（主要是mac上）&quot; class=&quot;headerlink&quot; title=&quot;工具分析（主要是mac上）&quot;&gt;&lt;/a&gt;工具分析（主要是mac上）&lt;/h1&gt;&lt;h2 id=&quot;软件界面的组成结构&quot;&gt;&lt;a href=&quot;#软件界面的组成结构&quot; class=&quot;headerlink&quot; title=&quot;软件界面的组成结构&quot;&gt;&lt;/a&gt;软件界面的组成结构&lt;/h2&gt;&lt;p&gt;###监控工具&lt;br&gt;通过监控，可以获取界面的变化，文件的读取，网络的传输。&lt;/p&gt;
&lt;h4 id=&quot;class-dump&quot;&gt;&lt;a href=&quot;#class-dump&quot; class=&quot;headerlink&quot; title=&quot;class-dump&quot;&gt;&lt;/a&gt;class-dump&lt;/h4&gt;&lt;p&gt;对于去壳的应用可以得到所有类的头文件&lt;/p&gt;
&lt;h4 id=&quot;Reveal&quot;&gt;&lt;a href=&quot;#Reveal&quot; class=&quot;headerlink&quot; title=&quot;Reveal&quot;&gt;&lt;/a&gt;Reveal&lt;/h4&gt;&lt;p&gt;得到界面UI，得到响应事件。&lt;/p&gt;
&lt;h4 id=&quot;Snoop-it&quot;&gt;&lt;a href=&quot;#Snoop-it&quot; class=&quot;headerlink&quot; title=&quot;Snoop-it&quot;&gt;&lt;/a&gt;Snoop-it&lt;/h4&gt;&lt;h4 id=&quot;introsy&quot;&gt;&lt;a href=&quot;#introsy&quot; class=&quot;headerlink&quot; title=&quot;introsy&quot;&gt;&lt;/a&gt;introsy&lt;/h4&gt;&lt;h3 id=&quot;反汇编工具&quot;&gt;&lt;a href=&quot;#反汇编工具&quot; class=&quot;headerlink&quot; title=&quot;反汇编工具&quot;&gt;&lt;/a&gt;反汇编工具&lt;/h3&gt;&lt;p&gt;通过分析二进制文件，生成汇编代码，进而转换成高级语言。&lt;/p&gt;
&lt;h4 id=&quot;Hopper&quot;&gt;&lt;a href=&quot;#Hopper&quot; class=&quot;headerlink&quot; title=&quot;Hopper&quot;&gt;&lt;/a&gt;Hopper&lt;/h4&gt;&lt;h4 id=&quot;IDA&quot;&gt;&lt;a href=&quot;#IDA&quot; class=&quot;headerlink&quot; title=&quot;IDA&quot;&gt;&lt;/a&gt;IDA&lt;/h4&gt;&lt;h3 id=&quot;调试跟踪工具&quot;&gt;&lt;a href=&quot;#调试跟踪工具&quot; class=&quot;headerlink&quot; title=&quot;调试跟踪工具&quot;&gt;&lt;/a&gt;调试跟踪工具&lt;/h3&gt;&lt;h4 id=&quot;GDB&quot;&gt;&lt;a href=&quot;#GDB&quot; class=&quot;headerlink&quot; title=&quot;GDB&quot;&gt;&lt;/a&gt;GDB&lt;/h4&gt;&lt;h4 id=&quot;LLDB&quot;&gt;&lt;a href=&quot;#LLDB&quot; class=&quot;headerlink&quot; title=&quot;LLDB&quot;&gt;&lt;/a&gt;LLDB&lt;/h4&gt;&lt;h2 id=&quot;程序功能具体实现&quot;&gt;&lt;a href=&quot;#程序功能具体实现&quot; class=&quot;headerlink&quot; title=&quot;程序功能具体实现&quot;&gt;&lt;/a&gt;程序功能具体实现&lt;/h2&gt;&lt;h1 id=&quot;静态分析&quot;&gt;&lt;a href=&quot;#静态分析&quot; class=&quot;headerlink&quot; title=&quot;静态分析&quot;&gt;&lt;/a&gt;静态分析&lt;/h1&gt;&lt;h2 id=&quot;应用代码框架构成&quot;&gt;&lt;a href=&quot;#应用代码框架构成&quot; class=&quot;headerlink&quot; title=&quot;应用代码框架构成&quot;&gt;&lt;/a&gt;应用代码框架构成&lt;/h2&gt;&lt;h1 id=&quot;动态分析&quot;&gt;&lt;a href=&quot;#动态分析&quot; class=&quot;headerlink&quot; title=&quot;动态分析&quot;&gt;&lt;/a&gt;动态分析&lt;/h1&gt;&lt;h2 id=&quot;执行流程参数传递&quot;&gt;&lt;a href=&quot;#执行流程参数传递&quot; class=&quot;headerlink&quot; title=&quot;执行流程参数传递&quot;&gt;&lt;/a&gt;执行流程参数传递&lt;/h2&gt;&lt;p&gt;&lt;code&gt;class-dump -s -S -H WeChat.decrypted -o /Users/lecoding/Desktop/test/WeChatDemo/Headers&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WeChat.decrypted ： 砸壳后的Mach-o文件路径&lt;br&gt;/Users/lecoding/Desktop/test/WeChatDemo/Headers： 存储头文件目录&lt;br&gt;-s             sort classes and categories by name&lt;br&gt;-S             sort methods by name&lt;br&gt;-H            generate header files in current directory, or directory specified with -o&lt;br&gt;-o            output directory used for -H&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;iOS系统安全机制&quot;&gt;&lt;a href=&quot;#iOS系统安全机制&quot; class=&quot;headerlink&quot; title=&quot;iOS系统安全机制&quot;&gt;&lt;/a&gt;iOS系统安全机制&lt;/h1&gt;&lt;p&gt;&lt;code&gt;image list -o -f&lt;/code&gt;打印出iOS中二进制文件，库文件，动态链接文件，栈和堆内存地址的位置全部都是随机的。&lt;/p&gt;
&lt;h1 id=&quot;iOS越狱&quot;&gt;&lt;a href=&quot;#iOS越狱&quot; class=&quot;headerlink&quot; title=&quot;iOS越狱&quot;&gt;&lt;/a&gt;iOS越狱&lt;/h1&gt;&lt;p&gt;通过一系列iOS系统的漏洞，对系统安全权限进行破解，获取系统Root的权限。&lt;br&gt;引导式越狱，不完美越狱，完美越狱。&lt;/p&gt;
&lt;h2 id=&quot;越狱环境的配置&quot;&gt;&lt;a href=&quot;#越狱环境的配置&quot; class=&quot;headerlink&quot; title=&quot;越狱环境的配置&quot;&gt;&lt;/a&gt;越狱环境的配置&lt;/h2&gt;&lt;h1 id=&quot;iOS底层的知识储备&quot;&gt;&lt;a href=&quot;#iOS底层的知识储备&quot; class=&quot;headerlink&quot; title=&quot;iOS底层的知识储备&quot;&gt;&lt;/a&gt;iOS底层的知识储备&lt;/h1&gt;&lt;h2 id=&quot;Runtime&quot;&gt;&lt;a href=&quot;#Runtime&quot; class=&quot;headerlink&quot; title=&quot;Runtime&quot;&gt;&lt;/a&gt;Runtime&lt;/h2&gt;&lt;h2 id=&quot;类与方法&quot;&gt;&lt;a href=&quot;#类与方法&quot; class=&quot;headerlink&quot; title=&quot;类与方法&quot;&gt;&lt;/a&gt;类与方法&lt;/h2&gt;&lt;h2 id=&quot;数据存储&quot;&gt;&lt;a href=&quot;#数据存储&quot; class=&quot;headerlink&quot; title=&quot;数据存储&quot;&gt;&lt;/a&gt;数据存储&lt;/h2&gt;&lt;h2 id=&quot;UI控件的背后代码执行&quot;&gt;&lt;a href=&quot;#UI控件的背后代码执行&quot; class=&quot;headerlink&quot; title=&quot;UI控件的背后代码执行&quot;&gt;&lt;/a&gt;UI控件的背后代码执行&lt;/h2&gt;&lt;h2 id=&quot;整个APP的结构以及构建的过程&quot;&gt;&lt;a href=&quot;#整个APP的结构以及构建的过程&quot; class=&quot;headerlink&quot; title=&quot;整个APP的结构以及构建的过程&quot;&gt;&lt;/a&gt;整个APP的结构以及构建的过程&lt;/h2&gt;&lt;h3 id=&quot;手动打包APP模拟Xcode自动打包的过程&quot;&gt;&lt;a href=&quot;#手动打包APP模拟Xcode自动打包的过程&quot; class=&quot;headerlink&quot; title=&quot;手动打包APP模拟Xcode自动打包的过程&quot;&gt;&lt;/a&gt;手动打包APP模拟Xcode自动打包的过程&lt;/h3&gt;&lt;h1 id=&quot;Hook的原理&quot;&gt;&lt;a href=&quot;#Hook的原理&quot; class=&quot;headerlink&quot; title=&quot;Hook的原理&quot;&gt;&lt;/a&gt;Hook的原理&lt;/h1&gt;&lt;h2 id=&quot;Hook的几种方式&quot;&gt;&lt;a href=&quot;#Hook的几种方式&quot; class=&quot;headerlink&quot; title=&quot;Hook的几种方式&quot;&gt;&lt;/a&gt;Hook的几种方式&lt;/h2&gt;&lt;h3 id=&quot;1-Method-Swizzle—OC&quot;&gt;&lt;a href=&quot;#1-Method-Swizzle—OC&quot; class=&quot;headerlink&quot; title=&quot;1.Method Swizzle—OC&quot;&gt;&lt;/a&gt;1.Method Swizzle—OC&lt;/h3&gt;&lt;p&gt;通过OC的Runtime机制，改变函数的地址来交换方法实现&lt;/p&gt;
&lt;h3 id=&quot;2-fishHook—–C&quot;&gt;&lt;a href=&quot;#2-fishHook—–C&quot; class=&quot;headerlink&quot; title=&quot;2.fishHook—–C&quot;&gt;&lt;/a&gt;2.fishHook—–C&lt;/h3&gt;&lt;p&gt;通过修改懒加载和非懒加载的表，通过修改表的指针来达到Hook的效果，作用于C函数&lt;/p&gt;
&lt;h3 id=&quot;3-Cydia-Substrate（框架）&quot;&gt;&lt;a href=&quot;#3-Cydia-Substrate（框架）&quot; class=&quot;headerlink&quot; title=&quot;3.Cydia Substrate（框架）&quot;&gt;&lt;/a&gt;3.Cydia Substrate（框架）&lt;/h3&gt;&lt;p&gt;针对OC，C函数，或者是函数地址来做Hook操作&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;从现有APP实现细节的过程&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最近感悟</title>
    <link href="http://peilinghui.com/2019/01/26/%E6%9C%80%E8%BF%91%E6%84%9F%E6%82%9F/"/>
    <id>http://peilinghui.com/2019/01/26/最近感悟/</id>
    <published>2019-01-26T01:59:21.000Z</published>
    <updated>2019-02-01T02:23:54.944Z</updated>
    
    <content type="html">&lt;p&gt;人在闲的时候就不会不自觉的想好多东西。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;越来越觉得，人生就是需要不断的学习，不断的提高，其实在学校里面是学习然后是考试，在工作中是工作然后考核KPI，其实不论是在哪里，只要你开始努力，什么时候都不晚，确实看到很多出身学历不好的人，在工作中经过自己长期不断的努力也能获得比那些高学历人更多的回报。&lt;/li&gt;
&lt;li&gt;学历只是敲门砖，是入场券，但是只代表过去，不能代表现在，更不能代表将来，你不论进入什么公司，都需要持续不断的热情和坚持不懈的努力，认真的工作态度，其实一个人有没有认真工作，老板都是可以看出来的。如果你长期抱怨，并且不积极努力，意味着你离打包走人也不远了。不论你是什么出身。&lt;/li&gt;
&lt;li&gt;毕业出了学校，你才发现自律对一个人是多么的重要，学校的生活并不代表学校多好，条件多棒，学校是多么出名，更多的是你从学校以及周围的人所学到的东西，是否能主动高效并且自律安排自己的学习和生活，同样，你进入工作，才能有条不紊的安排自己的学习、工作和生活。你会发现那些越自律的人越优秀并且越有上升空间。你会发现那些比你优秀的人比你还更努力。&lt;/li&gt;
&lt;li&gt;从勤奋到懒惰容易，从懒惰到勤奋难，人总是偏向于懒惰的方向，不愿挑战自己，一直在给自己制造舒适区。从奢入简难，从简入奢易。总是这个道理，其实人有的时候也没必要和别人比较，其实你最大的敌人和最难克服的难道不是自己的私欲么？人肉体的私欲，想要吃，想要玩，想要快乐，想要放纵自己，管不住自己的私欲，很多时候就阻挡了自己向前的动力，就像是你想要往前走，但是你的身体就是不动。心有余而力不足。就是你没有能打败自己。温饱思淫欲，当人吃喝玩乐都觉得没意思了以后就会想淫欲，能管住自己的下半身的人才能管住自己的下半生，这个管住和你在什么位置，有多少钱没有关系，为什么辣么多事业有成的人还会出轨，可能就是没有克制了自己的私欲，管不住自己，这就说到了自律是多么的重要，我们一直在和自己做斗争。勤奋小人和懒惰小人。善与恶小人，还有很多的小人每天在我们的心里做斗争，看谁会打败谁。然后就铸造了现在的你。&lt;/li&gt;
&lt;li&gt;钱，这世上有谁不想赚钱，不想赚更多钱，不论是为了生活还是为了生存还是为了更优越的生存。但是赚钱这件事和你是什么学历，什么教育水平关系不是绝对的正比关系，财商和智商沾边，但不是完全成正比，不得不说，高学历高智商的人还是会在各行各业占据主要地位，甚至创造价值，学历高会让你有更多的选择，不论你是想在官场，还是职场，还是商场上都会为你留个位置，但是这只代表的选择，并不代表你自己的发展，所以，为什么说读书才是能进入上层阶级的入场券也是这个道理把。不得不说，学历更高的人薪资更高。但是，为什么学历一样的人，还是有人能当CEO或者CTO，有人能赚一个亿也是小目标的呢？这就不仅仅是智商或者是学历的因素了，更多的是财商和眼界还有见识的问题了。对于一个码农，光靠敲代码可能也不能达到财富自由，为什么马云不会敲代码还是中国首富呢？这就说到了见识和你所能看到的世界，决定了你所占的高度，而不仅是能力，一个码农，只是代表了一项技术，你有一门手艺，能在这个社会生存和站住脚，但是这仅仅是一个技工，只不过有些人是高级技工，有些人是中级技工，有些人是普通技工，更重要的是思想，这就为什么腾讯马化腾能从高级码农上升到CTO。还有其他公司的老总是技术出身还是老总的原因咯。&lt;/li&gt;
&lt;li&gt;我们生活在一个庞大的世界，但是每个人的生活就是自己的一个版本，这也就解释了为什么我们在一个公司，一个城市，一个地方，却过着不一样的生活，就是我们虽然有交集，但是不是我们全部的生活，这就是为什么人家和你年龄一样，人家是老总你却是员工，就是其实我们都是生活在不同版本里面的人。为什么同样是人，为什么大家每天都是有24小时，人和人的差别为什么比人和狗的差别还要大呢？实际上，不同的人在单位时间内创造的效益是不同的。就是为什么在同一个公司，大家的薪资不同的道理把。&lt;/li&gt;
&lt;li&gt;赚钱有的时候不是因为我们爱钱，或是是什么，在我看来是一种能力，一种自己价值的体现。你赚多少钱，代表了你有多大的能力，不仅仅是智商，情商，财商，赚多钱是这些的外在表示而已。就像是在悬崖边的百合花，它开花并不是为了让更多人来看它，而是它展示了它可以开花的能力，我们更多的时候是为了展示自己的价值，而不是赚多少钱。爱钱的人不一定能赚更多的钱，或者是钻到钱眼里面的人也可能走向犯罪的边缘，但是那些真正想要为社会做出贡献，真正想做一些事实现自己价值的人，金钱往往追着他们跑。但是也有那些不为了钱在教育行业辛勤耕耘的老师，或许他们是清北毕业的，但是他们创造的价值是无穷的，是无法用金钱衡量的。他们赚取的应该是尊重，是社会地位。但是也有那些一边做导师，一边开公司的人。总之，你的金钱和地位或许决定了你在这个社会生活的版本。而不是你的年龄，你的生活环境，或者是你的学历决定你生活的版本，不同的人有不同的生活版本，是你这个人不同与其他人单独的个体决定了你的生活，而不是生活决定了你。&lt;/li&gt;
&lt;li&gt;也许大家都羡慕那些不工作，四处游玩，有奢侈生活的人，但是真的让你不工作四处游玩的时候，你也会腻，人就是不断的在寻求刺激，寻求不一样的东西，就像是人吃一种东西，吃多了会腻，不论是食物，还是工作，还是生活，从起初的和以前不一样，到回归平常，就是人的一种心理，刚开始很新鲜，但是一段时间会就会觉得无趣，但是那些能坚持的人往往才是胜利的人，人都会有疲倦和厌烦还有不新鲜的时候，但是一旦感到不新鲜就去换其他吗？并不是的。人更难得的是坚持，所以我羡慕那些能坚持长跑，或者是跑马拉松的人，这样的人更能达到成功，能在一个岗位一个领域深挖，更深探索的人才能成为专家，才能更加优秀，那些浅尝辄止感到不新鲜就转化领域的人看似什么都知道什么都会，但却不精，也会和成功擦肩而过。你不能因为工作熟悉没有新鲜感就频繁的换工作把？还有就是你不能因为婚姻没有新鲜感，每天看着同样的人就频繁离婚把？你不能因为每天生活一样两点一线就不生活了把？坚持是人更难得的品格，所以人的成功更多的不是在智商更多的是你能否坚持下去，这也是马云说的，今天很残酷，明天更残酷，后天会很美好，但绝大多数人都死在明天晚上，却见不到后天的太阳，所以我们干什么都要坚持！    &lt;/li&gt;
&lt;li&gt;创业：是真的想创业，但是为什么没有开始？没有好的构想和版图和Idea，&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;人在闲的时候就不会不自觉的想好多东西。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018年总结</title>
    <link href="http://peilinghui.com/2018/12/04/2018%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://peilinghui.com/2018/12/04/2018年总结/</id>
    <published>2018-12-04T07:24:02.000Z</published>
    <updated>2019-01-02T14:39:50.916Z</updated>
    
    <content type="html">&lt;p&gt;现在是12月初，还有一个月，2018年就要过完了，看了看去年的年终总结和新年计划，只能趁着这个月把今年的还可以实现的实现一下了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h1&gt;&lt;p&gt;从2017年入职了涂鸦科技以后，就开始搞RN，也看看OC和RN的交互，对于iOS的组件化、模块化有了更多的认识，把Pod打成私有库，如何拆分模块，拆分Pod，并且能够持续化集成。一直工作到了七月。我三月底毕业的。当时候因为薪资低，也因为一直在做RN的东西，期间，我接手了一个外包项目，是做纯iOS开发的。然后又重新燃起我对原生开发的热情，额，换部门不可能额，我内推的一个我的同学也要跳槽，我也想跳槽了，然后我们就一起离职了额，我跳槽到了一个区块链的初创型公司，公司只有20多人。老板给我薪资还挺高，让我做team leader，从此就开始了996的日子，于是从零开始构建APP，还有一个小弟。我们要开发做一个类似微博的区块链社区群的APP，第一期需求做了大概两三周，然后测试了一周，然后做第二期需求加IM即时通讯，这块我也是第一次接触，然后压力山大，老板有一次感觉APP太慢了，就是加载慢，而且滑动列表有点卡，也是找我问罪，实话说，压力很大，然后研究第三方融云的文档，然后开发，干了两个月，然后做了这样一个完整有雏形的APP，我感觉996撑不下额，而且任务重，时间紧，压力大，让我感觉吃不消，就又辞职了，其实还是有点后悔的。然后就迎来了裸辞的找工作。&lt;/p&gt;
&lt;h2 id=&quot;感触&quot;&gt;&lt;a href=&quot;#感触&quot; class=&quot;headerlink&quot; title=&quot;感触&quot;&gt;&lt;/a&gt;感触&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;不要干不久就跳槽，跳槽容易跳崩，刚工作要沉下心来，自己努力去专研一些东西，在繁忙的业务中思考，并且能在繁忙的业务中解脱出来，去学习新的技术。&lt;/li&gt;
&lt;li&gt;接外包可以，但是容易分心，如果工作很忙还是不要接外包了，不然身心灵都疲倦。接外包可以利用很多的业余时间来强迫你工作，如果自制力好的话，可以利用业余时间多学习学习新的技术，如果自制力不好的话，接外包也可以让你明确自己该学习研究哪些内容，并且实现出来。但是确实是要耗费时间和精力的。&lt;/li&gt;
&lt;li&gt;不要意气用事的裸辞，在还没有完全找到下家的时候不要裸辞！不要裸辞！不要裸辞！尤其是现在这个资本寒冬，好多公司在裁员，裸辞就意味着要在身心灵上扛得住压力，重新去投简历找工作，如果超过两周没工作的话，你就容易变得很慌，这种感觉简直太煎熬。&lt;/li&gt;
&lt;li&gt;参加工作和在学校里面很不一样。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;学习&quot;&gt;&lt;a href=&quot;#学习&quot; class=&quot;headerlink&quot; title=&quot;学习&quot;&gt;&lt;/a&gt;学习&lt;/h1&gt;&lt;p&gt;说道学习，我就是在去年12月写论文，1月改论文，3月初答辩，3月底毕业。论文写得是RN方面的，感觉自己没有写好，也没用心写，在学校的时候还是不要边工作边写论文，不然容易两个都干不好，白天工作，晚上写论文，改论文，周末改论文，不知道是怎么熬下来的，没有完整的时间去思考去构建整个论文体系，感觉就是顺利毕业就好额。&lt;/p&gt;
&lt;p&gt;学习方面就是：学习了下JS，ES6，&lt;/p&gt;
&lt;h1 id=&quot;生活&quot;&gt;&lt;a href=&quot;#生活&quot; class=&quot;headerlink&quot; title=&quot;生活&quot;&gt;&lt;/a&gt;生活&lt;/h1&gt;&lt;p&gt;生活就是租房，然后搬家，然后再次租房。学会了做饭。&lt;br&gt;3月底4月初，毕业以后去马来西亚玩了一趟就当毕业旅行了。后来十一去了武功山，挑战自己，六月的时候回了趟家，然后十月的时候回了好几次家。&lt;br&gt;五月份的时候去了上海和同学玩，八月底的时候家里人去杭州看我，带他们去了乌镇，他们自己在杭州玩了玩，后来十月份又带他们去了上海玩了一下。其他时候基本就是自己平时周末去打球，去逛吃逛吃买买买了。生活就是这样平淡无奇的过着。期间还相亲过，同学介绍的，没有后文，吃完饭大家估计都觉得不合适，就没有再联系了。于是就躺在了微信里。&lt;/p&gt;
&lt;h1 id=&quot;感想&quot;&gt;&lt;a href=&quot;#感想&quot; class=&quot;headerlink&quot; title=&quot;感想&quot;&gt;&lt;/a&gt;感想&lt;/h1&gt;&lt;p&gt;一年一年的真的是好快啊！&lt;br&gt;我总结了下今年一共赚了多少钱，到手的钱大概是12万左右。（工资加外快）房租付了大概两万五，十一奉献一万，出去玩一万。每个月大概花五千，我真的都不知道干啥了。一年差不多六万。所以就攒剩下两万了&lt;/p&gt;
&lt;h1 id=&quot;新的一年的计划&quot;&gt;&lt;a href=&quot;#新的一年的计划&quot; class=&quot;headerlink&quot; title=&quot;新的一年的计划&quot;&gt;&lt;/a&gt;新的一年的计划&lt;/h1&gt;&lt;p&gt;人生就像是马拉松，并不在于你先开始跑的快或者是慢，而在于你能够坚持不懈的跑下去，我发现了一个问题，成功的人都喜欢长跑，因为长跑可以训练一个人的毅力和持久力，而我则擅长短跑，很多时候我喜欢什么就去抱有热情去学一阵子，然后过了一阵子就失去了热情和兴趣。总是不能坚持。&lt;br&gt;一开始，我以为我一直能够坚持的习惯就是每天早上读经祷告，从初中开始住校的时候我就开始了每天早上看一章圣经的习惯，到高中每天看一章圣经，写一句圣经话语，到大学。可是到了研究生我就没能再坚持了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;早睡早起：11点睡觉，6点半7点起床祷告，然后读经。写一节圣经。&lt;/li&gt;
&lt;li&gt;多读励志的书籍，多打鸡血，每天告诉自己我要年薪百万，我离目标还有十倍的距离。—微信读书&lt;/li&gt;
&lt;li&gt;读书以后要写读书感想和笔记。&lt;/li&gt;
&lt;li&gt;多学技术，多看视频。抓紧时间学习。&lt;/li&gt;
&lt;li&gt;每天要花一定的时间学习英语。听或者读。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;现在是12月初，还有一个月，2018年就要过完了，看了看去年的年终总结和新年计划，只能趁着这个月把今年的还可以实现的实现一下了。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>升级Xcode10遇到的问题</title>
    <link href="http://peilinghui.com/2018/11/03/%E5%8D%87%E7%BA%A7Xcode10%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://peilinghui.com/2018/11/03/升级Xcode10遇到的问题/</id>
    <published>2018-11-03T07:59:27.000Z</published>
    <updated>2018-11-03T08:03:00.481Z</updated>
    
    <content type="html">&lt;p&gt;升级Xcode10遇到的问题以及最近解决的问题。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;项目升级到Xcode10 以后报错：&lt;/p&gt;
&lt;h3 id=&quot;React-Native-‘config-h’-file-not-found&quot;&gt;&lt;a href=&quot;#React-Native-‘config-h’-file-not-found&quot; class=&quot;headerlink&quot; title=&quot;React-Native ‘config.h’ file not found&quot;&gt;&lt;/a&gt;React-Native ‘config.h’ file not found&lt;/h3&gt;&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;cd node_modules/react-native/third-party/glog-0.3.4&lt;br&gt;../../scripts/ios-configure-glog.sh&lt;/p&gt;
&lt;h3 id=&quot;Xcode-10-libfishhook-a-cannot-be-found&quot;&gt;&lt;a href=&quot;#Xcode-10-libfishhook-a-cannot-be-found&quot; class=&quot;headerlink&quot; title=&quot;Xcode 10 libfishhook.a cannot be found&quot;&gt;&lt;/a&gt;Xcode 10 libfishhook.a cannot be found&lt;/h3&gt;&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;在LIbrary下面的RCTWebSocket中的Target中的Build Phases中的Link Binary With Libraries 中的libfishhook.a文件删了重新导入就好了。&lt;/p&gt;
&lt;h3 id=&quot;Multiple-commands-produce&quot;&gt;&lt;a href=&quot;#Multiple-commands-produce&quot; class=&quot;headerlink&quot; title=&quot;Multiple commands produce&quot;&gt;&lt;/a&gt;Multiple commands produce&lt;/h3&gt;&lt;p&gt;Showing Recent Messages&lt;/p&gt;
&lt;p&gt;2) Target ‘YAORecordProject’ (project ‘YAORecordProject’) has process command with output ‘/Users/peilinghui/Library/Developer/Xcode/DerivedData/YAORecordProject-frlkqcmjttdqtdandttwzrmfhjnt/Build/Products/Debug-iphonesimulator/YAORecordProject.app/Info.plist’&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;This issue might occur just because of multiple Plist/other files within App-&lt;br&gt;Solution -&amp;gt; Open target -&amp;gt; Build phases &amp;gt; Copy Bundle Resources and remove info.plist from there.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;升级Xcode10遇到的问题以及最近解决的问题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RN与iOS的混合开发</title>
    <link href="http://peilinghui.com/2018/10/29/RN%E4%B8%8EiOS%E7%9A%84%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    <id>http://peilinghui.com/2018/10/29/RN与iOS的混合开发/</id>
    <published>2018-10-29T09:16:37.000Z</published>
    <updated>2018-10-29T10:00:52.152Z</updated>
    
    <content type="html">&lt;p&gt;以前做过一个APP是纯RN开发的，还做过一个APP是RN和iOS混合开发的，现在就比较一下两者的不同。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;纯RN的APP&quot;&gt;&lt;a href=&quot;#纯RN的APP&quot; class=&quot;headerlink&quot; title=&quot;纯RN的APP&quot;&gt;&lt;/a&gt;纯RN的APP&lt;/h2&gt;&lt;p&gt;就是通过React-Native init一个项目以后，代码写好以后把代码打包成bundle文件，然后导入到Xcode里面然后打包成ipa来发布，其中在APPdelegate里面是：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)application didFinishLaunchingWithOptions:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)launchOptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *jsCodeLocation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  jsCodeLocation = [[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] URLForResource:&lt;span class=&quot;string&quot;&gt;@&quot;main&quot;&lt;/span&gt; withExtension:&lt;span class=&quot;string&quot;&gt;@&quot;jsbundle&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                      moduleName:&lt;span class=&quot;string&quot;&gt;@&quot;CompassRN&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               initialProperties:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   launchOptions:launchOptions];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rootView&lt;span class=&quot;variable&quot;&gt;.backgroundColor&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; alloc] initWithRed:&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f green:&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f blue:&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f alpha:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.window&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;UIWindow&lt;/span&gt; alloc] initWithFrame:[&lt;span class=&quot;built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen]&lt;span class=&quot;variable&quot;&gt;.bounds&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *rootViewController = [&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  rootViewController&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt; = rootView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.window&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.rootViewController&lt;/span&gt; = rootViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.window&lt;/span&gt; makeKeyAndVisible];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到最重要的连接就是RCTRootView，的方法加载bundle文件，参数initialProperties必须是NSDictionary的一个实例。这一字典参数会在内部被转化为一个可供JS组件调用的JSON对象。&lt;/p&gt;
&lt;p&gt;具体解析请看：&lt;a href=&quot;https://www.jianshu.com/p/9d7dbf17daa5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jianshu.com/p/9d7dbf17daa5&lt;/a&gt;&lt;br&gt;RCTBridge桥接，moduleName是CompassRN，同样在RN中&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import CompassRN from &lt;span class=&quot;string&quot;&gt;&#39;./component/Appmain&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AppRegistry.registerComponent(&lt;span class=&quot;string&quot;&gt;&#39;CompassRN&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; CompassRN);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在React Native中，一个“原生模块”就是一个实现了“RCTBridgeModule”协议的Objective-C类，其中RCT是ReaCT的缩写。&lt;/p&gt;
&lt;h2 id=&quot;RN和iOS混合开发&quot;&gt;&lt;a href=&quot;#RN和iOS混合开发&quot; class=&quot;headerlink&quot; title=&quot;RN和iOS混合开发&quot;&gt;&lt;/a&gt;RN和iOS混合开发&lt;/h2&gt;&lt;p&gt;需要在iOS工程中：&lt;/p&gt;
&lt;p&gt;iOS是如何下载bundle文件，并且保证bundle文件的安全？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;TYRCTPanelViewController 的viewDidLoad中加载面板 loadDevicePanel,&lt;br&gt;通过TYPanelService来下载面板，&lt;br&gt;如果是debug模式的话，加载路径是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;panelPath = [NSString stringWithFormat:@&amp;quot;http://%@:8081/index.ios.bundle?platform=ios&amp;amp;dev=true&amp;amp;gwId=%@&amp;quot;,ip, self.devId];

其中IP是本机电脑的IP，
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;否则release模式的话：  [self loadWebView:panelPath]通过panelPath的网络请求路径来加载面板&lt;/p&gt;
&lt;p&gt;_rootView = [[RCTRootView alloc] initWithBundleURL:[NSURL URLWithString:panelPath] moduleName:@”TYRCTApp” initialProperties:@{@”devInfo”:devInfo} launchOptions:nil];&lt;br&gt;_rootView.frame = self.view.bounds;&lt;br&gt;如果设备变更，数据，网络，蓝牙等变化的话，通过&lt;br&gt;[self.rootView.bridge.eventDispatcher sendAppEventWithName:@”networkStateChange”&lt;br&gt;                        body:@{@”state”:[NSNumber numberWithBool:state]}];&lt;br&gt;来通知rootView&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;列表中用 TYPanelViewControllerFactory来处理具体进入到哪个面板。 isEnableDebug模式下进入 TYCommonPanelViewController,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TYPanelService.拉取面板主要是 TYPanelService 这个方法， 使用NSURLSessionDownload来下载面板，&lt;br&gt;如果沙盒 TPSandBox里面通过 NSFileManager来管理，如果里面存在有面板，直接加载，&lt;br&gt;不存在的话就去下载main.jsbundle（通过 RunLoop里面的这个方法cancelPreviousPerformRequestsWithTarget可以取消先前的请求任务）&lt;br&gt;下载以后的面板通过JSON解析以后放到 TYUIPanel（Model）中，删除先前的tar.gz压缩包，取消先前的任务，&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3.对于每一个panel文件，Model对象里面有 uiId， version， content， fileMd5，&lt;br&gt;其中 fileMd5来保证包的安全性，包解析用的工具是 TPEncryptUtils，先把 tarPath的文件转化成NSData，然后通过 DCTar来解压文件，&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;以前做过一个APP是纯RN开发的，还做过一个APP是RN和iOS混合开发的，现在就比较一下两者的不同。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在APP中IM使用融云</title>
    <link href="http://peilinghui.com/2018/09/21/%E5%9C%A8APP%E4%B8%ADIM%E4%BD%BF%E7%94%A8%E8%9E%8D%E4%BA%91/"/>
    <id>http://peilinghui.com/2018/09/21/在APP中IM使用融云/</id>
    <published>2018-09-21T04:43:28.000Z</published>
    <updated>2018-09-29T09:21:57.267Z</updated>
    
    <content type="html">&lt;p&gt;在项目APP中接入IM的功能，有环信和融云的两种选择，在纠结以后，选择了融云进行开发。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先可以参照官网：&lt;a href=&quot;https://www.rongcloud.cn/docs/ios.html#prepare&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.rongcloud.cn/docs/ios.html#prepare&lt;/a&gt;来进行基本的融云包的导入和集成到工程中。&lt;br&gt;通过在控制台中API的调用&lt;a href=&quot;https://developer.rongcloud.cn/apitool/A0dLuQBjI8MJKehwuu0=&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.rongcloud.cn/apitool/A0dLuQBjI8MJKehwuu0=&lt;/a&gt;来模拟接口调用的过程。&lt;br&gt;集成融云，就是能用好他所提供的API，就能完成大部分的工作，用好IMKit和IMLib。IMKit主要就是页面，可以在它的基础上进行我们自己页面的自定义，IMLib就是通讯的API，通过使用它暴露的方法来实现及时通讯，单聊，群聊，以及自定义消息的发送。&lt;/p&gt;
&lt;h1 id=&quot;导入融云，连接融云&quot;&gt;&lt;a href=&quot;#导入融云，连接融云&quot; class=&quot;headerlink&quot; title=&quot;导入融云，连接融云&quot;&gt;&lt;/a&gt;导入融云，连接融云&lt;/h1&gt;&lt;p&gt;在APPDelegate中注册自定义的消息类型和做消息推送相关的内容。&lt;br&gt;最好是在登录APP的时候，让服务端返回userId和rongcloudToken，获取到Token以后，登录融云的服务器。可以写一个单例的工具类，来处理融云的登录，断开连接，和&lt;rcimuserinfodatasource, rcimreceivemessagedelegate,rcimconnectionstatusdelegate=&quot;&quot;&gt;用户数据源的一些方法的实现。&lt;/rcimuserinfodatasource,&gt;&lt;/p&gt;
&lt;h1 id=&quot;用户信息和群组信息的数据源&quot;&gt;&lt;a href=&quot;#用户信息和群组信息的数据源&quot; class=&quot;headerlink&quot; title=&quot;用户信息和群组信息的数据源&quot;&gt;&lt;/a&gt;用户信息和群组信息的数据源&lt;/h1&gt;&lt;p&gt;因为融云已经做好了基本的聊天通讯的功能，我们要做的就是处理用户昵称，头像和群组的一些信息的处理，设置&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置用户信息源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [R&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt; sharedR&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt;]&lt;span class=&quot;variable&quot;&gt;.userInfoDataSource&lt;/span&gt; = [JRIMDataSource shareInstance];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//群组信息源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [R&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt; sharedR&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt;]&lt;span class=&quot;variable&quot;&gt;.groupInfoDataSource&lt;/span&gt; = [JRIMDataSource shareInstance];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//群成员数据源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [R&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt; sharedR&lt;span class=&quot;built_in&quot;&gt;CIM&lt;/span&gt;]&lt;span class=&quot;variable&quot;&gt;.groupMemberDataSource&lt;/span&gt; = [JRIMDataSource shareInstance];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;用户信息需要通过实现RCIMUserInfoDataSource的方法&quot;&gt;&lt;a href=&quot;#用户信息需要通过实现RCIMUserInfoDataSource的方法&quot; class=&quot;headerlink&quot; title=&quot;用户信息需要通过实现RCIMUserInfoDataSource的方法&quot;&gt;&lt;/a&gt;用户信息需要通过实现RCIMUserInfoDataSource的方法&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;getUserInfoWithUserId:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSString&lt;/span&gt; *)&lt;/span&gt;userId completion:&lt;span class=&quot;params&quot;&gt;(void (^)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCUserInfo&lt;/span&gt; *user&lt;span class=&quot;variable&quot;&gt;Info&lt;/span&gt;)&lt;/span&gt;)completion;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们需要在这个方法里面调用自己的接口来获取用户的相关信息，就是头像和昵称，然后把获取到的数据放到RCUserInfo对象的userId，name，和portraitUri中，也把这个数据存到FMDB数据库中。这样在聊天列表展示聊天cell的时候，可以通过&lt;br&gt;&lt;code&gt;RCUserInfo *user = [[RCIM sharedRCIM] getUserInfoCache:model.targetId];&lt;/code&gt;这个方法，如果User存在的话，直接赋值，如果不存在的话，再次调用getUserInfoWithUserId这个来获取用户的信息，获取到以后刷新用户信息，并存到数据库中。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr_selector&quot;&gt;[[RCIM sharedRCIM]&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;refreshUserInfoCache&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;withUserId&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.userId&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr_selector&quot;&gt;[[JRDataBaseManager  shareInstance]&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;insertUserToDB&lt;/span&gt;&lt;span class=&quot;pseudo&quot;&gt;:userInfo&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;群组信息实现RCIMGroupInfoDataSource方法&quot;&gt;&lt;a href=&quot;#群组信息实现RCIMGroupInfoDataSource方法&quot; class=&quot;headerlink&quot; title=&quot;群组信息实现RCIMGroupInfoDataSource方法&quot;&gt;&lt;/a&gt;群组信息实现RCIMGroupInfoDataSource方法&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;getGroupInfoWithGroupId:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSString&lt;/span&gt; *)&lt;/span&gt;groupId completion:&lt;span class=&quot;params&quot;&gt;(void (^)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCGroup&lt;/span&gt; *group&lt;span class=&quot;variable&quot;&gt;Info&lt;/span&gt;)&lt;/span&gt;)completion;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;融云自带的群组的信息类是RCGroup，只包含groupId，groupName和portraitUri，我们如果需要更多的信息存储，只需要继承自RCGroup,&lt;br&gt;如果我们需要在群组名称中携带很多信息的话，只需要把相关的信息放到一个字典中然后后转化成json字符串赋值给groupName&lt;/p&gt;
&lt;h3 id=&quot;群组成员实现&quot;&gt;&lt;a href=&quot;#群组成员实现&quot; class=&quot;headerlink&quot; title=&quot;群组成员实现&quot;&gt;&lt;/a&gt;群组成员实现&lt;/h3&gt;&lt;p&gt;我们可以写个单例来实现这三个方法。在方法实现中通过调用自己的接口获取到相关的数据，然后调用融云的接口refreshGroupInfoCache存储起来。&lt;/p&gt;
&lt;h1 id=&quot;消息列表&quot;&gt;&lt;a href=&quot;#消息列表&quot; class=&quot;headerlink&quot; title=&quot;消息列表&quot;&gt;&lt;/a&gt;消息列表&lt;/h1&gt;&lt;p&gt;消息列表需要继承自RCConversationListViewController，只要继承了这个，然后通过其暴露的属性和方法来设置基本列表的样式，当有消息的时候就能展示出来融云自带的聊天cell。如果我们要自定义的消息列表的cell。主要实现的方法：&lt;/p&gt;
&lt;h3 id=&quot;重写方法：插入自定义会话model&quot;&gt;&lt;a href=&quot;#重写方法：插入自定义会话model&quot; class=&quot;headerlink&quot; title=&quot;重写方法：插入自定义会话model&quot;&gt;&lt;/a&gt;重写方法：插入自定义会话model&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *)willReloadTableData:(&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *)dataSource&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [dataSource enumerateObjectsUsingBlock:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;  _Nonnull obj, &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; idx, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; * _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RCConversationModel *model = (RCConversationModel *)obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//筛选请求添加好友的系统消息，用于生成自定义会话类型的cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (model&lt;span class=&quot;variable&quot;&gt;.conversationType&lt;/span&gt; == ConversationType_GROUP) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            model&lt;span class=&quot;variable&quot;&gt;.conversationModelType&lt;/span&gt; = RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (model&lt;span class=&quot;variable&quot;&gt;.conversationType&lt;/span&gt; == ConversationType_PRIVATE) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            model&lt;span class=&quot;variable&quot;&gt;.conversationModelType&lt;/span&gt; = RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dataSource;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注：在该方法内筛选数据源dataSource中具体的会话类型及消息的model，将model 类型必须修改为 model.conversationModelType=RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION&lt;/p&gt;
&lt;p&gt;如果需要插入类似微博消息列表中的点赞、评论，关注和系统消息的自定义cell，需要在这个方法中自定义Model，并且拼接到DataSource中。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_isShowServiceSystem == &lt;span class=&quot;keyword&quot;&gt;NO&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RCConversationModel *&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt; = [[RCConversationModel alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.targetId = JR_Service_System_ID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.conversationType = ConversationType_SYSTEM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.conversationModelType = RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [dataSource addObject:&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;重写返回-cell-高度的方法&quot;&gt;&lt;a href=&quot;#重写返回-cell-高度的方法&quot; class=&quot;headerlink&quot; title=&quot;重写返回 cell 高度的方法&quot;&gt;&lt;/a&gt;重写返回 cell 高度的方法&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;CGFloat&lt;/span&gt;)&lt;/span&gt;rcConversationListTableView:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;UITableView&lt;/span&gt; *)&lt;/span&gt;tableView heightForRowAtIndexPath:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSIndexPath&lt;/span&gt; *)&lt;/span&gt;indexPath;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果需要显示不同高度测自定义的cell，只需要在这个方法中，根据判断的类型返回高度值。&lt;/p&gt;
&lt;h3 id=&quot;自定义会话Cell显示时的回调&quot;&gt;&lt;a href=&quot;#自定义会话Cell显示时的回调&quot; class=&quot;headerlink&quot; title=&quot;自定义会话Cell显示时的回调&quot;&gt;&lt;/a&gt;自定义会话Cell显示时的回调&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;-&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCConversationBaseCell&lt;/span&gt; *)&lt;/span&gt;rcConversationListTableView:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;UITableView&lt;/span&gt; *)&lt;/span&gt;tableView cellForRowAtIndexPath:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSIndexPath&lt;/span&gt; *)&lt;/span&gt;indexPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者是即将显示cell的时候把用户信息和群组信息放到cell里面&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;willDisplayConversationTableCell:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCConversationBaseCell&lt;/span&gt; *)&lt;/span&gt;cell atIndexPath:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSIndexPath&lt;/span&gt; *)&lt;/span&gt;indexPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果使用的都是自定义的cell的话，要设置在model.conversationModelType == RC_CONVERSATION_MODEL_TYPE_CUSTOMIZATION)先区分数据模型是自定义的，再区分是单聊还是群聊conversationType。对于每一种会话类型，自定义我们需要的cell的样式，然后通过取出对应index的Model。&lt;br&gt;  &lt;code&gt;RCConversationModel *model = self.conversationListDataSource[indexPath.row];&lt;/code&gt;&lt;br&gt;来把Model中的头像、昵称、最近消息、时间、未读数、一些信息放到cell对应的位置。&lt;/p&gt;
&lt;h3 id=&quot;点击事件-–点击cell的回调&quot;&gt;&lt;a href=&quot;#点击事件-–点击cell的回调&quot; class=&quot;headerlink&quot; title=&quot;点击事件 –点击cell的回调&quot;&gt;&lt;/a&gt;点击事件 –点击cell的回调&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;onSelectedTableRow:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCConversationModelType&lt;/span&gt;)&lt;/span&gt;conversationModelType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         conversationModel:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCConversationModel&lt;/span&gt; *)&lt;/span&gt;model&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               atIndexPath:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSIndexPath&lt;/span&gt; *)&lt;/span&gt;indexPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在点击事件中，根据你自定义cell类型的不同，跳转到不同的页面，如果是单聊，群聊跳转到聊天会话页面，如果是系统消息：评论回复、点赞、关注、系统消息，跳转到自己写的页面，融云提供了这种系统消息的通知的接口，我们可以通过它的接口就可以实现通知的推送，不需要接入第三方极光等来进行推送。只需要把这些通知调用发送接口，作为消息发送给用户。&lt;/p&gt;
&lt;p&gt;例如：评论和回复页面：继承自RCConversationViewController，隐藏下面的输入栏&lt;code&gt;self.chatSessionInputBarControl.hidden = YES;&lt;/code&gt;&lt;br&gt;注册自定义的消息和数据模型：&lt;code&gt;[self registerClass:[JRServiceCommentCell class] forMessageClass:[JRServiceCommentModel class]];&lt;/code&gt;&lt;br&gt;通过接收到通知以后，在会话页面插入一条消息并展示：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//在会话页面中插入一条消息并展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                             selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(updateForSharedMessageInsertSuccess:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                 name:&lt;span class=&quot;string&quot;&gt;@&quot;RCDSharedMessageInsertSuccess&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)updateForSharedMessageInsertSuccess:(&lt;span class=&quot;built_in&quot;&gt;NSNotification&lt;/span&gt; *)notification &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RCMessage *message = notification&lt;span class=&quot;variable&quot;&gt;.object&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (message&lt;span class=&quot;variable&quot;&gt;.conversationType&lt;/span&gt; == &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.conversationType&lt;/span&gt; &amp;amp;&amp;amp; [message&lt;span class=&quot;variable&quot;&gt;.targetId&lt;/span&gt; isEqualToString:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.targetId&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; appendAndDisplayMessage:message];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;评论和回复的cell继承自RCMessageBaseCell。可以自己写这个cell的样式。再说一下这个cell的数据源，也是自己自定义的CommentModel继承自RCMessageContent，就和自定义消息类型一样的，需要把消息内容编码成JSON，然后将JSON解码成消息内容，定义消息的类型名（与融云消息不要名字一样），类似我们平时用网络请求后的JSON数据解析，把NSData的data消息解码成字典，&lt;code&gt;NSDictionary *dictionary = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&amp;amp;error];&lt;/code&gt;然后把字典中的dictionary[@”content”]取出来，判断是字典还是字符串类型，如果是字典的话就用YYModel解析到一个Model中来使用。如果是字符串的话就用方法把JSON字符串转化为字典，&lt;/p&gt;
&lt;h1 id=&quot;消息会话&quot;&gt;&lt;a href=&quot;#消息会话&quot; class=&quot;headerlink&quot; title=&quot;消息会话&quot;&gt;&lt;/a&gt;消息会话&lt;/h1&gt;&lt;h1 id=&quot;消息会话展示&quot;&gt;&lt;a href=&quot;#消息会话展示&quot; class=&quot;headerlink&quot; title=&quot;消息会话展示&quot;&gt;&lt;/a&gt;消息会话展示&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;单聊不显示对方名称：RCMessageModel的model.isDisplayNickname来设置&lt;br&gt;2.群聊显示身份的名称：获取到群成员数组以后，遍历数组，把身份和成员的昵称存到RCUserInfo的name中，并保存到SDK中，再把  [self.conversationMessageCollectionView reloadData];&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重要的方法:&lt;br&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;sendMessage:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCMessageContent&lt;/span&gt; *)&lt;/span&gt;messageContent pushContent:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;NSString&lt;/span&gt; *)&lt;/span&gt;pushContent;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在发送自定义消息和通知的时候使用，当我在发送一个邀请好友进入聊天室的自定义cell的时候，使用&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JRInviteMessage *inviteMsg = [JRInviteMessage messageWithGroupId:&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                             WithGroupHeader:NSStringObject(&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Img).length==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;?  &lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;ImgAll :&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                               WithGroupName:[&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Name containsString:@&lt;span class=&quot;string&quot;&gt;&quot;、&quot;&lt;/span&gt;] ? &lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;NameAll : &lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                            WithGroupProflie:NSStringObject(&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Introduct).length==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;?  @&lt;span class=&quot;string&quot;&gt;&quot;暂无简介&quot;&lt;/span&gt; :&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Model.&lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt;Introduct];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[RCIM sharedRCIM]sendMessage:ConversationType_PRIVATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                 targetId:selectArray[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  content:inviteMsg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              pushContent:nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                 pushData:nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  success:^(long messageId) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    error:^(RCErrorCode nErrorCode, long messageId)&amp;#123;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于文字，图片和自定义的消息的cell都可以重写，文字继承自RCTextMessageCell，语音继承自RCVoiceMessageCell，图片继承自RCImageMessageCell，其他自定义邀请好友进入群聊的cell继承自RCMessageCell或者是它的父类RCMessageBaseCell，在方法中实现&lt;br&gt;&lt;code&gt;- (void)setDataModel:(RCMessageModel *)model&lt;/code&gt;来设置自己想要的属性的样式.&lt;/p&gt;
&lt;h3 id=&quot;进入会话页面要从服务器获取用户或是群组的信息并更新本地数据库&quot;&gt;&lt;a href=&quot;#进入会话页面要从服务器获取用户或是群组的信息并更新本地数据库&quot; class=&quot;headerlink&quot; title=&quot;进入会话页面要从服务器获取用户或是群组的信息并更新本地数据库&quot;&gt;&lt;/a&gt;进入会话页面要从服务器获取用户或是群组的信息并更新本地数据库&lt;/h3&gt;&lt;p&gt;这样做的目的就是：用户换了头像或者是昵称以后，在会话页面可以更新用户的数据，&lt;/p&gt;
&lt;h3 id=&quot;自定义Cell的点击&quot;&gt;&lt;a href=&quot;#自定义Cell的点击&quot; class=&quot;headerlink&quot; title=&quot;自定义Cell的点击&quot;&gt;&lt;/a&gt;自定义Cell的点击&lt;/h3&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;didTapMessageCell:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;RCMessageModel&lt;/span&gt; *)&lt;/span&gt;model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;推送&quot;&gt;&lt;a href=&quot;#推送&quot; class=&quot;headerlink&quot; title=&quot;推送&quot;&gt;&lt;/a&gt;推送&lt;/h1&gt;&lt;p&gt;就像上面的会话列表里面的评论和回复一样，只要在这个的地方，调用自己服务端在融云基础上开发的接口，就能把Model传过去，把需要发送的数据放在一个字典里面，然后jsonStringWithObject把字典转换成JSON字符串&lt;/p&gt;
&lt;h1 id=&quot;遇到的问题&quot;&gt;&lt;a href=&quot;#遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题&quot;&gt;&lt;/a&gt;遇到的问题&lt;/h1&gt;&lt;p&gt;1.修改聊天气泡以及一些图标&lt;br&gt;直接把要替换的图片替换RongCloud.bundle文件中的图片即可。&lt;/p&gt;
&lt;p&gt;2.当融云SDK和BlocksKit被引入到同一工程，通过融云的聊天UI界面去选择照片、拍摄照片并发送时，无法正常选择和发送。&lt;br&gt;问题的本质：&lt;/p&gt;
&lt;p&gt;UIImagePickerController代理中的方法冲突了，导致融云SDK中选择并发送照片的功能失效。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;BlocksKit是开源方法，直接编辑UIImagePickerController+BlocksKit.m文件，注释红框部分，问题便可解决。&lt;img src=&quot;http://rongcloud-web.qiniudn.com/39ef2374b74fb20691d28a5b6b9824d1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;3.//点击消息发送失败红点的回调&lt;br&gt;&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)didTapmessageFailedStatusViewForResend&lt;span class=&quot;value&quot;&gt;:(RCMessageModel *)model&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     RCMessageContent *resendContent = (RCMessageContent *)model.content;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;AlertShowMoreButtons&lt;/span&gt;(&lt;span class=&quot;at_rule&quot;&gt;@[@&lt;span class=&quot;string&quot;&gt;&quot;重新发送&quot;&lt;/span&gt;], ^(NSString *title,&lt;span class=&quot;preprocessor&quot;&gt; NSInteger&lt;/span&gt;&lt;span class=&quot;preprocessor&quot;&gt; moreButtonIndex&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (&lt;span class=&quot;function&quot;&gt;BoolEqualToString&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;title&lt;/span&gt;, &lt;span class=&quot;at_rule&quot;&gt;@&lt;span class=&quot;string&quot;&gt;&quot;重新发送&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr_selector&quot;&gt;[self resendMessage:resendContent]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;解决的方法&quot;&gt;&lt;a href=&quot;#解决的方法&quot; class=&quot;headerlink&quot; title=&quot;解决的方法&quot;&gt;&lt;/a&gt;解决的方法&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;在项目APP中接入IM的功能，有环信和融云的两种选择，在纠结以后，选择了融云进行开发。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>独立开发一个APP</title>
    <link href="http://peilinghui.com/2018/08/04/%E7%8B%AC%E7%AB%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAAPP/"/>
    <id>http://peilinghui.com/2018/08/04/独立开发一个APP/</id>
    <published>2018-08-04T07:22:24.000Z</published>
    <updated>2018-10-11T04:02:17.141Z</updated>
    
    <content type="html">&lt;p&gt;独立开发一个社群APP，类似微博，知识星球，简书这一类的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;首先是整个项目的框架的搭建。&lt;/p&gt;
&lt;h1 id=&quot;中间层的路由跳转方案&quot;&gt;&lt;a href=&quot;#中间层的路由跳转方案&quot; class=&quot;headerlink&quot; title=&quot;中间层的路由跳转方案&quot;&gt;&lt;/a&gt;中间层的路由跳转方案&lt;/h1&gt;&lt;p&gt;抽象出一个中间层来对纷乱的引用关系进行统一的跳转。模块只和中间层耦合，模块间解耦；中间层使用runtime的形式调用模块的业务组件，不依赖具体的模块代码.两种主流方案:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以&lt;a href=&quot;https://github.com/joeldev/JLRoutes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JLRoutes&lt;/a&gt;为代表的URLRoute方案:以URL为key，以待执行的block为value，保存在一个全局map中，在内存中常驻;&lt;/li&gt;
&lt;li&gt;Mediator中间人方案:把所有的调用都集合在一起，使用一个中间人管理。所有调用方都通过中间人调取另外一个模块;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;创建Target-Action。Target对象暴露整个模块对外提供的所有服务，此外，因为Mediator和Target是通过Runtime交互的，Target暴露的方法中接收的参数是一个字典，但在方法实现中负责将传过来的字典还原成各个参数，并调用该模块具体的类和方法。&lt;/li&gt;
&lt;li&gt;创建 CTMediator 的Category. 受限于runtime只能以字典形式传一系列参数，Mediator分类的职责就在于对外提供参数友好型的一系列方法，但在方法实现中包装成字典形式。这里涉及到key的定义必须和Target中还原时的key定义一致，因此划分给相同的开发维护。&lt;br&gt;&lt;a href=&quot;https://github.com/yehot/YT_TargetAction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xuzhenhao/ZHMediator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结合URLRoute和Mediator的跳转方案&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;整体导航条Navigation&quot;&gt;&lt;a href=&quot;#整体导航条Navigation&quot; class=&quot;headerlink&quot; title=&quot;整体导航条Navigation&quot;&gt;&lt;/a&gt;整体导航条Navigation&lt;/h1&gt;&lt;p&gt;写自定义的navigationController，主要用于处理问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手势返回的支持和不支持。&lt;/li&gt;
&lt;li&gt;导航栏的显示和隐藏。&lt;/li&gt;
&lt;li&gt;底部tabBar的显示和隐藏。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一些页面对于statusBar的处理，设置statusBar的背景颜色和样式&lt;/p&gt;
&lt;h1 id=&quot;网络层&quot;&gt;&lt;a href=&quot;#网络层&quot; class=&quot;headerlink&quot; title=&quot;网络层&quot;&gt;&lt;/a&gt;网络层&lt;/h1&gt;&lt;p&gt;在AFN上面封装，包装AFNManager，创建一个单例的HTTPClient继承自AFHTTPSessionManager，在单例中设置securityPolicy、requestSerializer、responseSerializer、和请求头，以及Content-type相关的参数，包装GET、post请求&lt;br&gt;没有判断网络的情况，是WIFI还是4G还是3G，还是无网络的状态&lt;/p&gt;
&lt;h1 id=&quot;tableView自适应&quot;&gt;&lt;a href=&quot;#tableView自适应&quot; class=&quot;headerlink&quot; title=&quot;tableView自适应&quot;&gt;&lt;/a&gt;tableView自适应&lt;/h1&gt;&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;p&gt;Sunny写的&lt;a href=&quot;http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;优化UITableViewCell高度计算的那些事&lt;/a&gt;&lt;br&gt;UITableView+FDTemplateLayoutCell&lt;/p&gt;
&lt;h2 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/peilinghui/SDAutoLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SDAutoLayout&lt;/a&gt;&lt;br&gt;不仅可以实现tableview和cell高度自适应，还可以实现普通view的自动布局，比用masonry代码更少，&lt;/p&gt;
&lt;h2 id=&quot;方法三&quot;&gt;&lt;a href=&quot;#方法三&quot; class=&quot;headerlink&quot; title=&quot;方法三&quot;&gt;&lt;/a&gt;方法三&lt;/h2&gt;&lt;p&gt;在每个元素的模型model中添加一个height属性，实现它的get方法，在get方法中计算需要多行显示文字的高度，然后再加上其他乱七八糟的高度并返回，然后在tableview的 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(CGFloat)tableView:(UITableView )tableView heightForRowAtIndexPath:(NSIndexPath )indexPath中获取到每行对应的model，取出其中的model.height属性的值返回，还要在cell中确定cell中label的高度。。。总之就是很麻烦，而且还不一定总能算的很正确，甚是受此困扰。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要你懂一定的Autolayout知识的话，原来实现这种的cell高度自适应，其实是灰常灰常简单的：&lt;br&gt;首先，第一步，现在自定义的cell中将高度随着内容动态改变的label的布局使用autolayout布局完成，这里有个注意点就是label和cell边界的距离要确定好，不能固定死label的高度，然后设置label的numberOfLines=0，行数设置为0即意味着label可以有任意行。&lt;br&gt;其次，实现以下两个tableview的delegate中的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView estimatedHeightForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView heightForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UITableViewAutomaticDimension&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是的，只要实现这两个方法，然后运行你的项目，你会惊讶的发现，哇塞，高度完美自适应…&lt;br&gt;这里有几个关键点：&lt;br&gt;关键点1：必须重写estimatedHeightForRowAtIndexPath方法&lt;br&gt;这个方法是iOS7.0之后才出现的，如果不重写此方法，仅重写heightForRowAtIndexPath，那么大家会发现，cell并不会根据label的内容，自适应高度。因为系统是先获取cell的高度，再获取cell的view。也就是先调用heightForRowAtIndexPath，再调用cellForRowAtIndexPath。在cellForRowAtIndexPath被调用之前，你的label是没有被设置文本内容的，因此它获取到的高度，并不是你想要的。那么我们必须想办法让系统在获取了cell之后，再获取cell的高度。方法就是，重写estimatedHeightForRowAtIndexPath，顾名思义，它会返回一个估计高度，有了这个方法后，tableview会先调用它获取估计高度，然后获取cell，最后获取真实高度。estimatedHeightForRowAtIndexPath的返回值可以随意，返回多少都可以，只是给tableview一个安慰而已，让它延迟获取真实的高度。&lt;br&gt;关键点2：真实高度返回值为&lt;br&gt;UITableViewAutomaticDimension&lt;br&gt;关键点3：cell中的元素，必须相对于cell的顶部和底部布局，这样在元素中的内容动态变化的时候，才能撑开cell&lt;/p&gt;
&lt;h2 id=&quot;方法四&quot;&gt;&lt;a href=&quot;#方法四&quot; class=&quot;headerlink&quot; title=&quot;方法四&quot;&gt;&lt;/a&gt;方法四&lt;/h2&gt;&lt;p&gt;ASDK：AsyncDisplayKit.相关连接：&lt;br&gt;&lt;a href=&quot;https://draveness.me/asdk-rendering&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 ASDK 性能调优 - 提升 iOS 界面的渲染性能&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/ludashi/p/5895725.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS开发之多种Cell高度自适应实现方案的UI流畅度分析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法五&quot;&gt;&lt;a href=&quot;#方法五&quot; class=&quot;headerlink&quot; title=&quot;方法五&quot;&gt;&lt;/a&gt;方法五&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 保持界面流畅的技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;YYKit的&lt;/p&gt;
&lt;h1 id=&quot;整体的方法&quot;&gt;&lt;a href=&quot;#整体的方法&quot; class=&quot;headerlink&quot; title=&quot;整体的方法&quot;&gt;&lt;/a&gt;整体的方法&lt;/h1&gt;&lt;p&gt;页面布局：masonry自动布局&lt;br&gt;页面的网络解析：YYModel&lt;br&gt;页面的网络请求：&lt;/p&gt;
&lt;p&gt;各个模块需要注意的问题：&lt;/p&gt;
&lt;h1 id=&quot;登录模块&quot;&gt;&lt;a href=&quot;#登录模块&quot; class=&quot;headerlink&quot; title=&quot;登录模块&quot;&gt;&lt;/a&gt;登录模块&lt;/h1&gt;&lt;p&gt;第一次登录和再次登录&lt;/p&gt;
&lt;h1 id=&quot;图片处理&quot;&gt;&lt;a href=&quot;#图片处理&quot; class=&quot;headerlink&quot; title=&quot;图片处理&quot;&gt;&lt;/a&gt;图片处理&lt;/h1&gt;&lt;p&gt;图片压缩&lt;/p&gt;
&lt;h1 id=&quot;弹框处理&quot;&gt;&lt;a href=&quot;#弹框处理&quot; class=&quot;headerlink&quot; title=&quot;弹框处理&quot;&gt;&lt;/a&gt;弹框处理&lt;/h1&gt;&lt;h1 id=&quot;时间处理&quot;&gt;&lt;a href=&quot;#时间处理&quot; class=&quot;headerlink&quot; title=&quot;时间处理&quot;&gt;&lt;/a&gt;时间处理&lt;/h1&gt;&lt;h1 id=&quot;下拉刷新和上拉加载更多&quot;&gt;&lt;a href=&quot;#下拉刷新和上拉加载更多&quot; class=&quot;headerlink&quot; title=&quot;下拉刷新和上拉加载更多&quot;&gt;&lt;/a&gt;下拉刷新和上拉加载更多&lt;/h1&gt;&lt;h1 id=&quot;第三方登录和第三方分享&quot;&gt;&lt;a href=&quot;#第三方登录和第三方分享&quot; class=&quot;headerlink&quot; title=&quot;第三方登录和第三方分享&quot;&gt;&lt;/a&gt;第三方登录和第三方分享&lt;/h1&gt;&lt;p&gt;第三方分享：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;申请微信APPKey和申请友盟APPkey&lt;/li&gt;
&lt;li&gt;cocospod:    pod ‘UMengUShare/Social/WeChat’&lt;/li&gt;
&lt;li&gt;在APPdelegate中设置APPkey&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)setAppkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //友盟&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;type&quot;&gt;WXApi&lt;/span&gt; registerApp:&lt;span class=&quot;type&quot;&gt;WXAPPID&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置友盟appkey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;type&quot;&gt;UMSocialManager&lt;/span&gt; defaultManager] setUmSocialAppkey:&lt;span class=&quot;type&quot;&gt;UMKey&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //分享到微信&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;type&quot;&gt;UMSocialManager&lt;/span&gt; defaultManager] setPlaform:&lt;span class=&quot;type&quot;&gt;UMSocialPlatformType_WechatSession&lt;/span&gt; appKey:&lt;span class=&quot;type&quot;&gt;APPKEY&lt;/span&gt; appSecret:&lt;span class=&quot;type&quot;&gt;APPSECRET&lt;/span&gt; redirectURL:@&lt;span class=&quot;string&quot;&gt;&quot;www.com&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;type&quot;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&quot;type&quot;&gt;UIApplication&lt;/span&gt; *)application openURL:(&lt;span class=&quot;type&quot;&gt;NSURL&lt;/span&gt; *)url sourceApplication:(&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *)sourceApplication annotation:(id)annotation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = [&lt;span class=&quot;type&quot;&gt;UMSocialSnsService&lt;/span&gt; handleOpenURL:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;设置Plis跳转的URL。URL Schemes列为白名单&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;LSApplicationQueriesSchemes&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;weixin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;创建分享信息&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//创建分享消息对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; UMSocialMessageObject *messageObject = [UMSocialMessageObject messageObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *title = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.shareTitle&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *url = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.originUrl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *text = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.shareText&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *imgUrl = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.shareImage&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UMShareWebpageObject *shareObject = [UMShareWebpageObject shareObjectWithTitle:title descr:text thumImage:imgUrl];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[shareObject setWebpageUrl:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;messageObject&lt;span class=&quot;variable&quot;&gt;.shareObject&lt;/span&gt; = shareObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[UMSocialManager defaultManager] shareToPlatform:UMSocialPlatformType_WechatSession&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           messageObject:messageObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		currentViewController:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		completion:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; data, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UMSocialLogInfo(&lt;span class=&quot;string&quot;&gt;@&quot;************Share fail with error %@*********&quot;&lt;/span&gt;,error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([data isKindOfClass:[UMSocialShareResponse class]]) &amp;#123;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  UMSocialShareResponse *resp = data; UMSocialLogInfo(&lt;span class=&quot;string&quot;&gt;@&quot;response message is %@&quot;&lt;/span&gt;,resp&lt;span class=&quot;variable&quot;&gt;.message&lt;/span&gt;);   UMSocialLogInfo(&lt;span class=&quot;string&quot;&gt;@&quot;response originalResponse data is %@&quot;&lt;/span&gt;,resp&lt;span class=&quot;variable&quot;&gt;.originalResponse&lt;/span&gt;);&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123; UMSocialLogInfo(&lt;span class=&quot;string&quot;&gt;@&quot;response data is %@&quot;&lt;/span&gt;,data); &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;系统问题&quot;&gt;&lt;a href=&quot;#系统问题&quot; class=&quot;headerlink&quot; title=&quot;系统问题&quot;&gt;&lt;/a&gt;系统问题&lt;/h1&gt;&lt;p&gt;启动图&lt;/p&gt;
&lt;p&gt;横屏&lt;/p&gt;
&lt;p&gt;推送&lt;/p&gt;
&lt;p&gt;3Dtouch&lt;/p&gt;
&lt;p&gt;屏幕适配&lt;/p&gt;
&lt;h1 id=&quot;打包问题&quot;&gt;&lt;a href=&quot;#打包问题&quot; class=&quot;headerlink&quot; title=&quot;打包问题&quot;&gt;&lt;/a&gt;打包问题&lt;/h1&gt;&lt;p&gt;1。手动打包&lt;/p&gt;
&lt;p&gt;2。自动化打包&lt;/p&gt;
&lt;h1 id=&quot;优化&quot;&gt;&lt;a href=&quot;#优化&quot; class=&quot;headerlink&quot; title=&quot;优化&quot;&gt;&lt;/a&gt;优化&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;tableView的流畅：没有网络请求结束的时候先加载占位图，然后&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/d1e6ae279dd2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UITableView的优化策略&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://didee.cn/2018/01/29/iOS-ASDK/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 开发一定要尝试的 Texture(ASDK)&lt;/a&gt;&lt;br&gt;UITableView的回调顺序是先多次调用tableView:heightForRowAtIndexPath:以确定 contentSize及Cell的位置,然后才会调用tableView:cellForRowAtIndexPath:,从而来显示在 当前屏幕的Cell。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;UITableView的滚动优化主要在于以下两个方面：&lt;/p&gt;
&lt;p&gt;减少cellForRowAtIndexPath代理中的计算量（cell的内容计算）&lt;br&gt;减少heightForRowAtIndexPath代理中的计算量（cell的高度计算）&lt;/p&gt;
&lt;h3 id=&quot;减少cellForRowAtIndexPath代理中的计算量&quot;&gt;&lt;a href=&quot;#减少cellForRowAtIndexPath代理中的计算量&quot; class=&quot;headerlink&quot; title=&quot;减少cellForRowAtIndexPath代理中的计算量&quot;&gt;&lt;/a&gt;减少cellForRowAtIndexPath代理中的计算量&lt;/h3&gt;&lt;p&gt;首先要提前计算每个cell中需要的一些基本数据，代理调用的时候直接取出；&lt;br&gt;图片要异步加载，加载完成后再根据cell内部UIImageView的引用设置图片；&lt;br&gt;图片数量多时，图片的尺寸要跟据需要提前经过transform矩阵变换压缩好（直接设置图片的contentMode让其自行压缩仍然会影响滚动效率），必要的时候要准备好预览图和高清图，需要时再加载高清图。&lt;br&gt;图片的‘懒加载’方法，即延迟加载，当滚动速度很快时避免频繁请求服务器数据。&lt;br&gt;尽量手动Drawing视图提升流畅性，而不是直接子类化UITableViewCell，然后覆盖drawRect方法，因为cell中不是只有一个contentview。绘制cell不建议使用UIView，建议使用CALayer。原因要参考UIView和CALayer的区别和联系。&lt;/p&gt;
&lt;h3 id=&quot;减少heightForRowAtIndexPath代理中的计算量&quot;&gt;&lt;a href=&quot;#减少heightForRowAtIndexPath代理中的计算量&quot; class=&quot;headerlink&quot; title=&quot;减少heightForRowAtIndexPath代理中的计算量&quot;&gt;&lt;/a&gt;减少heightForRowAtIndexPath代理中的计算量&lt;/h3&gt;&lt;p&gt;由于每次TableView进行update更新都会对每一个cell调用heightForRowAtIndexPath代理取得最新的height，会大大增加计算时间。如果表格的所有cell高度都是固定的，那么去掉heightForRowAtIndexPath代理，直接设置TableView的rowHeight属性为固定的高度；&lt;br&gt;如果高度不固定，应尽量将cell的高度数据计算好并储存起来，代理调用的时候直接取，即将height的计算时间复杂度降到O(1)。例如：在异步请求服务器数据时，提前将cell高度计算好并作为dataSource的一个数据存到数据库供随时取用。&lt;/p&gt;
&lt;h1 id=&quot;数据刷新&quot;&gt;&lt;a href=&quot;#数据刷新&quot; class=&quot;headerlink&quot; title=&quot;数据刷新&quot;&gt;&lt;/a&gt;数据刷新&lt;/h1&gt;&lt;h2 id=&quot;tableView的数据刷新&quot;&gt;&lt;a href=&quot;#tableView的数据刷新&quot; class=&quot;headerlink&quot; title=&quot;tableView的数据刷新&quot;&gt;&lt;/a&gt;tableView的数据刷新&lt;/h2&gt;&lt;p&gt;那就在每个元素的model里面加上一个高度字段，显示的时候如果高度非0，直接拿过来使用，如果是0就自适应计算一下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://casatwy.com/iOS-Modulization.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈 组件化方案&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;把模块拆分成Pod&quot;&gt;&lt;a href=&quot;#把模块拆分成Pod&quot; class=&quot;headerlink&quot; title=&quot;把模块拆分成Pod&quot;&gt;&lt;/a&gt;把模块拆分成Pod&lt;/h1&gt;&lt;h1 id=&quot;其他问题&quot;&gt;&lt;a href=&quot;#其他问题&quot; class=&quot;headerlink&quot; title=&quot;其他问题&quot;&gt;&lt;/a&gt;其他问题&lt;/h1&gt;&lt;h2 id=&quot;UIScrollView的左右滑动与侧滑返回并存&quot;&gt;&lt;a href=&quot;#UIScrollView的左右滑动与侧滑返回并存&quot; class=&quot;headerlink&quot; title=&quot;UIScrollView的左右滑动与侧滑返回并存&quot;&gt;&lt;/a&gt;UIScrollView的左右滑动与侧滑返回并存&lt;/h2&gt;&lt;p&gt;侧滑返回效果的触发需要满足：(1) 滑动位置在屏幕左边缘;（2）向右滑动;&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#pragma mark - 侧滑返回和控件手势冲突的解决方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//是否支持多手势触发，返回YES，则可以多个手势一起触发方法，返回NO则为互斥.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//是否允许多个手势识别器共同识别，一个控件的手势识别后是否阻断手势识别继续向下传播，默认返回NO；如果为YES，响应者链上层对象触发手势识别后，如果下层对象也添加了手势并成功识别也会继续执行，否则上层对象识别后则不再继续传播&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//一句话总结就是此方法返回YES时，手势事件会一直往下传递，不论当前层次是否对该事件进行响应。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)gestureRecognizer:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)otherGestureRecognizer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; panBack:gestureRecognizer]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//location_X可自己定义,其代表的是滑动返回距左边的有效长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)panBack:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)gestureRecognizer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//是滑动返回距左边的有效长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; location_X =&lt;span class=&quot;number&quot;&gt;0.15&lt;/span&gt;*IPHONE_W;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (gestureRecognizer ==&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.panGestureRecognizer&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; *pan = (&lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; *)gestureRecognizer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; point = [pan translationInView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerState&lt;/span&gt; state = gestureRecognizer&lt;span class=&quot;variable&quot;&gt;.state&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateBegan&lt;/span&gt; == state ||&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStatePossible&lt;/span&gt; == state) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; location = [gestureRecognizer locationInView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//这是允许每张图片都可实现滑动返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp1 = location&lt;span class=&quot;variable&quot;&gt;.x&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp2 =IPHONE_W;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; XX = temp1 % temp2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (point&lt;span class=&quot;variable&quot;&gt;.x&lt;/span&gt; &amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; XX &amp;lt; location_X) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)gestureRecognizerShouldBegin:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)gestureRecognizer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; panBack:gestureRecognizer]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;获取系统的UIPanGestureRecognizer的&lt;br&gt;(3) 侧滑手势优先，侧滑手势失效时，才触发UISrcollView的滑动&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/8170fea174da&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jianshu.com/p/8170fea174da&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;独立开发一个社群APP，类似微博，知识星球，简书这一类的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS底层实现</title>
    <link href="http://peilinghui.com/2018/06/25/iOS%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <id>http://peilinghui.com/2018/06/25/iOS底层实现/</id>
    <published>2018-06-25T07:07:36.000Z</published>
    <updated>2018-10-14T06:49:21.814Z</updated>
    
    <content type="html">&lt;p&gt;源于一个面试题。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/mw690/51530583ly1fsatleo2zmj213u10caiu.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们知道在Runtime中的swizzling:通过selector来找IMP，可以利用Runtime来实现交换原方法和目标方法的IMP，以完全代替原方法的实现，或为原实现前后相当于加一段额外的代码。&lt;/p&gt;
&lt;p&gt;就是在分类的load方法中，通过class_getClassMethodclass_getInstanceMethod获取类方法和实例方法，然后method_exchangeImplementations(),交换方法实现，或者是其他class_addMethods、class_addIvar、class_addProtocol、class_addProperty来动态的添加方法或者成员变量。还有class_copyIvarList、class_copyMethodList获得某个类所有的成员变量和所有方法。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import&lt;span class=&quot;title&quot;&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassA&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)methodA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)methodB;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassA&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;Swizzle&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method originalMethod = class_getInstanceMethod(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(methodA));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method swizzledMethod = class_getInstanceMethod(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(swizzled_methodA));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;method_exchangeImplementations(originalMethod, swizzledMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)swizzled_methodA &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; swizzled_methodA];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;AOP的库Aspects 支持多次hook同一个方法，支持从hook返回的id&lt;aspecttoken&gt;对象删除对应的hook，IMP即函数指针。&lt;br&gt;Aspects 的大致原理：替换原方法的IMP为 消息转发函数指针 _objc_msgForward或_objc_msgForward_stret，把原方法IMP添加并对应到SEL aspects_originalSelector，将forwardInvocation:的IMP替换为参数对齐的C函数&lt;strong&gt;ASPECTS_ARE_BEING_CALLED&lt;/strong&gt;(NSObject &lt;em&gt;self, SEL selector, NSInvocation &lt;/em&gt;invocation)的指针。在&lt;strong&gt;ASPECTS_ARE_BEING_CALLED&lt;/strong&gt;函数中，替换invocation的selector为aspects_originalSelector，相当于要发送调用原始方法实现的消息。对于插入位置在前面，替换，后面的多个block，构建新的blockInvocation，从invocation中提取参数，最后通过invokeWithTarget:block来完成依次调用。&lt;/aspecttoken&gt;&lt;/p&gt;
&lt;h1 id=&quot;libffi-简介&quot;&gt;&lt;a href=&quot;#libffi-简介&quot; class=&quot;headerlink&quot; title=&quot;libffi 简介&quot;&gt;&lt;/a&gt;libffi 简介&lt;/h1&gt;&lt;p&gt;    libffi 可以认为是实现了C语言上的runtime，简单来说，libffi 可根据 参数类型(ffi_type)，参数个数 生成一个 模板(ffi_cif)；可以输入 模板、函数指针 和 参数地址 来直接完成 函数调用(ffi_call)； 模板 也可以生成一个所谓的 闭包(ffi_closure)，并得到指针，当执行到这个地址时，会执行到自定义的void function(ffi_cif &lt;em&gt;cif, void &lt;/em&gt;ret, void &lt;strong&gt;args, void &lt;em&gt;userdata)函数，在这里，我们可以获得所有参数的地址(包括返回值)，以及自定义数据userdata。当然，在这个函数里我们可以做一些额外的操作。&lt;br&gt;    &lt;br&gt;    &lt;br&gt;如何hook ObjC方法和实现AOP，思路：我们可以将ffi_closure关联的指针替换原方法的IMP，当对象收到该方法的消息时objc_msgSend(id self, SEL sel, …)，将最终执行自定义函数void ffi_function(ffi_cif &lt;/em&gt;cif, void *ret, void &lt;/strong&gt;args, void *userdata)。而实现这一切的主要工作是：设计可行的结构，存储类的多个hook信息；根据包含不同参数的方法和切面block，生成包含匹配ffi_type的cif；替换类某个方法的实现为ffi_closure关联的imp，记录hook；在ffi_function里，根据获得的参数，动态调用原始imp和block。&lt;/p&gt;
&lt;h2 id=&quot;动态调用C函数&quot;&gt;&lt;a href=&quot;#动态调用C函数&quot; class=&quot;headerlink&quot; title=&quot;动态调用C函数&quot;&gt;&lt;/a&gt;动态调用C函数&lt;/h2&gt;&lt;p&gt;使用libffi提供接口动态调用流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备好参数数据及其对应ffi_type数组、返回值内存指针、函数指针&lt;/li&gt;
&lt;li&gt;创建与函数特征相匹配的函数原型：ffi_cif对象&lt;/li&gt;
&lt;li&gt;使用“ffi_call”来完成函数调用&lt;br&gt;使用ffi，只要有函数原型cif对象，函数实现指针，返回值内存指针和函数参数数组，我们就可以实现在运行时动态调用任意C函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以如果想实现其他语言(譬如JS)，执行过程中动态调用C函数，只需在调用过程中加一层转换，将参数及返回值类型转换成libffi对应类型，并封装成函数原型cif对象，准备好参数数据，找到对应函数指针，然后调用即可。&lt;/p&gt;
&lt;h2 id=&quot;动态定义C函数&quot;&gt;&lt;a href=&quot;#动态定义C函数&quot; class=&quot;headerlink&quot; title=&quot;动态定义C函数&quot;&gt;&lt;/a&gt;动态定义C函数&lt;/h2&gt;&lt;p&gt;libffi还有一个特别强大的函数，通过它我们可以将任意参数和返回值类型的函数指针，绑定到一个函数实体上。那么这样我们就可以很方便的实现动态定义一个C函数了！同时这个函数在编写解释器或提供任意函数的包装器(通用block)时非常有用，此函数是：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ffi_status ffi_prep_closure_loc (ffi_closure *closure,  &lt;span class=&quot;comment&quot;&gt;//闭包，一个ffi_closure对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ffi_cif *cif,  &lt;span class=&quot;comment&quot;&gt;//函数原型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*fun) (ffi_cif *cif, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ret, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; **args, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*user_data), &lt;span class=&quot;comment&quot;&gt;//函数实体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *user_data, &lt;span class=&quot;comment&quot;&gt;//函数上下文，函数实体实参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *codeloc)   &lt;span class=&quot;comment&quot;&gt;//函数指针，指向函数实体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过一个简单的例子，看下如何将一个函数指针绑定到一个函数实体上：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;ffi.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Acts like puts with the file given at time of enclosure. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数实体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;puts_binding&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ffi_cif *cif, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *ret, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* args[],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  FILE *stream)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *ret = &lt;span class=&quot;built_in&quot;&gt;fputs&lt;/span&gt;(*(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **)args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_cif cif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_type *args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_closure *closure;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*bound_puts)(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *);  &lt;span class=&quot;comment&quot;&gt;//声明一个函数指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Allocate closure and bound_puts */&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//创建closure&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    closure = ffi_closure_alloc(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ffi_closure), &amp;amp;bound_puts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (closure)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* Initialize the argument info vectors */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &amp;amp;ffi_type_pointer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* Initialize the cif */&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;//生成函数原型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ffi_prep_cif(&amp;amp;cif, FFI_DEFAULT_ABI, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         &amp;amp;ffi_type_uint, args) == FFI_OK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* Initialize the closure, setting stream to stdout */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 通过 ffi_closure 把 函数原型_cifPtr / 函数实体JPBlockInterpreter / 上下文对象self / 函数指针blockImp 关联起来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ffi_prep_closure_loc(closure, &amp;amp;cif, puts_binding,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     &lt;span class=&quot;built_in&quot;&gt;stdout&lt;/span&gt;, bound_puts) == FFI_OK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                rc = bound_puts(&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;/* rc now holds the result of the call to fputs */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Deallocate both closure, and bound_puts */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_closure_free(closure);   &lt;span class=&quot;comment&quot;&gt;//释放闭包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述步骤大致分为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备一个函数实体&lt;/li&gt;
&lt;li&gt;声明一个函数指针&lt;/li&gt;
&lt;li&gt;根据函数参数个数/参数及返回值类型生成一个函数原型&lt;/li&gt;
&lt;li&gt;创建一个ffi_closure对象，并用其将函数原型、函数实体、函数上下文、函数指针关联起来&lt;/li&gt;
&lt;li&gt;释放closure&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过以上这5步，我们就可以在执行过程中将一个函数指针，绑定到一个函数实体上，从而轻而易举的实现动态定义一个C函数。&lt;/p&gt;
&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.assuner.com/%E5%BC%80%E6%BA%90/2018/01/16/Stinger.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hook方法的新姿势–(使用libffi实现AOP )&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.cnbang.net/tech/3219/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何动态调用 C 函数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.cnbang.net/tech/3332/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何动态创建 block – JPBlock 扩展原理详解&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;源于一个面试题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Effective JavaScript</title>
    <link href="http://peilinghui.com/2018/04/19/Effective-JavaScript/"/>
    <id>http://peilinghui.com/2018/04/19/Effective-JavaScript/</id>
    <published>2018-04-19T00:08:23.000Z</published>
    <updated>2018-07-19T15:05:44.675Z</updated>
    
    <content type="html">&lt;p&gt;Effective JavaScript&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Accustoming-Yourself-to-JavaScript让自己习惯JS&quot;&gt;&lt;a href=&quot;#Accustoming-Yourself-to-JavaScript让自己习惯JS&quot; class=&quot;headerlink&quot; title=&quot;Accustoming Yourself to JavaScript让自己习惯JS&quot;&gt;&lt;/a&gt;Accustoming Yourself to JavaScript让自己习惯JS&lt;/h1&gt;&lt;h2 id=&quot;1-知道你正在使用的JavaScript模式&quot;&gt;&lt;a href=&quot;#1-知道你正在使用的JavaScript模式&quot; class=&quot;headerlink&quot; title=&quot;1.知道你正在使用的JavaScript模式&quot;&gt;&lt;/a&gt;1.知道你正在使用的JavaScript模式&lt;/h2&gt;&lt;p&gt;是否使用严格模式？只可选择其一或者将其自身包裹在立即调用的函数表达式（IIFE）中连接多个文件。&lt;br&gt;获得最大兼容性： 在严格模式下，并且显式地将代码内容包裹在严格函数中。&lt;/p&gt;
&lt;h2 id=&quot;2-注意JavaScript的浮点数&quot;&gt;&lt;a href=&quot;#2-注意JavaScript的浮点数&quot; class=&quot;headerlink&quot; title=&quot;2.注意JavaScript的浮点数&quot;&gt;&lt;/a&gt;2.注意JavaScript的浮点数&lt;/h2&gt;&lt;p&gt;avaScript的数字都是双精度的浮点数。&lt;br&gt;JavaScript中的整数只是双精度浮点数的一个子集,而不是一个单独的数据类型。&lt;br&gt;位运算符把数字当做32位的有符号整数来处理。&lt;br&gt;注意JavaScript中浮点数的精度陷阱。&lt;/p&gt;
&lt;h2 id=&quot;3-当心隐式的强制转换&quot;&gt;&lt;a href=&quot;#3-当心隐式的强制转换&quot; class=&quot;headerlink&quot; title=&quot;3.当心隐式的强制转换&quot;&gt;&lt;/a&gt;3.当心隐式的强制转换&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Effective JavaScript&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React技术栈</title>
    <link href="http://peilinghui.com/2018/02/22/React%E7%9F%A5%E8%AF%86/"/>
    <id>http://peilinghui.com/2018/02/22/React知识/</id>
    <published>2018-02-22T06:26:54.000Z</published>
    <updated>2018-07-19T15:15:21.074Z</updated>
    
    <content type="html">&lt;p&gt;主要是对阅读深入React技术栈的总结和实践。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/facebook/react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;h2 id=&quot;事件系统&quot;&gt;&lt;a href=&quot;#事件系统&quot; class=&quot;headerlink&quot; title=&quot;事件系统&quot;&gt;&lt;/a&gt;事件系统&lt;/h2&gt;&lt;p&gt;React基于Viral DOM实现了一个Synthetic（合成事件）层，使用stopPropagation()和preventDefault()来中断它。&lt;br&gt;所有事件都自动绑定到最外层，如果要访问原生事件对象，可以使用nativeEvent属性。&lt;/p&gt;
&lt;p&gt;一、 合成事件的实现机制&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事件委派：把所有事件绑定到结构最外层，使用同一的事件监听器–映射所有组件内部的事件监听和处理函数。&lt;/li&gt;
&lt;li&gt;自动绑定：手动绑定this为当前组件的方法：&lt;ul&gt;
&lt;li&gt;bind方法：使用::this.handleClick等同于this.handleClick.bind(this)&lt;/li&gt;
&lt;li&gt;构造器内绑定声明，在constructor中完成&lt;/li&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、 使用原生事件&lt;br&gt;在ComponentDidMount中&lt;br&gt;this.refs.button.addEventListener(‘click’,e=&amp;gt;{&lt;br&gt;    hanldeCliick(e);&lt;br&gt;});&lt;br&gt;在ComponentWillUnMount中移除&lt;br&gt;this.refs.button.removeEventListener(‘click’);&lt;/p&gt;
&lt;p&gt;三、 合成事件和原生事件混用&lt;br&gt;比如在web页面添加移动设备扫描二维码的功能。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不要把合成事件和原生事件混用&lt;/li&gt;
&lt;li&gt;通过e.target判断来避免&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;四、 对比React合成事件和JS的原生事件&lt;/p&gt;
&lt;h2 id=&quot;组件间通信&quot;&gt;&lt;a href=&quot;#组件间通信&quot; class=&quot;headerlink&quot; title=&quot;组件间通信&quot;&gt;&lt;/a&gt;组件间通信&lt;/h2&gt;&lt;p&gt;一、 父组件向子组件通信&lt;br&gt;通过props&lt;/p&gt;
&lt;p&gt;二、 子组件向父组件通信&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用回调函数：this.props的function的回调&lt;/li&gt;
&lt;li&gt;利用自定义事件机制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、 跨级组件通信&lt;br&gt;子组件跨级访问信息，使用context实现跨级父子组件间的通信。&lt;br&gt;在父组件中定义了ChildContext，在子组件中使用this.context从而调用。&lt;br&gt;一般只有在全局比如：界面主题、用户信息才会使用。总体原则：使用它，可以写成高阶组件。&lt;/p&gt;
&lt;p&gt;四、 没有嵌套关系的组件通信&lt;br&gt;通过一个单例的EventEmitter，然后把这个实例输出到各组件中使用。&lt;/p&gt;
&lt;p&gt;import {EventEmitter} from ‘event’;&lt;br&gt;export default new EventEmitter();&lt;/p&gt;
&lt;p&gt;import emitter from ‘./events’;&lt;/p&gt;
&lt;p&gt;在APP的类中的ComponentDidMount中emmit&lt;/p&gt;
&lt;h2 id=&quot;组件间抽象&quot;&gt;&lt;a href=&quot;#组件间抽象&quot; class=&quot;headerlink&quot; title=&quot;组件间抽象&quot;&gt;&lt;/a&gt;组件间抽象&lt;/h2&gt;&lt;p&gt;mixin和高阶组件&lt;br&gt;mixin:创造一种类似多重继承的效果，组合。&lt;/p&gt;
&lt;h1 id=&quot;Flux架构&quot;&gt;&lt;a href=&quot;#Flux架构&quot; class=&quot;headerlink&quot; title=&quot;Flux架构&quot;&gt;&lt;/a&gt;Flux架构&lt;/h1&gt;&lt;p&gt;不是MVC的架构，Flux三大部分组成：1. dispatcher、store、view。dispatcher负责分发事件，store负责保存数据、view负责订阅store中的数据，并使用这些数据渲染相应的页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与MVC的主要区别：&lt;/strong&gt;&lt;br&gt;没有职责明确的Controller，存在一个Controller-view的角色，将view和store进行绑定，并没有Controller需要承担的复杂的逻辑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;dispatcher与action&lt;/strong&gt;&lt;br&gt;dispatcher的实现就是下面两个API:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;.register(callback)方法用来注册一个监听器。&lt;br&gt;.dispatch(action)用来分发一个action。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;action是一个普通的JavaScript对象，一般包含type、payload字段，用于描述一个事件以及需要改变的相关数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;store&lt;/strong&gt;&lt;br&gt;负责保存数据，并且修改数据的逻辑，调用dispatcher的register(callback)方法将自己注册为一个监听器。&lt;br&gt;当.dispatch(action)用来分发一个action时，store注册的监听器就会被调用，同时得到这个action作为参数。store之暴露getter不暴露setter，只能读取不能修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Controller-view&lt;/strong&gt;&lt;br&gt;最顶层view，主要进行store与React组件(view层)之间的数据的绑定，定义数据更新以及传递的方式。会调用store保留的getter获取存储其中的数据并设置为自己的state，在render时以props的形式传给自己的子组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;view&lt;/strong&gt;&lt;br&gt;React组件扮演。结合Angular、Vue来发挥Flux的能力。&lt;br&gt;一条特殊的约定：&lt;strong&gt;Flux的view不能直接修改数据，如果页面操作需要修改数据，则必须使用dispatcher分发一个action。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;actionCreator&lt;/strong&gt;&lt;br&gt;用来创造action的。为什么需要？因为在分发action的时候代码是冗余的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Redux架构&quot;&gt;&lt;a href=&quot;#Redux架构&quot; class=&quot;headerlink&quot; title=&quot;Redux架构&quot;&gt;&lt;/a&gt;Redux架构&lt;/h1&gt;&lt;h2 id=&quot;Redux简介&quot;&gt;&lt;a href=&quot;#Redux简介&quot; class=&quot;headerlink&quot; title=&quot;Redux简介&quot;&gt;&lt;/a&gt;Redux简介&lt;/h2&gt;&lt;p&gt;Redux的核心代码是一个库，类似Flux的架构思想，&lt;/p&gt;
&lt;h3 id=&quot;三大原则&quot;&gt;&lt;a href=&quot;#三大原则&quot; class=&quot;headerlink&quot; title=&quot;三大原则&quot;&gt;&lt;/a&gt;三大原则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单一数据源&lt;br&gt;一个应用永远只有唯一的一个数据源，整个应用状态都保存在一个对象中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态是只读的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Flux中store没有setter只有getter，而Redux中没有store，只有reducer，根据当前触发的action对当前应用state进行迭代。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;状态修改均由纯函数完成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Redux与Flux最大的不同。&lt;br&gt;在Flux中，我们在actionCreator里调用APPDispatcher.dispatch方法来触发action，直接修改了store中数据.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;主要是对阅读深入React技术栈的总结和实践。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017年总结</title>
    <link href="http://peilinghui.com/2018/01/05/2017%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://peilinghui.com/2018/01/05/2017年总结/</id>
    <published>2018-01-05T13:23:18.000Z</published>
    <updated>2018-02-07T15:52:32.000Z</updated>
    
    <content type="html">&lt;p&gt;终于有时间写一下年终总结和新年展望了。我们总是忙着走路，却忘了当初出发的目的。勿忘初心，方得始终。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;2017年过的可真快，还依稀记得16年写下的宏伟大志，但是随着被现实一点点的打磨，似乎都忘了我们最初的梦想。&lt;/p&gt;
&lt;h1 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h1&gt;&lt;p&gt;先说一下工作，我从2017年的春节前辞职了上家公司，还是裸辞，年后到了学校就想一定要找BAT的实习，然后刚来学校不久就有了阿里内推的机会，然后我就投了，结果没过几天就打来电话了，那是二月上旬，然后顿时很受打击，感觉自己16年的大半年的工作里没有干过什么有价值的东西，然后开始了复习的计划，把剑指offer看了一遍，把题刷了一点，然后开始复习iOS的基础，就把effective-objectiveC和Objective-c的高级编程那本书，还看了图解HTTP，编程珠玑没看完，还有王道的那本程序员求职宝典，然后觉得C++可能也是要看一下，于是买了C++primerPlus(看了前面的一点)和effectiveC++（没看），复习了大概一个月，就开始投简历了，然后是腾讯电话面试，是QQ空间的面试官，那是3月中下旬了，腾讯面试官很认真，问了我很多iOS基础的东西都有答上来，但是C++的东西，完全都没答上来，无非是一些简单的常用的多态，继承还有虚函数，以前考研的时候有复习过，但是基本忘的差不多了，于是就面试官开始给我讲了问题，最后说了可以好好复习一下以后还有机会，第二天的中午面试官还发短信说我有个问题说错了给我指出来了，顿时感觉面试官好认真，相比之下，阿里面试官就感觉没辣么认真和你讲了。然后投了网易，网易笔试，美团也投了，然后也笔试了，然后投了华为，面试了一下，可是我觉得自己做iOS，去华为干嘛。然后投了唯品会，电话面试了一次过了，让去上海再面试一下，当时候只要有机会就开始投各大公司了，投了百度，链家，还有蜻蜓，然后去上海面试了唯品会，然后就去了北京，去了传说中的中关村，见了很多研究生的同学，两个在百度，一个在美团，然后面试了美团和百度和链家还有蜻蜓，总结：自己代码敲得不够，练手练得太少了，功夫下的不够深，基础不够扎实，iOS竞争太强了，去面试百度，面试官直接说才看我的简历，不知道到今天面试了多少个人了。最后只招一个。尴尬。然后回了趟天津，本科天津读书，回天津见了大学的好朋友，然后回本科学校看了看，遇到了很多很多本科读研的同学，聊了聊吃吃饭逛逛街，刚好清明节就回家了一趟，然后又回杭州面试了网易，但是我投的测试。。感觉自己投错了。。面试官问为什么想从开发转测试。。我顿时语塞。然后唯品会通知了就4月下旬就去上海入职了。然后就开始了从4月底到9月底在唯品会工作。工作上开始从iOS原生开发转向了RN开发。9月底离职。10月初回杭州了，差不多校招都接近尾声了。就开始投了几家公司校招和社招一起投，阿里电面了一次，挖财面试了一下，还有机会面APPLE来着，全英文面试，有点虚就没面上，面试酷家乐没去额，然后上海美团大众点评还打了两次电话让我去上海面试，但是我那个时候已经入职了杭州的一家公司了就是现在的公司涂鸦，也是继续开发React-Native，并且是做智能家居的，感觉很有趣。前景也看好。&lt;/p&gt;
&lt;h2 id=&quot;感触：&quot;&gt;&lt;a href=&quot;#感触：&quot; class=&quot;headerlink&quot; title=&quot;感触：&quot;&gt;&lt;/a&gt;感触：&lt;/h2&gt;&lt;p&gt;找工作就是持久战，心理和身体的坚持，感觉自己好像干了很多，但是回想又没有学到什么，尤其在第一家公司的时候，感觉自己做了一年iOS都没有完整的自己写过一个APP，真是惭愧。然后求职过程中开始总结以前工作的东西，发现自己只是在一味的加班，做代码的搬运工，其实并没有树立自己的品牌，就像现在的自媒体都在树立的自己的品牌。一直的加班让人感到疲惫，而你如果不自己再抽时间学习的话就会被淘汰，正如iOS当初年初的时候多少人说找不到工作一样。然后到了上海开始做原生也是在别人代码上再开发的，然后也是感谢领导，没有安卓，就让我开始重构那个供应商的一个APP，于是就开始边学RN边写，大概花了两个月左右，终于从0到1做出了一个自己完整做的APP，也算实现了自己的一个小目标了，也对RN有所了解了。在新公司也可以继续学习RN这块，然后有空的话开始扩展前端的领域。&lt;/p&gt;
&lt;h1 id=&quot;学习&quot;&gt;&lt;a href=&quot;#学习&quot; class=&quot;headerlink&quot; title=&quot;学习&quot;&gt;&lt;/a&gt;学习&lt;/h1&gt;&lt;p&gt;除了面试的几本书，还有就是JavaScript高级程序设计（看完了，但是好多东西还没理解清楚），React-Native入门与实践，Linux私房菜基础学习。还有一些杂书，将来的你一定会感谢现在拼命的自己，还有leanIn还有优秀的人都敢于对自己下狠手，天才在左，疯子在右(没看完),无非是一些打鸡血的书，偶尔喝喝鸡汤。还考了一次六级。还写了开题报告。写了论文。也感觉到毕业快临近了。&lt;br&gt;鼓励我学习的动力就是软院的厉害的小伙伴，都是拿到大SPoffer，各种奖学金，还认识了好多比我年纪小还比我厉害好多的人，认识这些牛人的方式就是通过他们的个人博客，有个女生才大三，PAT刷分超高，代码什么都很强，算了，直接上博客：&lt;a href=&quot;https://www.liuchuo.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.liuchuo.net&lt;/a&gt;,还有一些94，95，96年的都很厉害额。感觉就是比你小还比你厉害，比你厉害的人还比你努力，就是这种。。感觉大家都不仅会iOS还一直在往各个方向发展，比如学习Docker还有swift还有一些weex还有一个直接转JAVA了。&lt;/p&gt;
&lt;h1 id=&quot;生活&quot;&gt;&lt;a href=&quot;#生活&quot; class=&quot;headerlink&quot; title=&quot;生活&quot;&gt;&lt;/a&gt;生活&lt;/h1&gt;&lt;p&gt;生活上感觉在学校的时候就是和同学舍友很多，大家一起，不会无聊，很好玩，一起学习，一起鼓励，挺好的。&lt;br&gt;在上海的时候就是合租，三室一厅的，舍友都很好，然后有一段时间自己看到自律的文章，然后就开始早上6点半起，晚上11点半睡觉，坚持了一个半月，还学会了自己做饭，那段时间还在网上买了RN的视频和书，感觉效率很高呐，基本就是早起做饭偶尔跑步，然后洗澡，上班，然后下班也早，回家做饭，然后学习，看视频，写代码，那段时间还听怀念的，然后周末还双休，基本上周日还可以和一些教会的朋友聚一起，在上海认识了很多的朋友，感觉那段时间还挺好的。&lt;br&gt;之后回学校了就起晚了，睡得也迟了很多。都在12点以后睡了。早上8点多起。但是办了健身卡，坚持游泳了一个月，也差不多学会游泳了，就是50米的泳道要停一次，哈哈，也是因为一次在忽然感觉胸口很疼，就去办了健身卡在公司旁边，争取每周能去一次，偶尔还和公司的同事一起打球。至于恋爱方面额。。。我就不说了。。哈哈哈&lt;/p&gt;
&lt;p&gt;自己都快忘了这一年去过哪里了。还好朋友圈帮你记得那些小事。去年还去过深圳和香港还有厦门鼓浪屿玩过。今年去了北京面试见了很多同学去故宫玩了下还，然后去上海工作逛了好多地方。去了ChinaJoy。大部分都是动漫游戏还有一些高科技。还有公司两次团建，一次去了苏州，一次去了南通。住的都是豪华酒店。还部门团建了几次。在上海还逛了各种的商场，不得不说上海真的是魔都呐，几步就是一个商场。各种活动都有，去听了一次简单生活音乐节。反正只要你感兴趣的，上海都能满足你。就是花费有点大。攒不下钱。后来回杭州听了一次杰伦演唱会。也算满足了我一个小目标。毕竟去唯品会就是因为自己在上面经常剁手好多。并且特别喜欢杰伦。&lt;br&gt;总的来说这一年的生活还是丰富多彩而且还是充实的。&lt;br&gt;在8月份的时候我又洗礼了一次。心里的洗礼就算是再次受洗了。就是一名基督徒。希望以后的生活神都能继续带领帮助我，赐我智慧。  &lt;/p&gt;
&lt;h1 id=&quot;新的一年的规划&quot;&gt;&lt;a href=&quot;#新的一年的规划&quot; class=&quot;headerlink&quot; title=&quot;新的一年的规划&quot;&gt;&lt;/a&gt;新的一年的规划&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;新的一年就快要毕业了，把论文再改一下，毕业。&lt;/li&gt;
&lt;li&gt;学习上能够开始更加深入的学习JavaScript因为感觉自己JavaScript基础还是不行额。。&lt;/li&gt;
&lt;li&gt;还对Python有了兴趣，都说Python大法好，脚本跑的溜，尤其是最近比较火的微信跳一跳，跑的都说Python的脚本，对于自动化测试APP，还有机器学习也用到了Python，恩，学起来。&lt;/li&gt;
&lt;li&gt;多读几本书把，希望能多多点书，扩展一下视野和软技能，还有心理学还有理财方面的书希望能多读点。能及时的调节自己的心态和与人相处。提高一下自己的情商。&lt;/li&gt;
&lt;li&gt;对于股票还有区块链希望也能有所了解了再下水。&lt;/li&gt;
&lt;li&gt;有时间还是要研究一下一些源码，争取能写出来写东西，可以有东西开源在GitHUB上。这是很大的目标。。感觉写iOS框架的那些人一定是读了很多的书，看过很多的源码和写过很多的源码。&lt;/li&gt;
&lt;li&gt;提高学习效率，提高工作效率，节省下来时间可以出去旅游，健身，游泳。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;感想&quot;&gt;&lt;a href=&quot;#感想&quot; class=&quot;headerlink&quot; title=&quot;感想&quot;&gt;&lt;/a&gt;感想&lt;/h1&gt;&lt;p&gt;真正的年终获取只有在年终奖评定的时候你才意识到，年终奖既是对你工作的考核也是对你工作的鼓励。&lt;/p&gt;
&lt;p&gt;一些启示：不要想着薪资多少，赚多少钱，你必须全身心的把你的工作做好。如何才能把你的工作做好呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多接一些重大的任务和需求，并且强迫自己去完成，在唯品会的时候就是没人指导我，但是要我开始做RN，我真的什么都不会，然后去学习，然后自己思考就完成了一个初步的作品。有压力才能有动力，你不能让自己呆在一个舒适的区域。或者是你熟悉的区域，这样你不会进步，甚至在退步。&lt;/li&gt;
&lt;li&gt;有的时候要是自己的心思不在工作上，或者是我有段时间就在忙论文，心思完全不能投入到工作上，自然工作上有很多东西都没能做好，因此年终奖也没拿到。&lt;/li&gt;
&lt;li&gt;毕业的前三年是你拼搏奋斗的最佳时期。一定要把握住这段时间，如果是单身的话，尤其要专心在学习上，虽然走出了学校，学校只能带给你的是继续学习的习惯和持续学习不断思考的能力的培养，学校的一草一米你都带不走。&lt;/li&gt;
&lt;li&gt;虽然是在工作也时常要有危机感，要多学习总结面试题，并且在写业务或者是做业务的时候要多思考。&lt;/li&gt;
&lt;li&gt;社会上的人，虽然就算在同一个地方工作，也是处在不同的位置上的，这个位置可能是因为一个是老板，一个是员工，也可能是不同年限的员工，但是不要被这些束缚了你的思想，能束缚你思想限制你发展的只有你自己，你要相信只要努力从打工者也能变成老板，你要相信过去的已经成为了过去，未来才是你更应该把握的。你要相信不论你是处在社会的哪里，竞争和压力从来没有减少。不进步就代表着后退，落后就会被淘汰。6.刚工作的时候不要把薪资看的太重，不然人会变得容易浮躁，你不能真正的投入到工作中去。&lt;br&gt;7。那些真正创业成功或者创办大企业的人，比如BAT的CEO把，他们创业的初期绝对不是想着要赚多少钱，而是想要真正的去做一些事，想去实现自己的想做的事情，想去完成的事情，就是这种执着和坚持铸就了他们的成功。而作为一个打工的人，你不要想着自己的打工者，当你有主人翁的心态，当你真正的想去实现自己的价值，想去实现一些东西的时候，你才能够真正的去做一些事情，钱只是随之而来的东西，而不是你费劲心机获得的。&lt;br&gt;8.就像我有一段时间特别的想在股票中赚钱，但是我始终都没有入市，我发现在股票大涨的12月底1月份，我买的几只股票并没有赚很多，反而花费了我很多的精力。然后股票开始大跌了。尴尬。投资这个东西，没钱怎么投资。没有头脑怎么投资。不然都是被割韭菜额。&lt;br&gt;9.大公司和小公司的区别：大公司不论做什么事情都会有很多的流程，然后很多的审批，很多时候你需要做好你的一部分就好了。就算你真的做出来什么东西了。你报告给你的上级基本你有什么功劳领导也不会知道。但是你在小公司只要你全身心的投入工作，基本大家都能看的见，老板也看得见，如果你真的做的好有能力的话晋升很快的。&lt;br&gt;不论是在大公司还是小公司，是金子总会发光的，但是如果不论在哪里，如果你松懈了自己，懒惰了懈怠了，不进步了，不继续学习输入自己，你就会发现自己的能力赶不上自己的工作的要求，或者是你的认知赶不上社会公司或者是技术的发展，你就很容易被淘汰，曾经在学校的时候，我觉得竞争很大，大家都会为了成绩或者是奖学金或者是一些荣誉去竞争或者是觉得压力大，或者是看到周围的同学都很优秀，自己的压力很大，研究生那会儿大家都特别特别的拼命的努力，我感觉自己比起他们的努力还差的很多。到了社会上你更会发现压力和竞争从来就没有减少过，减少的只是你自己的观点和自己的懈怠。基本上你的思想或者是语言或者是行为很容易的表现在工作上，如果你对公司的态度一天天的不好，那你的一些怨言和情绪就会一天天的增多，累计下来就会爆发到离职，就像是夫妻相处有什么问题不及时解决的话，慢慢日积月累很容易爆发的。所以，不论你在哪里，最重要的就是说积极向上的话，你需要不断的告诉自己你所在的公司很厉害很好很棒，告诉自己，自己很棒很厉害，可以完成很多艰巨的任务。只有这样你的工作的热情才能不断的上涨。你的工作的动力才有，你也才能更好的为公司服务，也才能更好的做好自己的工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有一些值得我去的学习的同学和老师的博客：&lt;/p&gt;
&lt;p&gt;雷雷老师：&lt;a href=&quot;http://www.liqilei.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.liqilei.com/&lt;/a&gt;&lt;br&gt;小苾：&lt;a href=&quot;http://bealin.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bealin.github.io/&lt;/a&gt;&lt;br&gt;峰神: &lt;a href=&quot;http://blog.csdn.net/chenyufeng1991&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/chenyufeng1991&lt;/a&gt;&lt;br&gt;松神： &lt;a href=&quot;http://lysongzi.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lysongzi.com/&lt;/a&gt;&lt;br&gt;李克西：&lt;a href=&quot;http://www.krselee.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.krselee.com/&lt;/a&gt;&lt;br&gt;bestswifter：&lt;a href=&quot;https://bestswifter.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://bestswifter.com/&lt;/a&gt;&lt;br&gt;冬瓜：&lt;a href=&quot;http://www.desgard.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.desgard.com/&lt;/a&gt;&lt;br&gt;方春：&lt;a href=&quot;https://www.jonyfang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jonyfang.com/&lt;/a&gt;&lt;br&gt;冰霜：&lt;a href=&quot;https://www.halfrost.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.halfrost.com/&lt;/a&gt;&lt;br&gt;Joy___: &lt;a href=&quot;https://www.jianshu.com/u/9c51a213b02e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jianshu.com/u/9c51a213b02e&lt;/a&gt;&lt;br&gt;Jim ：&lt;a href=&quot;http://kuailejim.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://kuailejim.com/&lt;/a&gt;&lt;br&gt;draveness: &lt;a href=&quot;https://draveness.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://draveness.me&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还有最近比较火的区块链，可以去看看李笑来的一些书和公众号：&lt;a href=&quot;http://zhibimo.com/read/xiaolai/reborn-every-7-years/Preface.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zhibimo.com/read/xiaolai/reborn-every-7-years/Preface.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后一句：读万卷书不如行万里路，行万里路不如阅人无数，阅人无数不如跟着成功人的脚步。希望我也能更紧成功人的脚步，早日脱贫脱单。哈哈哈。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;终于有时间写一下年终总结和新年展望了。我们总是忙着走路，却忘了当初出发的目的。勿忘初心，方得始终。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReactNative中使用Redux</title>
    <link href="http://peilinghui.com/2017/12/12/ReactNative%E4%B8%AD%E4%BD%BF%E7%94%A8Redux/"/>
    <id>http://peilinghui.com/2017/12/12/ReactNative中使用Redux/</id>
    <published>2017-12-12T15:14:35.000Z</published>
    <updated>2017-12-13T14:33:32.000Z</updated>
    
    <content type="html">&lt;p&gt;使用Redux也有一段时间了。总结一下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;为什么要使用Redux?&lt;br&gt;背景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RN的state（可变，子组件不可见）和props（不可变，子组件可见）的设计，在面对大型项目时候，容易因为不经意修改state造成状态混乱，组件渲染错误&lt;/li&gt;
&lt;li&gt;RN使用了Virtual DOM，不需要Target绑定-&amp;gt;Action修改UI属性，只要当状态变化，render新状态下的组件，数据单向传递，而MVC的设计模式存在双向数据流。&lt;/li&gt;
&lt;li&gt;RN不易进行测试，Redux提供了非常方便的mock测试方式。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Redux开发&quot;&gt;&lt;a href=&quot;#Redux开发&quot; class=&quot;headerlink&quot; title=&quot;Redux开发&quot;&gt;&lt;/a&gt;Redux开发&lt;/h1&gt;&lt;h2 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;p&gt;安装Redux：  ‘npm install –save redux’&lt;br&gt;安装React Native和Redux绑定库：npm install –save react-redux&lt;br&gt;安装Redux Thunk异步Action中间件：npm install –save redux-thunk&lt;/p&gt;
&lt;h2 id=&quot;三个原则&quot;&gt;&lt;a href=&quot;#三个原则&quot; class=&quot;headerlink&quot; title=&quot;三个原则&quot;&gt;&lt;/a&gt;三个原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单一数据源&lt;br&gt;  整个应用的 state 被储存在一个对象树中，对象树存在于唯一的 store 中。store中的 state 绑定到组件&lt;/li&gt;
&lt;li&gt;State 是只读的&lt;br&gt;  惟一改变 state 的方法就是触发 action。action 是一个含有 type 属性的普通JS对象，type 可以用常量表示事件。&lt;/li&gt;
&lt;li&gt;使用纯函数来执行修改&lt;br&gt;  编写 reducers 来描述对应action如何修改 state 。一般可以用 switch(action.type) 来处理，无副作用&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;react-redux提供了connect和Provider。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Provider是顶层的分发点，属性就是Store，将State分发给所有被connect的组件&lt;br&gt;2.connect：接受两个参数：一个是mapStateToProps或者mapDispatchToProps，一个是要绑定的组件本身。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Store&quot;&gt;&lt;a href=&quot;#Store&quot; class=&quot;headerlink&quot; title=&quot;Store&quot;&gt;&lt;/a&gt;Store&lt;/h3&gt;&lt;p&gt;Store 就是把 Reducer 和 action 联系到一起的对象。Store 有以下职责：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维持应用的 state–类似数据库，存储应用的所有state。&lt;/li&gt;
&lt;li&gt;提供 getState() 方法。获取 所有的当前state；&lt;/li&gt;
&lt;li&gt;提供 dispatch(action) 方法更新 state，相当于存入数据库，存入action来改变state。&lt;/li&gt;
&lt;li&gt;通过 subscribe(listener) 注册监听器。&lt;br&gt;Store本质上是一个对象，它以树的形式保存了整个应用的State。并提供了一些方法。例如getState( ) 和 dispatch( )。&lt;br&gt;Redux应用只有惟一一个Store。&lt;br&gt;Store通过createStore方法来创建，根据整个应用的根Reducer的初始State。&lt;br&gt;代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; createStore, applyMiddleware &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; thunk &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux-thunk&#39;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//异步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; reducers &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./reducers&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Store = applyMiddleware(thunk)(createStore)(reducers);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Store;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Reducers&quot;&gt;&lt;a href=&quot;#Reducers&quot; class=&quot;headerlink&quot; title=&quot;Reducers&quot;&gt;&lt;/a&gt;Reducers&lt;/h3&gt;&lt;p&gt;Action只是描述了有事情发生了这一事实，并没有指明应用如何更新state。这是reducer要做的事情。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reducer的本质是一个函数，并且是一个纯函数。没有任何副作用。简单来讲Reducer只负责做一件事，就是根据接收到的action和state来修改Store中的state：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(state, action) =&amp;gt; newState  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一般实现的时候，通过switch(action.type) 来判断不同的Action，default为旧state。同时可以定义初始状态。&lt;/li&gt;
&lt;li&gt;代码：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; combineReducers &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &#39;redux&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const newState = (&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt; = &amp;#123;&amp;#125;, action = &amp;#123;&amp;#125;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  switch (action.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case ActionTypes.CSTATE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &amp;#123; ...&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;, ...action.&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case &#39;_DPDATACHANGE_&#39;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &amp;#123;...&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;, ...action.dpState&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Reducer 合并&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; combineReducers(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  newState,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意:返回的是新state，如果需要保留部分旧state值，使用…state（ES7的对象展开语法，对对象会浅拷贝对应属性，这里等价于Object.assign({}, state, newState)），而如果合并state的话只会合并一层，对复杂state需要手动合并。&lt;/p&gt;
&lt;h3 id=&quot;Action&quot;&gt;&lt;a href=&quot;#Action&quot; class=&quot;headerlink&quot; title=&quot;Action&quot;&gt;&lt;/a&gt;Action&lt;/h3&gt;&lt;p&gt;Action是一个普通JS对象，至少包括一个type属性代表事件，其他属性可以用来传递数据。实践上对一个流程定义一个函数，流程可以包括网络请求，最后返回Action，这个函数叫Action Creator。&lt;br&gt;代码：Store可以dispatch这个Action，action的type表示标识符，state是它携带的数据。&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export const newState = &lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Store.dispatch(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: ActionTypes.CSTATE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;持久化&quot;&gt;&lt;a href=&quot;#持久化&quot; class=&quot;headerlink&quot; title=&quot;持久化&quot;&gt;&lt;/a&gt;持久化&lt;/h4&gt;&lt;p&gt;当触发action时根据其reducer key恢复数据，然后只需要在应用启动时分发action，这也很容易抽象成可配置的拓展服务，实际上三方库redux-persist已经为我们做好了这一切。&lt;br&gt;在Action中可以代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; getStorage = &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (key) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; d = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; AsyncStorage.getItem(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(d);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; setStorage = (key, value) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AsyncStorage.setItem(key, &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(value));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;connect&quot;&gt;&lt;a href=&quot;#connect&quot; class=&quot;headerlink&quot; title=&quot;connect&quot;&gt;&lt;/a&gt;connect&lt;/h3&gt;&lt;p&gt;通过- 提供 getState() 方法。获取 所有的当前state&lt;br&gt;通过connect，绑定需要的state以及Action Creator到你的组件的props上，这样组件就可以通过props来调用Action Creator，或者根据不同props来render()不同的组件。&lt;br&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mapStateToProps(&amp;#123; newState &amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            const &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; = newState[&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;];//&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;: newState.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考：&quot;&gt;&lt;a href=&quot;#参考：&quot; class=&quot;headerlink&quot; title=&quot;参考：&quot;&gt;&lt;/a&gt;参考：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://dreampiggy.com/2016/10/26/react-nativezhi-reduxjia-gou-ru-men/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux架构入门&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.codingplayboy.com/2017/10/31/react-native-app/comment-page-1/#Redux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native App应用架构设计&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使用Redux也有一段时间了。总结一下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React-Native的APP</title>
    <link href="http://peilinghui.com/2017/09/24/React-Native%E7%9A%84APP/"/>
    <id>http://peilinghui.com/2017/09/24/React-Native的APP/</id>
    <published>2017-09-24T13:34:53.000Z</published>
    <updated>2018-07-18T01:43:49.649Z</updated>
    
    <content type="html">&lt;p&gt;从7月底到9月底两个月的时间开发了一个React-Native的APP。不得不说，用RN的开发效率还是很快的。就来总结一下历程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;整个项目的逻辑大概就是： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建项目，导入项目的图片资源，APP的图标，启动图，ios的启动图在Xcode中直接设置Launch Image和icon，对于安卓的启动图要写代码实现才行。对于项目的图片资源，可以两套系统共用一套图片那就可以放在一个文件夹下，引入的时候用相对路径导入；也可以放在Xcode或者是Android Studio中进行uri:+图片名称导入。&lt;/li&gt;
&lt;li&gt;用上一篇的第三方组件和一些基本组件大概完成了一些页面，完成了登录，手势解锁页，还有主页面的框架和主页面中一些子页面的大体显示。接下来遇到的问题大概有两个：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一：如何跳转，把这个页面都串起来，就像一些珠子如何才能串成一串：导航的使用：Navigator已经废弃，就要使用react-naviagtion来导航。&lt;/p&gt;
&lt;p&gt;第二：如何进行数据处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是如何从服务器获取数据.&lt;/li&gt;
&lt;li&gt;是如何把从服务器获取的数据进行持久化存储。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何在页面间进行参数的传递&lt;br&gt;对于数据的处理也是难点。&lt;br&gt;首先对于网络请求要用fetch，&lt;br&gt;遇到的相关问题：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取设备ID：用第三方库，补充：JS中如何把字符串中的?替换为&amp;amp;:&lt;br&gt;&lt;code&gt;var str_replaced = str.replace(/\?/g,&amp;quot;&amp;amp;&amp;quot;);//加g就是替换所有的？号&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;React-Natvie用RSA加密用户的密码:&lt;br&gt;&lt;a href=&quot;https://github.com/z-hao-wang/react-native-rsa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-rsa&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rzcoder/node-rsa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-rsa&lt;/a&gt;&lt;br&gt;虽然有这些第三方库，但是我并没有用，这个简直搞到我头大，终于搞定了！&lt;br&gt;主要是参照这两个网址：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/Grart/p/5080228.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Grart/p/5080228.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;node-rsa的基础库&lt;/strong&gt;&lt;a href=&quot;http://www-cs-students.stanford.edu/~tjw/jsbn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www-cs-students.stanford.edu/~tjw/jsbn/&lt;/a&gt;&lt;br&gt;因为密码需要先用公钥RSA加密，然后在用base64加密，加密以后的字符串传给服务器，服务器那边再先base64解密，然后再用私钥解密。&lt;br&gt;在使用的时候最大的问题就是你要传一个N和E的参数来setPublic，这个问题困扰了我一天之久，终于后端的同学帮我搞定了，Java里面有方法可以根据已有的公钥来逆向出N和E的值，然后再使用下面的那个网页，网页，没错，就是下载下来那个网页，然后就有基本的JS文件了，其实RN就是JS，只怪自己前端不佳，然后把JS文件转化成RN可以用的JS组件库导入直接调用就可以加密成功了！终于加密成功了。感动哭。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置假数据显示一般来说都是容易的，与后台交互就需要用网络请求了。一般是GET和POST请求。POST的请求头：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般常见的网络请求：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; login=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data,doSuccess,doError&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fetch(&lt;span class=&quot;string&quot;&gt;&#39;http://&#39;&lt;/span&gt;+url+&lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          method: &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          headers: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;Accept&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          body: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response.json();&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resData&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doSuccess(resData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .done();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而我们这个post请求头呢？是下面这样的。&lt;/p&gt;
&lt;figure class=&quot;highlight ocaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;Content&lt;/span&gt;-&lt;span class=&quot;type&quot;&gt;Type&#39;&lt;/span&gt;:&lt;span class=&quot;symbol&quot;&gt;&#39;application&lt;/span&gt;/x-www-form-urlencoded&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般在post的body中是用：&lt;br&gt;{userName:this.state.userName,passWord:_pwd}这样的JSON传过去，再body: JSON.stringify(data)。。。&lt;br&gt;而我们这个呢？data是拼接起来的，我也是醉了，这我是用Charles发请求后才发现的，也是折腾了半天才明白的。也用postman还有终端httpie发现都可以请求成功，唯独用这个请求不到，后来就拼接了一下，成功了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JSON.stringify(result);和JSON.parse(result)有什么区别啊？&lt;br&gt;用于把JavaScript对象序列化为JSON字符串和把JSON字符串解析为原生JavaScript。&lt;br&gt;JSON.stringify将JavaScript对象转换为JSON文本，并将该JSON文本存储在字符串中。&lt;br&gt;JSON.parse将一串JSON文本转换成Javascript对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当你在fetch请求后 .then((response)=&amp;gt; response.json())的时候就不用解析直接用.取。。。&lt;br&gt;当你在fetch请求后， .then((response) =&amp;gt; response.text())的时候就需要JSON.parse(result);&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初学者最容易犯错误的地方就是this指针了！！我是在导航跳转的时候意识到这个问题的。每个组件都是有props和states的。&lt;br&gt;子组件如何调用父组件：this.props。&lt;br&gt;父组件如何调用子组件：首先用属性ref给子组件取个名字吧，this.refs.名字.getDOMNode().&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从服务返回的JSON数据的解析，有些需要遍历一下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; brandata = &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;.dangqiAnalysisBrandList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; brandeach=brandata.map((val) =&amp;gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; val[&#39;dangqiAnalysisList&#39;] &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;安卓打包&quot;&gt;&lt;a href=&quot;#安卓打包&quot; class=&quot;headerlink&quot; title=&quot;安卓打包&quot;&gt;&lt;/a&gt;安卓打包&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;生成一个签名密钥&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后它会生成一个叫做my-release-key.keystore的密钥库文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;找到路径/android/app/src/main，并在该目录下新建assets文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在工程目录下将index.android.bundle下载并保存到assets资源文件夹中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;curl -k &amp;quot;http://localhost:8081/index.android.bundle&amp;quot; &amp;gt; android/app/src/main/assets/index.android.bundle&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这句命令是重点，如果assets目录中不存在该文件，则打包的apk在执行时显示空白。&lt;/p&gt;
&lt;p&gt;Protocol ‘http not supported or disabled in libcurl&lt;/p&gt;
&lt;p&gt;Windows下安装使用curl命令:&lt;a href=&quot;http://jingyan.baidu.com/article/a681b0dec4c67a3b1943467c.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jingyan.baidu.com/article/a681b0dec4c67a3b1943467c.html&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加gradle的android keystore配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打包的apk在未签名的情况下,在手机中（非root）是不允许安装的&lt;/p&gt;
&lt;p&gt;在build.gradle文件中&lt;/p&gt;
&lt;p&gt;  //签名&lt;br&gt;&lt;code&gt;signingConfigs{
    release {
        storeFile file(&amp;quot;/my-release-key.keystore&amp;quot;)
        storePassword &amp;quot;密码&amp;quot;
        keyAlias &amp;quot;keyAlias的名字&amp;quot;
        keyPassword &amp;quot;密码&amp;quot;
    }
}
 buildTypes {
    release {
        minifyEnabled false
        proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
        signingConfig signingConfigs.release //添加这句话引用签名配置
    }
}&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启用Proguard代码混淆来缩小APK文件的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Proguard是一个Java字节码混淆压缩工具，它可以移除掉React Native Java（和它的依赖库中）中没有被使用到的部分，最终有效的减少APK的大小。&lt;/p&gt;
&lt;p&gt;重要：启用Proguard之后，你必须再次全面地测试你的应用。Proguard有时候需要为你引入的每个原生库做一些额外的配置。参见app/proguard-rules.pro文件。&lt;/p&gt;
&lt;p&gt;def enableProguardInReleaseBuilds = true&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在/android/目录中执行gradle assembleRelease命令，打包后的文件在 android/app/build/outputs/apk目录中，例如app-release.apk。如果打包碰到问题可以先执行 gradle clean 清理一下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一定要注意：在打包的时候要运行起来安卓。&lt;br&gt;安装gradle工具（版本与android\gradle\wrapper下的一致），并配置环境变量，配置GRADLE_HOME到你的gradle根目录当中，然后把%GRADLE_HOME%/bin（linux或mac的是$GRADLE_HOME/bin）加到PATH的环境变量。&lt;br&gt;mac要配置gradle的环境变量的路径&lt;/p&gt;
&lt;p&gt;配置完成之后，运行gradle -v，检查一下是否安装无误&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将apk发布到各大应用市场（BUILD SUCCESSFUL）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;iOS打包&quot;&gt;&lt;a href=&quot;#iOS打包&quot; class=&quot;headerlink&quot; title=&quot;iOS打包&quot;&gt;&lt;/a&gt;iOS打包&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在项目的目录下建立bundle文件夹。然后执行如下命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;react-native bundle --entry-file index.ios.js --platform ios --bundle-output ./bundle/main.jsbundle --dev false --assets-dest ./bundle/&lt;/code&gt;&lt;br&gt;几分钟过后，在 bundle 文件夹里会多出个 assets 文件夹和 main.jsbundle 文件。不然会提示npm install…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把刚刚得到的 main.jsbundle 和 assets 文件夹添加到项目中， 在 Xcode 中 assets 资源文件夹比较特殊，必须用 Create folder references 的方式添加进去，添加完后是蓝色文件夹图标.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改 AppDelegate.m 文件&lt;br&gt;在XCODE里打开 APPDELEGATE.M 文件，找到代码 JSCODELOCATION = [[RCTBUNDLEURLPROVIDER SHAREDSETTINGS]，在其下方添加以下代码 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&amp;quot;main&amp;quot; withExtension:@&amp;quot;jsbundle&amp;quot;];&lt;/code&gt;&lt;br&gt;注意：代码里的 @”main” 和 @”jsbundle”，与之前生成的文件 main.jsbundle 对应。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在XCODE里点击运行，使用模拟器测试APP能否正常运行。&lt;/li&gt;
&lt;li&gt;和在Xcode里面打包原生应用一样的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;打包遇到的问题&quot;&gt;&lt;a href=&quot;#打包遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;打包遇到的问题&quot;&gt;&lt;/a&gt;打包遇到的问题&lt;/h1&gt;&lt;h3 id=&quot;native-echarts的组件问题-—–真机上面React-echart显示不了吗？白色的。&quot;&gt;&lt;a href=&quot;#native-echarts的组件问题-—–真机上面React-echart显示不了吗？白色的。&quot; class=&quot;headerlink&quot; title=&quot;native-echarts的组件问题 —–真机上面React-echart显示不了吗？白色的。&quot;&gt;&lt;/a&gt;native-echarts的组件问题 —–真机上面React-echart显示不了吗？白色的。&lt;/h3&gt;&lt;p&gt;主要是因为路径不对。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;br&gt;将node_modules/native-echarts/src/components/Echarts/tpl.html拷贝到assets下需要修改node_modules/native-echarts/src/components/Echarts/index.js&lt;br&gt;&lt;strong&gt;IOS&lt;/strong&gt;&lt;br&gt; 将tpl.html  放置  Xcode项目 下面 然后如下引用,修改源码下面的index.js&lt;br&gt; 为下面的：&lt;/p&gt;
 &lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; import &lt;span class=&quot;constant&quot;&gt;React&lt;/span&gt;, &amp;#123; &lt;span class=&quot;constant&quot;&gt;Component&lt;/span&gt; &amp;#125; from &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; &lt;span class=&quot;constant&quot;&gt;WebView&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;View&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;StyleSheet&lt;/span&gt; &amp;#125; from &lt;span class=&quot;string&quot;&gt;&#39;react-native&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import renderChart from &lt;span class=&quot;string&quot;&gt;&#39;./renderChart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import echarts from &lt;span class=&quot;string&quot;&gt;&#39;./echarts.min&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export default &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  componentWillReceiveProps(nextProps) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nextProps.option !== this.props.option) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.refs.chart.reload();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;constant&quot;&gt;View&lt;/span&gt; style=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;symbol&quot;&gt;flex:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;height:&lt;/span&gt; this.props.height || &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,&amp;#125;&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;constant&quot;&gt;Platform&lt;/span&gt;.&lt;span class=&quot;constant&quot;&gt;OS&lt;/span&gt;===&lt;span class=&quot;string&quot;&gt;&#39;ios&#39;&lt;/span&gt;?(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;lt;&lt;span class=&quot;constant&quot;&gt;WebView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               ref=&lt;span class=&quot;string&quot;&gt;&quot;chart&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               scrollEnabled = &amp;#123;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               injectedJavaScript = &amp;#123;renderChart(this.props)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               style=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;symbol&quot;&gt;height:&lt;/span&gt; this.props.height || &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               source=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;symbol&quot;&gt;uri:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;tpl.html&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       ):(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;lt;&lt;span class=&quot;constant&quot;&gt;WebView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               ref=&lt;span class=&quot;string&quot;&gt;&quot;chart&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               scrollEnabled = &amp;#123;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               injectedJavaScript = &amp;#123;renderChart(this.props)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               style=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;symbol&quot;&gt;height:&lt;/span&gt; this.props.height || &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               source=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;symbol&quot;&gt;uri:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;file:///android_asset/tpl.html&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       )&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;真机测试时候发现的问题&quot;&gt;&lt;a href=&quot;#真机测试时候发现的问题&quot; class=&quot;headerlink&quot; title=&quot;真机测试时候发现的问题&quot;&gt;&lt;/a&gt;真机测试时候发现的问题&lt;/h1&gt;&lt;h3 id=&quot;react-navigation的问题：&quot;&gt;&lt;a href=&quot;#react-navigation的问题：&quot; class=&quot;headerlink&quot; title=&quot;react-navigation的问题：&quot;&gt;&lt;/a&gt;react-navigation的问题：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ios上面：&lt;br&gt;手势左边滑动就能返回到上一个页面，这样在你不需要返回的时候也返回了。&lt;br&gt;解决方法：&lt;br&gt;gesturesEnabled：是否支持滑动返回收拾，iOS默认支持，安卓默认关闭。设置为false试了一下。&lt;br&gt;参照文章：&lt;a href=&quot;https://hans007.github.io/react-native/2017/06/19/react-navigation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hans007.github.io/react-native/2017/06/19/react-navigation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android上面：物理返回键的处理。&lt;br&gt;BackAndroid已经废弃了，使用BackHandler，大概思路就是添加监听，&lt;br&gt;之前使用Navigator的时候，可以通过下面的方法实现监听安卓的返回键，但使用了react-navigation后，会很迷茫，不知该怎么监听了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决办法：集成Redux咯！集成完Redux，在跳转之后，就能获得路由的length，可以通过length来判断当前页面是第几层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Navigator的方法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentWillMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BackAndroid.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;hardwareBackPress&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentWillUnmount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BackAndroid.removeEventListener(&lt;span class=&quot;string&quot;&gt;&#39;hardwareBackPress&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;onBackAndroid&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const nav = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.navigator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const routers = nav.getCurrentRoutes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (routers.length &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nav.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;react-navigation的方式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentWillMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BackHandler.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;handwareBackPress&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentWillUnmount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BackHandler.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;handwareBackPress&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;onBackAndroid&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const routers = nav.getCurrentRoutes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (routers.length &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 在跳转之后的页面中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;onBackAndroid&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;=&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const &amp;#123;routes&amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(routes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; alert(routes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (routes.length &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 因为其他页面获得不到&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props，所以只能每个页面都写这个方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.navigation.goBack();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;其他小问题&quot;&gt;&lt;a href=&quot;#其他小问题&quot; class=&quot;headerlink&quot; title=&quot;其他小问题&quot;&gt;&lt;/a&gt;其他小问题&lt;/h3&gt;&lt;p&gt; 需要把服务器取过来的数字(也有可能是数字字符串)，将小数点前的数字每隔三位添加一个逗号（前面数是一个四位数的值）。比如取到的值是123456，要将其转换成123,456。搜索了一下，这叫数字分位符号。&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;代码量：近1万行，调通近40个接口。还有很多方面要优化，比如没有用Redux。还有一些其他方面的逻辑也有待优化。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从7月底到9月底两个月的时间开发了一个React-Native的APP。不得不说，用RN的开发效率还是很快的。就来总结一下历程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReactNative的常用组件</title>
    <link href="http://peilinghui.com/2017/07/27/ReactNative%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://peilinghui.com/2017/07/27/ReactNative的常用组件/</id>
    <published>2017-07-27T02:16:21.000Z</published>
    <updated>2017-08-19T03:08:25.000Z</updated>
    
    <content type="html">&lt;p&gt;在开发RN的时候所需用的常用开源组件。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;IDE&quot;&gt;&lt;a href=&quot;#IDE&quot; class=&quot;headerlink&quot; title=&quot;IDE&quot;&gt;&lt;/a&gt;IDE&lt;/h1&gt;&lt;p&gt;刚开始开发的时候用的是Webstrom或者是Sublime，后来发现一个超级IDE：&lt;br&gt;&lt;a href=&quot;https://www.decoide.org/docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.decoide.org/docs&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除了官方文档的一些常用组件，还有一些在项目开发中的常用组件。&lt;/p&gt;
&lt;h1 id=&quot;常用组件&quot;&gt;&lt;a href=&quot;#常用组件&quot; class=&quot;headerlink&quot; title=&quot;常用组件&quot;&gt;&lt;/a&gt;常用组件&lt;/h1&gt;&lt;h2 id=&quot;获取设备相关信息&quot;&gt;&lt;a href=&quot;#获取设备相关信息&quot; class=&quot;headerlink&quot; title=&quot;获取设备相关信息&quot;&gt;&lt;/a&gt;获取设备相关信息&lt;/h2&gt;&lt;p&gt;设备deviceID：&lt;a href=&quot;https://github.com/rebeccahughes/react-native-device-info&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-device-info&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h2&gt;&lt;p&gt;手势解锁：&lt;a href=&quot;https://github.com/spikef/react-native-gesture-password&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gesture-password&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面那个经过测试不好用,用这个：&lt;br&gt;&lt;strong&gt;大小手势解锁：&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/react-native-component/react-native-smart-gesture-password&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-smart-gesture-password&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Touch id指纹解锁：&lt;a href=&quot;https://github.com/naoufal/react-native-touch-id&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;touch-id&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搜索框：&lt;a href=&quot;https://github.com/umhan35/react-native-search-bar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ios可以用的搜索框&lt;/a&gt;&lt;br&gt;&lt;strong&gt;好看的搜索Box：&lt;/strong&gt;：&lt;a href=&quot;&quot;&gt;react-native-search-box&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h2&gt;&lt;p&gt;底部tab组件：&lt;a href=&quot;https://github.com/happypancake/react-native-tab-navigator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-tab-navigator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;侧滑栏：&lt;/strong&gt;&lt;a href=&quot;https://github.com/react-native-community/react-native-side-menu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;side-Menu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顶部tab的滑动&lt;/strong&gt;：&lt;a href=&quot;https://github.com/skv-headless/react-native-scrollable-tab-view&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;scrollable-tab-view&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提示框toast：&lt;a href=&quot;https://github.com/magicismight/react-native-root-toast&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;toast&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下拉刷新组件 &lt;a href=&quot;https://github.com/jsdf/react-native-refreshable-listview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jsdf/react-native-refreshable-listview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模态框 &lt;a href=&quot;https://github.com/brentvatne/react-native-modal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/brentvatne/react-native-modal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;react-native-navbar &lt;a href=&quot;https://github.com/react-native-fellowship/react-native-navbar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/react-native-fellowship/react-native-navbar&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;下拉选择菜单：&lt;/strong&gt;&lt;a href=&quot;https://github.com/WheelerLee/react-native-dropdown-menu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dropdown-menu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;折线图，柱状图，条形图：&lt;a href=&quot;https://github.com/somonus/react-native-echarts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-echarts&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;日历&quot;&gt;&lt;a href=&quot;#日历&quot; class=&quot;headerlink&quot; title=&quot;日历&quot;&gt;&lt;/a&gt;日历&lt;/h1&gt;&lt;p&gt;发现超好用还好看的日历组件：&lt;a href=&quot;https://github.com/xgfe/react-native-datepicker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;datepicker&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在开发RN的时候所需用的常用开源组件。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS应用APP架构</title>
    <link href="http://peilinghui.com/2017/07/14/iOS%E5%BA%94%E7%94%A8APP%E6%9E%B6%E6%9E%84/"/>
    <id>http://peilinghui.com/2017/07/14/iOS应用APP架构/</id>
    <published>2017-07-14T02:54:01.000Z</published>
    <updated>2018-07-25T08:09:54.374Z</updated>
    
    <content type="html">&lt;p&gt;对于网络层的改造其实就相当于iOS应用的APP的架构了，然后就去查了相关的资料。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;发现几篇很好的博文：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/ios-app-arch-part-01?utm_source=infoq&amp;amp;utm_campaign=user_page&amp;amp;utm_medium=link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈（一）：架构设计的方法论&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/ios-app-arch-2-1?utm_source=infoq&amp;amp;utm_campaign=user_page&amp;amp;utm_medium=link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈（二）：View层的组织和调用方案（上）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/ios-app-arch-3-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈（三）：网络层设计方案(上)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://casatwy.com/iOS-Modulization.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈 组件化方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.cnbluebox.com/blog/2015/11/28/module-and-decoupling/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模块化与解耦&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.cnbluebox.com/blog/2015/05/07/architecture-ios-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IOS应用架构思考一（网络层)&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于网络层的改造其实就相当于iOS应用的APP的架构了，然后就去查了相关的资料。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS网络层的封装</title>
    <link href="http://peilinghui.com/2017/07/10/iOS%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>http://peilinghui.com/2017/07/10/iOS网络层的封装/</id>
    <published>2017-07-10T13:26:39.000Z</published>
    <updated>2017-07-13T09:44:38.000Z</updated>
    
    <content type="html">&lt;p&gt;对于项目的重构，很重要的就是对网络层的重构，其实也就是对AFN的二次封装。对于AFN的介绍在前一篇：&lt;a href=&quot;&quot;&gt;研究AFNetworking框架&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;AFN2.0是基于NSURLConnection封装的。而AFN3.0是基于NSURLSession封装的。(NSURLSession是iOS7推出的是为了取代NSURLConnection的)。&lt;/p&gt;
&lt;h1 id=&quot;关于AFN3-0&quot;&gt;&lt;a href=&quot;#关于AFN3-0&quot; class=&quot;headerlink&quot; title=&quot;关于AFN3.0&quot;&gt;&lt;/a&gt;关于AFN3.0&lt;/h1&gt;&lt;h2 id=&quot;HTTP协议&quot;&gt;&lt;a href=&quot;#HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议&quot;&gt;&lt;/a&gt;HTTP协议&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;客户端发给服务器的HTTP请求包含了：&lt;br&gt;&lt;strong&gt;请求行&lt;/strong&gt;：请求方法、请求资源路径、HTTP协议版本号&lt;br&gt;GET /index.htm HTTP/1.1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;请求头：&lt;/strong&gt;对客户端环境的描述，客户端请求的主机的地址。&lt;br&gt;HOST: 192.168.1.105：8080&lt;br&gt;User-Agent:MAC或者IPhone （客户端环境）&lt;br&gt;Accept：text/html   (客户端所能接受的数据类型)&lt;br&gt;Accept-Language：zh-cn   （客户端的语言）&lt;/p&gt;
&lt;p&gt;在POST中有&lt;strong&gt;请求体：&lt;/strong&gt;客户端发给服务器的具体数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器返回给客户端的HTTP响应包含了：（NSHTTPUELResponse）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;状态行：&lt;/strong&gt;协议版本、状态码、状态英文名称&lt;br&gt;HTTP/1.1 200 OK&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应头：&lt;/strong&gt;对服务器的描述、对返回数据的描述。&lt;br&gt;Server：Apache             （服务器）&lt;br&gt;Date: Sat,  22:07:00 GMT&lt;br&gt;Content-Length: 500      （返回数据长度）&lt;br&gt;Content-Type: text/html  (返回数据类型)  &lt;/p&gt;
&lt;p&gt;&lt;html&gt;…..&lt;/html&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实体内容：&lt;/strong&gt;服务器返回给客户端的具体数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1436896-f274db501af46b86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2016-11-07 下午4.44.02.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GET与POST&lt;br&gt;GET：所有的请求参数都拼接在URL后面，如果访问资源，向服务器索要数据就是GET请求。URL长度有限，不能发送太多数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST：把所有请求参数放在请求体(HTTPBody)中，发给服务器的长度没有限制，&lt;br&gt;200：请求成功。 400：客户端请求的语法错误，服务器无法解析。&lt;br&gt;404：服务器无法根据客户端的请求找到资源。&lt;br&gt;500：服务器内部错误，无法完成请求。&lt;/p&gt;
&lt;p&gt;URL还要注意对中文的转码：&lt;br&gt;方法：&lt;code&gt;urlString = [urlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何使用-NSURLSession-发出-HTTP-请求&quot;&gt;&lt;a href=&quot;#如何使用-NSURLSession-发出-HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;如何使用 NSURLSession 发出 HTTP 请求&quot;&gt;&lt;/a&gt;如何使用 NSURLSession 发出 HTTP 请求&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.得到session对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURLSession&lt;/span&gt; *session = [&lt;span class=&quot;built_in&quot;&gt;NSURLSession&lt;/span&gt; sharedSession];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *url = [&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; URLWithString:&lt;span class=&quot;string&quot;&gt;@&quot;http://。。。/Server/login&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;NSMutableURLRequest&lt;/span&gt; *request = [&lt;span class=&quot;built_in&quot;&gt;NSMutableURLRequest&lt;/span&gt; requestWithURL:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request&lt;span class=&quot;variable&quot;&gt;.HTTPMethod&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;@&quot;POST&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置请求体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request&lt;span class=&quot;variable&quot;&gt;.HTTPBody&lt;/span&gt; = [&lt;span class=&quot;string&quot;&gt;@&quot;username=123&amp;amp;pwd=123&quot;&lt;/span&gt; dataUsingEncoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置请求头信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[request setValue:&lt;span class=&quot;string&quot;&gt;@&quot;iPhone 6&quot;&lt;/span&gt; forHTTPHeaderField:&lt;span class=&quot;string&quot;&gt;@&quot;User-Agent&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *task = [session dataTaskWithRequest:request completionHandler:^(&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *data, &lt;span class=&quot;built_in&quot;&gt;NSURLResponse&lt;/span&gt; *response, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//系统的解析方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *dict = [&lt;span class=&quot;built_in&quot;&gt;NSJSONSerialization&lt;/span&gt; JSONObjectWithData:data options:&lt;span class=&quot;built_in&quot;&gt;NSJSONReadingMutableLeaves&lt;/span&gt; error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;----%@&quot;&lt;/span&gt;, dict);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3.开始任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[task resume];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;如何使用-AFNetworking-发出-HTTP-请求&quot;&gt;&lt;a href=&quot;#如何使用-AFNetworking-发出-HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;如何使用 AFNetworking 发出 HTTP 请求&quot;&gt;&lt;/a&gt;如何使用 AFNetworking 发出 HTTP 请求&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;manager&lt;span class=&quot;variable&quot;&gt;.responseSerializer&lt;/span&gt; = [AFHTTPResponseSerializer serializer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[manager POST:&lt;span class=&quot;string&quot;&gt;@&quot;http://baidu.com/verification/user/loginNew.htm?token=&amp;amp;random=27289&amp;amp;version=1.19.0&quot;&lt;/span&gt; parameters:dict progress:^(&lt;span class=&quot;built_in&quot;&gt;NSProgress&lt;/span&gt; * _Nonnull downloadProgress) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;请求成功&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;success:^(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; * _Nonnull task, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;  _Nullable responseObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//请求返回的数据(二进制数据)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;responseObject(二进制) = %@&quot;&lt;/span&gt;,responseObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//转化二进制数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;responseObject = %@&quot;&lt;/span&gt;, [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; alloc] initWithData:responseObject encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; oaLoginSuccess];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;failure:^(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; * _Nullable task, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; * _Nonnull   error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,error);  &lt;span class=&quot;comment&quot;&gt;//这里打印错误信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在 iOS9 中，苹果默认全局 HTTPs，如果你要发送不安全的 HTTP 请求，需要在 info.plist 中加入如下键值对才能发出不安全的 HTTP 请求.&lt;br&gt;还有一件事情是要注意的是，AFNetworking 默认接收 json 格式的响应（因为这是在 iOS 平台上的框架，一般不需要 text/html），如果想要返回 html，需要设置 acceptableContentTypes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;AFN中的相应类&quot;&gt;&lt;a href=&quot;#AFN中的相应类&quot; class=&quot;headerlink&quot; title=&quot;AFN中的相应类&quot;&gt;&lt;/a&gt;AFN中的相应类&lt;/h3&gt;&lt;h5 id=&quot;AFURLSessionManager-核心类&quot;&gt;&lt;a href=&quot;#AFURLSessionManager-核心类&quot; class=&quot;headerlink&quot; title=&quot;AFURLSessionManager(核心类)&quot;&gt;&lt;/a&gt;AFURLSessionManager(核心类)&lt;/h5&gt;&lt;p&gt;AFURLSessionManager 是 AFHTTPSessionManager 的父类&lt;br&gt;AFURLSessionManager 负责生成 NSURLSession 的实例，管理 AFSecurityPolicy 和 AFNetworkReachabilityManager，来保证请求的安全和查看网络连接情况，它有一个 AFJSONResponseSerializer 的实例来序列化 HTTP 响应&lt;/p&gt;
&lt;h5 id=&quot;AFHTTPSessionManager&quot;&gt;&lt;a href=&quot;#AFHTTPSessionManager&quot; class=&quot;headerlink&quot; title=&quot;AFHTTPSessionManager&quot;&gt;&lt;/a&gt;AFHTTPSessionManager&lt;/h5&gt;&lt;p&gt;其中 AFHTTPSessionManager 有着自己的 AFHTTPRequestSerializer 和 AFJSONResponseSerializer 来管理请求和响应的序列化，同时依赖父类提供的接口保证安全、监控网络状态，实现发出 HTTP 请求这一核心功能&lt;/p&gt;
&lt;h5 id=&quot;AFURLRequestSerialization&quot;&gt;&lt;a href=&quot;#AFURLRequestSerialization&quot; class=&quot;headerlink&quot; title=&quot;AFURLRequestSerialization&quot;&gt;&lt;/a&gt;AFURLRequestSerialization&lt;/h5&gt;&lt;p&gt;主要用于 AFHTTPSessionManager 中，因为它主要用于修改 HTTP 头部，提供了一些语义明确的接口设置 HTTP 头部字段。HTTP 头部字段 Accept-Language User-Agent&lt;/p&gt;
&lt;h5 id=&quot;AFURLResponseSerialization&quot;&gt;&lt;a href=&quot;#AFURLResponseSerialization&quot; class=&quot;headerlink&quot; title=&quot;AFURLResponseSerialization&quot;&gt;&lt;/a&gt;AFURLResponseSerialization&lt;/h5&gt;&lt;p&gt;处理响应的模块，将请求返回的数据解析成对应的格式。这个模块使用在 AFURLSessionManager 也就是核心类中&lt;/p&gt;
&lt;h3 id=&quot;为什么要对AFN进行二次封装呢？&quot;&gt;&lt;a href=&quot;#为什么要对AFN进行二次封装呢？&quot; class=&quot;headerlink&quot; title=&quot;为什么要对AFN进行二次封装呢？&quot;&gt;&lt;/a&gt;为什么要对AFN进行二次封装呢？&lt;/h3&gt;&lt;p&gt;上面这种写法可维护性差：主要是因为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址是写死的字符串，对于一个应用来说，网络请求的地址通常是统一而且具有规律的。如果大量的请求都用这种写法，那么想要统一进行修改的话就变得很困难。&lt;/li&gt;
&lt;li&gt;没有统一的请求和响应过滤机制。通常客户端开发当中需要对于请求和响应进行一些处理，例如在请求中加入验证字段（如 Token），以验证请求的合法性。&lt;/li&gt;
&lt;li&gt;对 AFNetworking 产生了强依赖，如果要进行网络库的替换，成本会非常高。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;随着应用复杂程度的增加，上面这种在控制层直接对网络请求层进行交互的方式，会产生越来越多的问题。因此有必要通过单独的一层把控制层（业务层）和网络请求层隔离开来，这一层我们暂时把它叫做“网络封装层”。&lt;/p&gt;
&lt;h3 id=&quot;封装的目标&quot;&gt;&lt;a href=&quot;#封装的目标&quot; class=&quot;headerlink&quot; title=&quot;封装的目标&quot;&gt;&lt;/a&gt;封装的目标&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;监测网络状态&lt;/li&gt;
&lt;li&gt;业务层和网络层分离&lt;/li&gt;
&lt;li&gt;处理环境的变化，开发，测试，预发布，发布&lt;/li&gt;
&lt;li&gt;处理GET、POST、下载、上传的操作&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;如何封装&quot;&gt;&lt;a href=&quot;#如何封装&quot; class=&quot;headerlink&quot; title=&quot;如何封装&quot;&gt;&lt;/a&gt;如何封装&lt;/h2&gt;封装主要是把业务层和网络层分开，此次的封装分为三层：&lt;blockquote&gt;
&lt;p&gt;第一层：首先，从应用层ViewController获取参数，这个参数传到第二层的业务Service，在回调中利用网络请求返回的responseModel来显示在页面上。&lt;br&gt;第二层：设置一个BaseService，然后+LoginService。BaseService中主要是配置公有的参数。在每个业务层的Service中设置每一个的接口定义。业务层主要是暴露接口的定义，而BaseService中定义了BaseRequestModel来实现发起请求到第三层Client。&lt;br&gt;第三层：这层就是CLient，由ASI或者AFN充当，发起网络请求。这一层最好是个单例，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;BaseRequestModel中定义了：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PLHRequestModel&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//网络请求参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nonnull, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * serverRoot; &lt;span class=&quot;comment&quot;&gt;//网络请求的根地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nonnull, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * actionPath;&lt;span class=&quot;comment&quot;&gt;//发起响应的二级地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; timeout;  &lt;span class=&quot;comment&quot;&gt;//时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) PLHHTTPRequestType requestType;  &lt;span class=&quot;comment&quot;&gt;//网络请求方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nonnull, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * serviceName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nullable, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *apiVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nullable, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *parameters; &lt;span class=&quot;comment&quot;&gt;// 请求参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) PLHHTTPServiceType serviceType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Client&quot;&gt;&lt;a href=&quot;#Client&quot; class=&quot;headerlink&quot; title=&quot;Client&quot;&gt;&lt;/a&gt;Client&lt;/h3&gt;&lt;p&gt;单例的，定义了AFURLSessionManager *sessionManager;生成并且发出网络请求。或者直接继承自AFURLSessionManager&lt;/p&gt;
&lt;h4 id=&quot;PLHHTTPRequestSerializer&quot;&gt;&lt;a href=&quot;#PLHHTTPRequestSerializer&quot; class=&quot;headerlink&quot; title=&quot;PLHHTTPRequestSerializer&quot;&gt;&lt;/a&gt;PLHHTTPRequestSerializer&lt;/h4&gt;&lt;p&gt;单例的，生成AFHTTPRequestSerializer，或者直接继承自AFHTTPRequestSerializer。为的是生成NSURLRequest&lt;/p&gt;
&lt;h4 id=&quot;PLHRequestModel&quot;&gt;&lt;a href=&quot;#PLHRequestModel&quot; class=&quot;headerlink&quot; title=&quot;PLHRequestModel&quot;&gt;&lt;/a&gt;PLHRequestModel&lt;/h4&gt;&lt;h4 id=&quot;PLHResponseModel&quot;&gt;&lt;a href=&quot;#PLHResponseModel&quot; class=&quot;headerlink&quot; title=&quot;PLHResponseModel&quot;&gt;&lt;/a&gt;PLHResponseModel&lt;/h4&gt;&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://draveness.me/afnetworking1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AFNetworking 概述&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于项目的重构，很重要的就是对网络层的重构，其实也就是对AFN的二次封装。对于AFN的介绍在前一篇：&lt;a href=&quot;&quot;&gt;研究AFNetworking框架&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目重构遇到的问题</title>
    <link href="http://peilinghui.com/2017/07/05/%E9%A1%B9%E7%9B%AE%E9%87%8D%E6%9E%84%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://peilinghui.com/2017/07/05/项目重构遇到的问题/</id>
    <published>2017-07-05T07:12:10.000Z</published>
    <updated>2018-10-14T09:38:11.345Z</updated>
    
    <content type="html">&lt;p&gt;在项目重构的时候难免会遇到问题。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;旧项目的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用老式框架 ASI，并且没有做任何封装和抽取； 如果工程是ARC的 第三方文件编译选项加上-fno-objc-arc -O0&lt;/li&gt;
&lt;li&gt;字典转模型用的是Jastor.&lt;/li&gt;
&lt;li&gt;没有使用 Cocoa Pods，所有框架都是拖进去的。&lt;/li&gt;
&lt;li&gt;所有的网络请求只用了两个方法，一个同步一个异步。&lt;/li&gt;
&lt;li&gt;所有的VC都是用的代码写的，布局用的frame，这点还好一点，上家公司一大片storyboard，新加需求能把人逼疯的那种。&lt;/li&gt;
&lt;li&gt;一个VC的数据模型在一个类中。&lt;/li&gt;
&lt;li&gt;代码不规范，没有用固定的前缀，Deployment Target设置为6.0.当你把target设置为8.0的时候，警告暴增，很多的方法以及过期了。&lt;/li&gt;
&lt;li&gt;目录结构：项目中目录结构还算清晰，文件中的目录都没有，一大片.h和.m文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了上家公司的经验，我有个初步的计划和构想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把第三方的库可以把一些替换成Pod管理。&lt;/li&gt;
&lt;li&gt;对于网络层以前用的ASI，如果有新的需求就要用AFN，然后对于AFN进行一些封装，写的网络请求的方法要有successBlock和failureBlock。对于数据转模型用yymodel。&lt;/li&gt;
&lt;li&gt;可以写if debug运行环境的配置代码，来切换测试，预发和正式环境。或者我发现用SwitchHost直接切换环境开发的人比较方便，对于测试的人，就得用Charles或者是fiddler的抓包工具设置代理连到自己的电脑来切换到不同的环境测试。&lt;/li&gt;
&lt;li&gt;打包现在是用Xcode的手工打包可以引入Jenkins来实现自动化打包的模式。这就需要搭建Jenkins服务器和配置到gitlab上面。&lt;/li&gt;
&lt;li&gt;Jenkins也可以结合OCLint实现代码的review。&lt;/li&gt;
&lt;li&gt;使用 fir 和 fastlane 实现 iOS 持续集成。实现iOS应用发布流程的自动化&lt;/li&gt;
&lt;li&gt;对于推送可以使用极光推送还有一些统计崩溃率的第三方工具，还有设置埋点来统计APP的功能。&lt;/li&gt;
&lt;li&gt;对于一些登录还有一些公共组件可以抽取成私有的Pod，然后打tag，以便可以共用。&lt;/li&gt;
&lt;li&gt;对于业务方面就是要把数据和业务分离，对于重复出现的tableview可以写基类，然后再进行扩展。&lt;/li&gt;
&lt;li&gt;对于页面的布局要用masonary框架。&lt;/li&gt;
&lt;li&gt;对于一些第三方的框架和组件旧的逐步替换成新的第三方(一直有人维护和更新)的框架。&lt;/li&gt;
&lt;li&gt;当然最最重要的就是把代码进行完善，然后实现业务需求的继续扩张。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，上面都是我暂时的目标和想法，还有待去实践和一步步的改造。需要足够的耐心和坚持。&lt;/p&gt;
&lt;p&gt;在这期间遇到的一些问题：&lt;/p&gt;
&lt;h1 id=&quot;错误1：clang-error-Linker-command-failed-with-exit-code-1&quot;&gt;&lt;a href=&quot;#错误1：clang-error-Linker-command-failed-with-exit-code-1&quot; class=&quot;headerlink&quot; title=&quot;错误1：clang error: Linker command failed with exit code 1&quot;&gt;&lt;/a&gt;错误1：clang error: Linker command failed with exit code 1&lt;/h1&gt;&lt;h2 id=&quot;解决方法：-m文件被重复编译&quot;&gt;&lt;a href=&quot;#解决方法：-m文件被重复编译&quot; class=&quot;headerlink&quot; title=&quot;解决方法：.m文件被重复编译&quot;&gt;&lt;/a&gt;解决方法：.m文件被重复编译&lt;/h2&gt;&lt;p&gt;好好检查代码，看是不是在.m文件中的引入写成了引入.m文件。&lt;br&gt;看看是不是有新添加的文件跟之前文件同名&lt;br&gt;2，错误信息中出现了某个类的名字，去原文件中看看#import了哪些第三方库，把这些库挨个注释排除，找到出错的那个库，然后按照官方提供的步骤重新添加一遍。&lt;/p&gt;
&lt;h2 id=&quot;解决方法：使用Pod管理的时候&quot;&gt;&lt;a href=&quot;#解决方法：使用Pod管理的时候&quot; class=&quot;headerlink&quot; title=&quot;解决方法：使用Pod管理的时候&quot;&gt;&lt;/a&gt;解决方法：使用Pod管理的时候&lt;/h2&gt;&lt;p&gt;在把引入的第三方库改为Cocoapods管理的时候，遇到Linker command failed。&lt;br&gt;链接文件没有找到CocoaPods中的文件，&lt;/p&gt;
&lt;h3 id=&quot;解决方法1：&quot;&gt;&lt;a href=&quot;#解决方法1：&quot; class=&quot;headerlink&quot; title=&quot;解决方法1：&quot;&gt;&lt;/a&gt;解决方法1：&lt;/h3&gt;&lt;p&gt;找到 Build settings-&amp;gt;Linking-&amp;gt;Other Linker Flags&lt;br&gt;将此属性修改成-all_load 或者 -ObjC ，这个视情况而定。总之可以多试几次。&lt;/p&gt;
&lt;h3 id=&quot;解决方法2：&quot;&gt;&lt;a href=&quot;#解决方法2：&quot; class=&quot;headerlink&quot; title=&quot;解决方法2：&quot;&gt;&lt;/a&gt;解决方法2：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Go to project path and remove Pods folder and Podfile.lock file.&lt;/li&gt;
&lt;li&gt;Reinstall pods again using “pod install” command.&lt;/li&gt;
&lt;li&gt;Open xcworkspace and clean it before running.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解决方法3：&quot;&gt;&lt;a href=&quot;#解决方法3：&quot; class=&quot;headerlink&quot; title=&quot;解决方法3：&quot;&gt;&lt;/a&gt;解决方法3：&lt;/h3&gt;&lt;p&gt;如果添加的是第三方静态库（.a文件）&lt;br&gt;这种情况就可能是这个静态库路径混乱导致的链接错误。解决方法：Build settings-&amp;gt;Search Path-&amp;gt;Library Search Paths 添加静态库的相应路径。&lt;/p&gt;
&lt;h1 id=&quot;CocoaPods的相关问题&quot;&gt;&lt;a href=&quot;#CocoaPods的相关问题&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods的相关问题&quot;&gt;&lt;/a&gt;CocoaPods的相关问题&lt;/h1&gt;&lt;h3 id=&quot;pod-install-和-pod-update-的区别：&quot;&gt;&lt;a href=&quot;#pod-install-和-pod-update-的区别：&quot; class=&quot;headerlink&quot; title=&quot;pod install 和 pod update 的区别：&quot;&gt;&lt;/a&gt;pod install 和 pod update 的区别：&lt;/h3&gt;&lt;p&gt;使用 pod install，你只会安装 Podfile 中新改变的东西，并且会：优先遵循 Podfile 里指定的版本信息；其次遵循 Podfile.lock 里指定的版本信息来安装对应的依赖库。比如：下面在 Podfile 里没指定 iRate 的版本，但是 Podfile.lock 里指定了 iRate 的版本是 1.11.1，那么即使现在有最新的 1.11.4，最终也会安装 1.11.1。但是如果 Podfile 里指定了 iRate 版本是 1.11.3，那么则会安装 1.11.3，并更新 Podfile.lock 里的信息。&lt;/p&gt;
&lt;p&gt;使用 pod update，你会根据 Podfile 的规则更新所有依赖库，不会理睬现有的 Podfile.lock，而是根据安装依赖库的情况生成新的 Podfile.lock 文件&lt;br&gt;&lt;a href=&quot;http://www.samirchen.com/about-podfile-lock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于 Podfile.lock 带来的痛&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用CocoaPods开发并打包静态库&quot;&gt;&lt;a href=&quot;#使用CocoaPods开发并打包静态库&quot; class=&quot;headerlink&quot; title=&quot;使用CocoaPods开发并打包静态库&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/brycezhang/p/4117180.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用CocoaPods开发并打包静态库&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;用-CocoaPods-集成本地私有库&quot;&gt;&lt;a href=&quot;#用-CocoaPods-集成本地私有库&quot; class=&quot;headerlink&quot; title=&quot;用 CocoaPods 集成本地私有库&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.samirchen.com/use-cocoapods-to-manage-private-libs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用 CocoaPods 集成本地私有库&lt;/a&gt;&lt;/h3&gt;&lt;h1 id=&quot;静态库-a打包成支持64位的&quot;&gt;&lt;a href=&quot;#静态库-a打包成支持64位的&quot; class=&quot;headerlink&quot; title=&quot;静态库.a打包成支持64位的&quot;&gt;&lt;/a&gt;静态库.a打包成支持64位的&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;2015年2月1日不允许不支持arm64的应用的提交；&lt;/li&gt;
&lt;li&gt;iOS10发布后，如果你的应用中使用到了32位的类、库，没有相应支持64位机型的库，则首次启动后会弹窗式提示：“ xxx可能使iPhone变慢…”；&lt;/li&gt;
&lt;li&gt;iOS10.3公测版发布:封杀32位应用；&lt;/li&gt;
&lt;li&gt;苹果系统（iOS7/iOS8-iOS9）,32位的framework和64位的framework是共存的，所以如果所有的应用都是64位的话，系统就自动不加载32位的framework，这样可以少占用资源，另外对运行的速度是有好处的，也就是说，你会感觉手机运行的快了一点。应用在兼容64位系统后，内存的占用肯定会变多一点，不过性能也有相应的提升。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;i386是针对intel通用微处理器32位处理器&lt;br&gt;x86_64是针对x86架构的64位处理器&lt;br&gt;模拟器32位处理器测试需要i386架构&lt;br&gt;模拟器64位处理器测试需要x86_64架构&lt;br&gt;真机32位处理器需要armv7,或者armv7s架构&lt;br&gt;真机64位处理器需要arm64架构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/567d3b730608&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS armv7, armv7s, arm64区别与应用32位、64位配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;制作方法：一般只要是模拟器一运行就会生成.a的静态库，然后cd到目录下输入lipo -info XXX.a就可以打印出支持的是x86_34,还是什么了，现在一般都要求32位和64位了，如果要是某些项目要在模拟器上运行还要支持i386,所以，可以进行.a静态包的合并。用命令输入lipo -create XX.a XXX.a -output XXXX.a 就可以生成了XXXX.a的静态包。然后导入工程并且在building setting中设置支持arm7,arm7s和arm64即可。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/kaqijiang/blog/649632&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS静态库.a 和framework&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zybuluo.com/qidiandasheng/note/603907&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS里的动态库和静态库&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2014/12/20/64-bit-tips/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;64-bit Tips&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Xib问题&quot;&gt;&lt;a href=&quot;#Xib问题&quot; class=&quot;headerlink&quot; title=&quot;Xib问题&quot;&gt;&lt;/a&gt;Xib问题&lt;/h1&gt;&lt;p&gt;由于更新手机系统iOS11以及xcode9 beta，然后项目在xcode9运行出现一些错误：Compiling IB documents for earlier than iOS 7 is no longer supported.如截图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1244409-5cf0c15ba87dd1f2.png?imageMogr2/auto-orient/strip%7CimageView2/2&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决办法是：Builds for更改版本7之后，我更改成9.0&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1244409-e59c5cbfe0074c5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;关于APP一启动就crash&quot;&gt;&lt;a href=&quot;#关于APP一启动就crash&quot; class=&quot;headerlink&quot; title=&quot;关于APP一启动就crash&quot;&gt;&lt;/a&gt;关于APP一启动就crash&lt;/h1&gt;&lt;p&gt;由于更新手机系统iOS11以及xcode9 beta，然后项目在xcode9运行出现_runWithMainScene:transitionContext:completion错误。解决方法在&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&lt;/code&gt;方法中的UIWindow必须设置它的rootViewController&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在项目重构的时候难免会遇到问题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS中的图表Charts</title>
    <link href="http://peilinghui.com/2017/06/30/iOS%E4%B8%AD%E7%9A%84%E5%9B%BE%E8%A1%A8Charts/"/>
    <id>http://peilinghui.com/2017/06/30/iOS中的图表Charts/</id>
    <published>2017-06-30T12:17:16.000Z</published>
    <updated>2017-07-06T03:28:17.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS中的图表，包括：折线图，柱状图，饼图。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对于数据的展示，最常见的就是柱状图，折线图了。在的上家公司用的柱状图都是自己写的，自己封装的。现在公司接手的项目原来是用core-plot&lt;a href=&quot;https://github.com/core-plot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/core-plot&lt;/a&gt;的第三方库。现在打算尝试一下新的第三方库：&lt;strong&gt;Charts&lt;/strong&gt;&lt;a href=&quot;https://github.com/danielgindi/Charts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/danielgindi/Charts&lt;/a&gt;界面更加的好看了。&lt;/p&gt;
&lt;h1 id=&quot;charts的前期准备&quot;&gt;&lt;a href=&quot;#charts的前期准备&quot; class=&quot;headerlink&quot; title=&quot;charts的前期准备&quot;&gt;&lt;/a&gt;charts的前期准备&lt;/h1&gt;&lt;p&gt;可以看它那个READMe.md,就写了使用，一种共识直接拖进项目，由于是用swift写的，OC也可以使用，因此要设置桥接文件，才可以。一种是使用cocoapods，还有一种是使用Carthage安装。&lt;/p&gt;
&lt;p&gt;我用的是cocoapods的方式：&lt;/p&gt;
&lt;h2 id=&quot;先cocoads安装：&quot;&gt;&lt;a href=&quot;#先cocoads安装：&quot; class=&quot;headerlink&quot; title=&quot;先cocoads安装：&quot;&gt;&lt;/a&gt;先cocoads安装：&lt;/h2&gt;&lt;p&gt;$sudo gem install -n /usr/local/bin cocoapods&lt;/p&gt;
&lt;p&gt;$pod setup&lt;/p&gt;
&lt;h2 id=&quot;集成Charts：&quot;&gt;&lt;a href=&quot;#集成Charts：&quot; class=&quot;headerlink&quot; title=&quot;集成Charts：&quot;&gt;&lt;/a&gt;集成Charts：&lt;/h2&gt;&lt;p&gt;新建一个项目TestChatDemos&lt;/p&gt;
&lt;p&gt;cd 把工程直接拖过来&lt;/p&gt;
&lt;h2 id=&quot;创建podfile文件&quot;&gt;&lt;a href=&quot;#创建podfile文件&quot; class=&quot;headerlink&quot; title=&quot;创建podfile文件&quot;&gt;&lt;/a&gt;创建podfile文件&lt;/h2&gt;&lt;p&gt;touch podfile&lt;/p&gt;
&lt;p&gt;open -a xcode podfile &lt;/p&gt;
&lt;p&gt;在podfile文件中输入&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;platform&lt;/span&gt; :iOS, &lt;span class=&quot;string&quot;&gt;&#39;8.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use_frameworks!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &lt;span class=&quot;string&quot;&gt;&#39;TestCharsDemo&#39;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;Charts&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;Charts/Realm&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post_install &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt; |installer|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    installer.pods_project.targets.&lt;span class=&quot;keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt; |target|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       target.build_configurations.&lt;span class=&quot;keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt; |config|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           config.build_settings[&lt;span class=&quot;string&quot;&gt;&#39;SWIFT_VERSION&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;3.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;pod search Charts&lt;/p&gt;
&lt;p&gt;pod install&lt;/p&gt;
&lt;h2 id=&quot;设置桥接文件&quot;&gt;&lt;a href=&quot;#设置桥接文件&quot; class=&quot;headerlink&quot; title=&quot;设置桥接文件&quot;&gt;&lt;/a&gt;设置桥接文件&lt;/h2&gt;&lt;p&gt;建立与Swift的桥接文件，建立一个以swift文件，提示是否建立桥接，点击creat bridging header&lt;/p&gt;
&lt;p&gt;将pods——testChatDemos。frameworkios添加到 general-&amp;gt;embedded binaries&lt;/p&gt;
&lt;p&gt;在桥接文件中写上要引用的swift头文件 @import Charts；&lt;/p&gt;
&lt;p&gt;用到时导入 #import “testChartDemos-bridging-header.h”的头文件，然后就可以使用Charts里的东西了&lt;/p&gt;
&lt;p&gt;使用ChartsDemos里的东西的时候，要配置product module name 为（TestCharsDemo）系统会自动生成&lt;/p&gt;
&lt;p&gt;“TestCharsDemo-Swift.h”导入&lt;br&gt;“Chart-swift.h”的文件导入&lt;/p&gt;
&lt;p&gt;这样基本就可以运行程序看到ChartsDemo里的案例了。&lt;/p&gt;
&lt;h1 id=&quot;使用Charts&quot;&gt;&lt;a href=&quot;#使用Charts&quot; class=&quot;headerlink&quot; title=&quot;使用Charts&quot;&gt;&lt;/a&gt;使用Charts&lt;/h1&gt;&lt;p&gt;接下来就可以参照GitHUB官网上的Demo来写你需要的图形了。&lt;/p&gt;
&lt;p&gt;使用这个库无非就是几个问题：&lt;br&gt;写界面，放入数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看你的需求是需要那种图，各个图的样式的属性。&lt;/li&gt;
&lt;li&gt;x轴，y轴的数据是从哪里获得的。&lt;/li&gt;
&lt;li&gt;x轴和y轴的数据是否可以动态变化。&lt;/li&gt;
&lt;li&gt;该如何把从服务器传过来的数组对应到图中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;LineChart折线图&quot;&gt;&lt;a href=&quot;#LineChart折线图&quot; class=&quot;headerlink&quot; title=&quot;LineChart折线图&quot;&gt;&lt;/a&gt;LineChart折线图&lt;/h2&gt;&lt;h3 id=&quot;Line-Chart单折线&quot;&gt;&lt;a href=&quot;#Line-Chart单折线&quot; class=&quot;headerlink&quot; title=&quot;Line Chart单折线&quot;&gt;&lt;/a&gt;Line Chart单折线&lt;/h3&gt;&lt;p&gt;1.首先是需要LineChartView。&lt;br&gt;然后是ChartLimitLine-x轴的限制线。&lt;br&gt;ChartLimitLine-Y轴的限制线&lt;br&gt;ChartYAxis设置Y轴，有左边的Y轴leftAxis和右边的Y轴rightAxis。&lt;br&gt;BalloonMarker&lt;/p&gt;
&lt;p&gt;设置x轴和Y轴的数据的方法.&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *values = [[NSMutableArray alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt; val = arc4random_uniform(range) + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [values &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[ChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithX:&lt;/span&gt;i &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;val &lt;span class=&quot;string&quot;&gt;icon:&lt;/span&gt; [UIImage &lt;span class=&quot;string&quot;&gt;imageNamed:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;icon&quot;&lt;/span&gt;]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于0到Count的x轴的值，随机的产生y值，并放入数组values中，其中values是&lt;__nsarraym 0x600000057670=&quot;&quot;&gt;(&lt;br&gt;ChartDataEntry, x: 0.0, y 53.0,&lt;br&gt;ChartDataEntry, x: 1.0, y 91.0,&lt;br&gt;ChartDataEntry, x: 2.0, y 44.0）这样的。&lt;/__nsarraym&gt;&lt;/p&gt;
&lt;p&gt;然后是LineChartDataSet，每一个set对应一条折线。把上面的values放入这个set中当做这条线的各个坐标点。设置它的属性。&lt;br&gt;把每一个set都放入dataSets中，作为LineChartData的数据源，也就是chartView的data源了。&lt;/p&gt;
&lt;h3 id=&quot;Line-Chart-Dual-YAxis-双折线&quot;&gt;&lt;a href=&quot;#Line-Chart-Dual-YAxis-双折线&quot; class=&quot;headerlink&quot; title=&quot;Line Chart(Dual YAxis)双折线&quot;&gt;&lt;/a&gt;Line Chart(Dual YAxis)双折线&lt;/h3&gt;&lt;p&gt;ChartLegend设置图例，就是每条线Dataset的说明。&lt;br&gt;对于其他同上面，其中上面的values变成了三个yVals.放入三个LineChartDataSet中，设置每一个set的属性。&lt;/p&gt;
&lt;h3 id=&quot;Multiple-Lines-Chart多种折线图&quot;&gt;&lt;a href=&quot;#Multiple-Lines-Chart多种折线图&quot; class=&quot;headerlink&quot; title=&quot;Multiple Lines Chart多种折线图&quot;&gt;&lt;/a&gt;Multiple Lines Chart多种折线图&lt;/h3&gt;&lt;p&gt;设置ChartLegend，没有设置x轴和y轴。其他同上。&lt;/p&gt;
&lt;h3 id=&quot;Colored-Line-Chart彩色的折线图&quot;&gt;&lt;a href=&quot;#Colored-Line-Chart彩色的折线图&quot; class=&quot;headerlink&quot; title=&quot;Colored Line Chart彩色的折线图&quot;&gt;&lt;/a&gt;Colored Line Chart彩色的折线图&lt;/h3&gt;&lt;p&gt;设置了_chartViews的Count为4，然后对于每一个_chartViews固定了range就是高度为100.其他同上。&lt;/p&gt;
&lt;h3 id=&quot;TimeLine-Chart时间线的折线图&quot;&gt;&lt;a href=&quot;#TimeLine-Chart时间线的折线图&quot; class=&quot;headerlink&quot; title=&quot;TimeLine Chart时间线的折线图&quot;&gt;&lt;/a&gt;TimeLine Chart时间线的折线图&lt;/h3&gt;&lt;p&gt;LineChartTimeViewController&lt;/p&gt;
&lt;h3 id=&quot;Filled-Line-Chart-填充的折线图&quot;&gt;&lt;a href=&quot;#Filled-Line-Chart-填充的折线图&quot; class=&quot;headerlink&quot; title=&quot;Filled Line Chart 填充的折线图&quot;&gt;&lt;/a&gt;Filled Line Chart 填充的折线图&lt;/h3&gt;&lt;h2 id=&quot;BarChart柱状条形图&quot;&gt;&lt;a href=&quot;#BarChart柱状条形图&quot; class=&quot;headerlink&quot; title=&quot;BarChart柱状条形图&quot;&gt;&lt;/a&gt;BarChart柱状条形图&lt;/h2&gt;&lt;h3 id=&quot;Bar-Chart竖的条形图&quot;&gt;&lt;a href=&quot;#Bar-Chart竖的条形图&quot; class=&quot;headerlink&quot; title=&quot;Bar Chart竖的条形图&quot;&gt;&lt;/a&gt;Bar Chart竖的条形图&lt;/h3&gt;&lt;p&gt;和折线图也差不多。设置x轴ChartXAxis，设置y轴ChartYAxis的leftAxis和rightAxis，图例ChartLegend.&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *yVals = [[NSMutableArray alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; i = start; i &amp;lt; start + count + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt; mult = (range + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt; val = (&lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt;) (arc4random_uniform(mult));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arc4random_uniform(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &amp;lt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [yVals &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[BarChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithX:&lt;/span&gt;i &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;val &lt;span class=&quot;string&quot;&gt;icon:&lt;/span&gt; [UIImage &lt;span class=&quot;string&quot;&gt;imageNamed:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;icon&quot;&lt;/span&gt;]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [yVals &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[BarChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithX:&lt;/span&gt;i &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;val]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;po yVals&lt;/p&gt;
&lt;p&gt;&lt;__nsarraym 0x60800004d4d0=&quot;&quot;&gt;(&lt;br&gt;ChartDataEntry, x: 1.0, y 18.0,&lt;br&gt;ChartDataEntry, x: 2.0, y 36.0,&lt;br&gt;ChartDataEntry, x: 3.0, y 17.0&lt;br&gt;)&lt;/__nsarraym&gt;&lt;/p&gt;
&lt;p&gt;每一个BarChartDataSet是一个柱状图，然后放到datasets中他们会作为BarChartData的数据源。也是_chartView的data&lt;/p&gt;
&lt;h3 id=&quot;Horizontal-Bar-Chart横的条形图&quot;&gt;&lt;a href=&quot;#Horizontal-Bar-Chart横的条形图&quot; class=&quot;headerlink&quot; title=&quot;Horizontal Bar Chart横的条形图&quot;&gt;&lt;/a&gt;Horizontal Bar Chart横的条形图&lt;/h3&gt;&lt;p&gt;就是左边的Y轴是数据的X轴，下面的一条x轴是数据的Y轴。yVals是&lt;__nsarraym 0x6100000591a0=&quot;&quot;&gt;(&lt;br&gt;ChartDataEntry, x: 0.0, y 3.0,&lt;br&gt;ChartDataEntry, x: 10.0, y 20.0,&lt;br&gt;ChartDataEntry, x: 20.0, y 50.0,&lt;br&gt;ChartDataEntry, x: 30.0, y 7.0,&lt;br&gt;ChartDataEntry, x: 40.0, y 33.0,&lt;br&gt;ChartDataEntry, x: 50.0, y 19.0,&lt;br&gt;ChartDataEntry, x: 60.0, y 26.0）&lt;/__nsarraym&gt;&lt;/p&gt;
&lt;h3 id=&quot;Multiple-Bars-Chart多种条形图&quot;&gt;&lt;a href=&quot;#Multiple-Bars-Chart多种条形图&quot; class=&quot;headerlink&quot; title=&quot;Multiple Bars Chart多种条形图&quot;&gt;&lt;/a&gt;Multiple Bars Chart多种条形图&lt;/h3&gt;&lt;h3 id=&quot;Stack-Bar-Chart堆积的柱状条形图&quot;&gt;&lt;a href=&quot;#Stack-Bar-Chart堆积的柱状条形图&quot; class=&quot;headerlink&quot; title=&quot;Stack Bar Chart堆积的柱状条形图&quot;&gt;&lt;/a&gt;Stack Bar Chart堆积的柱状条形图&lt;/h3&gt;&lt;h3 id=&quot;Stack-Bar-Chart-Negative堆积的反向柱状条形图&quot;&gt;&lt;a href=&quot;#Stack-Bar-Chart-Negative堆积的反向柱状条形图&quot; class=&quot;headerlink&quot; title=&quot;Stack Bar Chart Negative堆积的反向柱状条形图&quot;&gt;&lt;/a&gt;Stack Bar Chart Negative堆积的反向柱状条形图&lt;/h3&gt;&lt;h3 id=&quot;Another-Bar-Chart干净的条形图&quot;&gt;&lt;a href=&quot;#Another-Bar-Chart干净的条形图&quot; class=&quot;headerlink&quot; title=&quot;Another Bar Chart干净的条形图&quot;&gt;&lt;/a&gt;Another Bar Chart干净的条形图&lt;/h3&gt;&lt;h3 id=&quot;Sinus-Bar-Chart正弦柱状图&quot;&gt;&lt;a href=&quot;#Sinus-Bar-Chart正弦柱状图&quot; class=&quot;headerlink&quot; title=&quot;Sinus Bar Chart正弦柱状图&quot;&gt;&lt;/a&gt;Sinus Bar Chart正弦柱状图&lt;/h3&gt;&lt;h3 id=&quot;BarChart-positive-negative正反向的柱状图&quot;&gt;&lt;a href=&quot;#BarChart-positive-negative正反向的柱状图&quot; class=&quot;headerlink&quot; title=&quot;BarChart positive/negative正反向的柱状图&quot;&gt;&lt;/a&gt;BarChart positive/negative正反向的柱状图&lt;/h3&gt;&lt;h2 id=&quot;PieChart饼图&quot;&gt;&lt;a href=&quot;#PieChart饼图&quot; class=&quot;headerlink&quot; title=&quot;PieChart饼图&quot;&gt;&lt;/a&gt;PieChart饼图&lt;/h2&gt;&lt;p&gt;PieChartView.不再是X轴和Y轴，而是表示一共把饼图分几块和一共的百分比。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *values = [[NSMutableArray alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [values &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[PieChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithValue:&lt;/span&gt;(arc4random_uniform(mult) + mult / &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;label:&lt;/span&gt;parties[i % parties.count] &lt;span class=&quot;string&quot;&gt;icon:&lt;/span&gt; [UIImage &lt;span class=&quot;string&quot;&gt;imageNamed:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;icon&quot;&lt;/span&gt;]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把values放入PieChartDataSet中，其中values是下面的：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;__NSArrayM &lt;span class=&quot;number&quot;&gt;0x610000042910&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;96.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;118.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;27.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;115.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Pie-Chart饼图、&quot;&gt;&lt;a href=&quot;#Pie-Chart饼图、&quot; class=&quot;headerlink&quot; title=&quot;Pie Chart饼图、&quot;&gt;&lt;/a&gt;Pie Chart饼图、&lt;/h3&gt;&lt;h3 id=&quot;Pie-Chart-With-Value-lines带有值的饼图&quot;&gt;&lt;a href=&quot;#Pie-Chart-With-Value-lines带有值的饼图&quot; class=&quot;headerlink&quot; title=&quot;Pie Chart With Value lines带有值的饼图&quot;&gt;&lt;/a&gt;Pie Chart With Value lines带有值的饼图&lt;/h3&gt;&lt;h3 id=&quot;Half-Pie-Chart一半的饼图&quot;&gt;&lt;a href=&quot;#Half-Pie-Chart一半的饼图&quot; class=&quot;headerlink&quot; title=&quot;Half Pie Chart一半的饼图&quot;&gt;&lt;/a&gt;Half Pie Chart一半的饼图&lt;/h3&gt;&lt;h2 id=&quot;Scatter-Chart离散图&quot;&gt;&lt;a href=&quot;#Scatter-Chart离散图&quot; class=&quot;headerlink&quot; title=&quot;Scatter Chart离散图&quot;&gt;&lt;/a&gt;Scatter Chart离散图&lt;/h2&gt;&lt;h2 id=&quot;Bubble-Chart气泡图&quot;&gt;&lt;a href=&quot;#Bubble-Chart气泡图&quot; class=&quot;headerlink&quot; title=&quot;Bubble Chart气泡图&quot;&gt;&lt;/a&gt;Bubble Chart气泡图&lt;/h2&gt;&lt;h2 id=&quot;Combine-Chart结合的图&quot;&gt;&lt;a href=&quot;#Combine-Chart结合的图&quot; class=&quot;headerlink&quot; title=&quot;Combine Chart结合的图&quot;&gt;&lt;/a&gt;Combine Chart结合的图&lt;/h2&gt;&lt;h2 id=&quot;Radar-Chart雷达分散图&quot;&gt;&lt;a href=&quot;#Radar-Chart雷达分散图&quot; class=&quot;headerlink&quot; title=&quot;Radar Chart雷达分散图&quot;&gt;&lt;/a&gt;Radar Chart雷达分散图&lt;/h2&gt;&lt;h2 id=&quot;Candle-Stick-Chart蜡烛状的图&quot;&gt;&lt;a href=&quot;#Candle-Stick-Chart蜡烛状的图&quot; class=&quot;headerlink&quot; title=&quot;Candle Stick Chart蜡烛状的图&quot;&gt;&lt;/a&gt;Candle Stick Chart蜡烛状的图&lt;/h2&gt;&lt;p&gt;Demo地址：&lt;a href=&quot;https://github.com/peilinghui/BokeDemo/tree/master/PLHDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/BokeDemo/tree/master/PLHDemo&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;其他图表框架&quot;&gt;&lt;a href=&quot;#其他图表框架&quot; class=&quot;headerlink&quot; title=&quot;其他图表框架&quot;&gt;&lt;/a&gt;其他图表框架&lt;/h1&gt;&lt;p&gt;PNChart&lt;a href=&quot;https://github.com/peilinghui/PNChart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/PNChart&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS中的图表，包括：折线图，柱状图，饼图。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动应用的设计模式</title>
    <link href="http://peilinghui.com/2017/06/26/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://peilinghui.com/2017/06/26/移动应用的设计模式/</id>
    <published>2017-06-26T10:55:14.000Z</published>
    <updated>2017-06-27T10:48:13.000Z</updated>
    
    <content type="html">&lt;p&gt;在我们平时使用APP的时候，尤其是现在那些主流的APP，它们的设计模式。是如何迎合用户的需求和喜好。如果你自己做的一款产品你自己都不喜欢的话，如何让更多的用户去使用这个APP呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对于iPhone手机的系统的不断的更新，也是在不断的融合用户的喜好。从指纹解锁，唤起APP的模式。还有通知栏的设计，控制中心的设计，各个应用的排列和图标的显示，只有在意了每个细节才能造就一个更加完美的产品。&lt;br&gt;而对于一个开发人员来讲，不仅要关注现在市场的技术的革新，更重要的是不断的研究其他的主流的产品和主流产品的设计。不然你连自己都不知道自己的产品设计已经out了。&lt;/p&gt;
&lt;h1 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h1&gt;&lt;p&gt;导航有主导航和次级导航。&lt;br&gt;对于iOS用户来讲，一个APP可能更偏好于使用左右滑动的模式。因为上下滑动的模式很容易和系统的控制中心、通知的手势冲突。&lt;/p&gt;
&lt;h2 id=&quot;主导航&quot;&gt;&lt;a href=&quot;#主导航&quot; class=&quot;headerlink&quot; title=&quot;主导航&quot;&gt;&lt;/a&gt;主导航&lt;/h2&gt;&lt;p&gt;没错，在前几年比较流行的就是那种侧边抽屉的主导航，就是“突破画布”的思维来打破虚拟的边界，让这个屏幕尺寸有限的手机可以呈现更多的内容。&lt;br&gt;但是，facebook在千万级用户批量测试中，选项卡式完胜侧边抽屉式和其他类型的导航模式。这也是为什么现在打开很多主流的APP。你会发现很多的APP都使用的是选项式的导航，就是下面的tab的切换，最多只有5个tab。  &lt;/p&gt;
&lt;p&gt;微信：下面有4个tab。微信、通讯录、发现和我。使用用户偏好的左右滑动的手势来实现了聊天记录的标记与删除。而在上部使用简洁的搜索和一个＋的点击，来发起群聊，添加朋友，扫一扫和收付款，这就说明了在顶部的导航，应该放一些比较显目，提醒用户或是做一些常用的功能的入口。&lt;/p&gt;
&lt;p&gt;微博：下面有5个tab。微博、消息、弹框、发现和我。而微博的新版也为了迎合用户喜好的左右滑动，把常用的热门的功能放在外面（原来是在发现里面的）和全部微博平行的左右滑动的入口。左边还是照相机，推出了微博的新功能，微博故事–可以用来拍摄照片和视频，类似朋友圈的小视频，时间大于10秒，而且可以用户个性化的编辑，添加表情、文字、图片，而且类似直播的画面设计，粉丝可以关注然后评论。很赞！&lt;br&gt;右边是扫一扫和打车的入口。顶部是简洁的搜索。  &lt;/p&gt;
&lt;p&gt;京东：下面是5个tab，首页，分类，觅Me，购物车和我的。上面是搜索框。左边是扫一扫，右边是消息。&lt;br&gt;实话说，我比较喜欢京东的设计，尤其是分类tab中的两级的菜单的显示。左边是菜单的项，联动的是菜单下面的collectionView的显示。很容易找到自己所喜欢的类别。然后是觅Me的tab，上面是ScrollView的滑动，很符合用户的左右滑动的习惯，而且一点也不卡的显示了视频精选、直播、关注、清单、问答、视频够、社区、生活、亲子、风尚、美食，滑动特别的流畅，对于视频的缓存，图片和文字的排版，图片的缓存还有下拉图标的动画是一个快递员。真的很好的设计呐~&lt;/p&gt;
&lt;p&gt;淘宝：下面也是5个tab，首页、微淘、问大家、购物车和我的淘宝。上面也同样是扫一扫和搜索框，还有消息。我一直觉得淘宝的拍照购物很神奇，不过现在好像很多电商：比如京东，都实现了这种是一种类似算法匹配的搜索吧。虽然有的时候也不是很准啦。第一个tab还实现了点击一个图标的跳动，显示成了火箭🚀的标识。直接跳转到了猜你喜欢的一系列（这个应该是现在最流行的机器学习大数据来统计用户的喜好）来推荐你的习惯和购物习惯来定制的为你推荐产品，促进你的购物消费。&lt;/p&gt;
&lt;p&gt;支付宝：&lt;/p&gt;
&lt;p&gt;网易云音乐：&lt;/p&gt;
&lt;p&gt;简书：&lt;/p&gt;
&lt;p&gt;手机QQ：手机QQ及更不用说了，都好多年沉淀的技术了，好多的功能的隐藏。都没有注意到过，主要现在跟多的在玩微博，很少玩QQ了，QQ里面有个日迹的入口和微博故事很像。但是入口就没有微博辣么明显了。&lt;/p&gt;
&lt;p&gt;对于这种主流的导航可以写一些个Demo了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在我们平时使用APP的时候，尤其是现在那些主流的APP，它们的设计模式。是如何迎合用户的需求和喜好。如果你自己做的一款产品你自己都不喜欢的话，如何让更多的用户去使用这个APP呢？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
