<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向着阳光奔跑</title>
  <subtitle>没有到不了的远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://peilinghui.com/"/>
  <updated>2017-12-13T14:33:32.000Z</updated>
  <id>http://peilinghui.com/</id>
  
  <author>
    <name>向阳</name>
    <email>peilinghuibest@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ReactNative中使用Redux</title>
    <link href="http://peilinghui.com/2017/12/12/ReactNative%E4%B8%AD%E4%BD%BF%E7%94%A8Redux/"/>
    <id>http://peilinghui.com/2017/12/12/ReactNative中使用Redux/</id>
    <published>2017-12-12T15:14:35.000Z</published>
    <updated>2017-12-13T14:33:32.000Z</updated>
    
    <content type="html">&lt;p&gt;使用Redux也有一段时间了。总结一下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;为什么要使用Redux?&lt;br&gt;背景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RN的state（可变，子组件不可见）和props（不可变，子组件可见）的设计，在面对大型项目时候，容易因为不经意修改state造成状态混乱，组件渲染错误&lt;/li&gt;
&lt;li&gt;RN使用了Virtual DOM，不需要Target绑定-&amp;gt;Action修改UI属性，只要当状态变化，render新状态下的组件，数据单向传递，而MVC的设计模式存在双向数据流。&lt;/li&gt;
&lt;li&gt;RN不易进行测试，Redux提供了非常方便的mock测试方式。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Redux开发&quot;&gt;&lt;a href=&quot;#Redux开发&quot; class=&quot;headerlink&quot; title=&quot;Redux开发&quot;&gt;&lt;/a&gt;Redux开发&lt;/h1&gt;&lt;h2 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;p&gt;安装Redux：  ‘npm install –save redux’&lt;br&gt;安装React Native和Redux绑定库：npm install –save react-redux&lt;br&gt;安装Redux Thunk异步Action中间件：npm install –save redux-thunk&lt;/p&gt;
&lt;h2 id=&quot;三个原则&quot;&gt;&lt;a href=&quot;#三个原则&quot; class=&quot;headerlink&quot; title=&quot;三个原则&quot;&gt;&lt;/a&gt;三个原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单一数据源&lt;br&gt;  整个应用的 state 被储存在一个对象树中，对象树存在于唯一的 store 中。store中的 state 绑定到组件&lt;/li&gt;
&lt;li&gt;State 是只读的&lt;br&gt;  惟一改变 state 的方法就是触发 action。action 是一个含有 type 属性的普通JS对象，type 可以用常量表示事件。&lt;/li&gt;
&lt;li&gt;使用纯函数来执行修改&lt;br&gt;  编写 reducers 来描述对应action如何修改 state 。一般可以用 switch(action.type) 来处理，无副作用&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;react-redux提供了connect和Provider。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Provider是顶层的分发点，属性就是Store，将State分发给所有被connect的组件&lt;br&gt;2.connect：接受两个参数：一个是mapStateToProps或者mapDispatchToProps，一个是要绑定的组件本身。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Store&quot;&gt;&lt;a href=&quot;#Store&quot; class=&quot;headerlink&quot; title=&quot;Store&quot;&gt;&lt;/a&gt;Store&lt;/h3&gt;&lt;p&gt;Store 就是把 Reducer 和 action 联系到一起的对象。Store 有以下职责：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维持应用的 state–类似数据库，存储应用的所有state。&lt;/li&gt;
&lt;li&gt;提供 getState() 方法。获取 所有的当前state；&lt;/li&gt;
&lt;li&gt;提供 dispatch(action) 方法更新 state，相当于存入数据库，存入action来改变state。&lt;/li&gt;
&lt;li&gt;通过 subscribe(listener) 注册监听器。&lt;br&gt;Store本质上是一个对象，它以树的形式保存了整个应用的State。并提供了一些方法。例如getState( ) 和 dispatch( )。&lt;br&gt;Redux应用只有惟一一个Store。&lt;br&gt;Store通过createStore方法来创建，根据整个应用的根Reducer的初始State。&lt;br&gt;代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; createStore, applyMiddleware &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; thunk &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;redux-thunk&#39;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//异步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; reducers &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./reducers&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Store = applyMiddleware(thunk)(createStore)(reducers);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Store;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Reducers&quot;&gt;&lt;a href=&quot;#Reducers&quot; class=&quot;headerlink&quot; title=&quot;Reducers&quot;&gt;&lt;/a&gt;Reducers&lt;/h3&gt;&lt;p&gt;Action只是描述了有事情发生了这一事实，并没有指明应用如何更新state。这是reducer要做的事情。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reducer的本质是一个函数，并且是一个纯函数。没有任何副作用。简单来讲Reducer只负责做一件事，就是根据接收到的action和state来修改Store中的state：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(state, action) =&amp;gt; newState  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一般实现的时候，通过switch(action.type) 来判断不同的Action，default为旧state。同时可以定义初始状态。&lt;/li&gt;
&lt;li&gt;代码：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; combineReducers &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &#39;redux&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const newState = (&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt; = &amp;#123;&amp;#125;, action = &amp;#123;&amp;#125;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  switch (action.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case ActionTypes.CSTATE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &amp;#123; ...&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;, ...action.&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    case &#39;_DPDATACHANGE_&#39;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &amp;#123;...&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;, ...action.dpState&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return &lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//Reducer 合并&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; combineReducers(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  newState,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意:返回的是新state，如果需要保留部分旧state值，使用…state（ES7的对象展开语法，对对象会浅拷贝对应属性，这里等价于Object.assign({}, state, newState)），而如果合并state的话只会合并一层，对复杂state需要手动合并。&lt;/p&gt;
&lt;h3 id=&quot;Action&quot;&gt;&lt;a href=&quot;#Action&quot; class=&quot;headerlink&quot; title=&quot;Action&quot;&gt;&lt;/a&gt;Action&lt;/h3&gt;&lt;p&gt;Action是一个普通JS对象，至少包括一个type属性代表事件，其他属性可以用来传递数据。实践上对一个流程定义一个函数，流程可以包括网络请求，最后返回Action，这个函数叫Action Creator。&lt;br&gt;代码：Store可以dispatch这个Action，action的type表示标识符，state是它携带的数据。&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export const newState = &lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt; =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Store.dispatch(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: ActionTypes.CSTATE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;持久化&quot;&gt;&lt;a href=&quot;#持久化&quot; class=&quot;headerlink&quot; title=&quot;持久化&quot;&gt;&lt;/a&gt;持久化&lt;/h4&gt;&lt;p&gt;当触发action时根据其reducer key恢复数据，然后只需要在应用启动时分发action，这也很容易抽象成可配置的拓展服务，实际上三方库redux-persist已经为我们做好了这一切。&lt;br&gt;在Action中可以代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; getStorage = &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (key) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; d = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; AsyncStorage.getItem(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(d);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; setStorage = (key, value) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AsyncStorage.setItem(key, &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(value));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;connect&quot;&gt;&lt;a href=&quot;#connect&quot; class=&quot;headerlink&quot; title=&quot;connect&quot;&gt;&lt;/a&gt;connect&lt;/h3&gt;&lt;p&gt;通过- 提供 getState() 方法。获取 所有的当前state&lt;br&gt;通过connect，绑定需要的state以及Action Creator到你的组件的props上，这样组件就可以通过props来调用Action Creator，或者根据不同props来render()不同的组件。&lt;br&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mapStateToProps(&amp;#123; newState &amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            const &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; = newState[&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;];//&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;: newState.&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考：&quot;&gt;&lt;a href=&quot;#参考：&quot; class=&quot;headerlink&quot; title=&quot;参考：&quot;&gt;&lt;/a&gt;参考：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://dreampiggy.com/2016/10/26/react-nativezhi-reduxjia-gou-ru-men/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux架构入门&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.codingplayboy.com/2017/10/31/react-native-app/comment-page-1/#Redux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native App应用架构设计&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使用Redux也有一段时间了。总结一下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11月总结</title>
    <link href="http://peilinghui.com/2017/11/30/11%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    <id>http://peilinghui.com/2017/11/30/11月总结/</id>
    <published>2017-11-30T13:56:24.000Z</published>
    <updated>2017-11-30T14:04:50.000Z</updated>
    
    <content type="html">&lt;p&gt;日子过得真快！从上海回杭州了，还是回杭州比较好一点。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;换了份工作，继续做ReactNative。10月17号入职的。&lt;br&gt;从入职以来也做了不少的面板。&lt;/p&gt;
&lt;h3 id=&quot;电扇面板&quot;&gt;&lt;a href=&quot;#电扇面板&quot; class=&quot;headerlink&quot; title=&quot;电扇面板&quot;&gt;&lt;/a&gt;电扇面板&lt;/h3&gt;&lt;p&gt;1.在这个项目中遇到的难点就是电扇的转动–一个动画，通过设置转速不同来改变旋转动画的快慢。转速和转向的设置，就是Animated的使用。&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const rec = () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;.anim.&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Value(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Animated.parallel([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Animated.timing(this.&lt;span class=&quot;keyword&quot;&gt;state&lt;/span&gt;.anim, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt;Value: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          easing: Easing.linear,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          duration,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ]).start(o =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (o.finished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          rec();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rec();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;初次使用Redux，了解了一些基础控件的使用，比如slider,picker，showMaskView，SwitchButtonX，还有重命名的一个控件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;yuerbao-env&quot;&gt;&lt;a href=&quot;#yuerbao-env&quot; class=&quot;headerlink&quot; title=&quot;yuerbao(env)&quot;&gt;&lt;/a&gt;yuerbao(env)&lt;/h3&gt;&lt;p&gt;这个项目中我主要是在以前的项目基础上新加一个页面，新写的页面比较简单。主要问题就在于改后的面板，出现了闪退和数据没有显示的问题。。。解决方法：把bind绑定this函数，还有就是数据没有获取到。原来的代码没看懂。&lt;/p&gt;
&lt;h3 id=&quot;yuerbaoWaterPump&quot;&gt;&lt;a href=&quot;#yuerbaoWaterPump&quot; class=&quot;headerlink&quot; title=&quot;yuerbaoWaterPump&quot;&gt;&lt;/a&gt;yuerbaoWaterPump&lt;/h3&gt;&lt;p&gt;这个项目的主要难点就是一个可触摸滑动的进度环。还有对应的标识点 和一个旋转的动画。&lt;br&gt;自己写的就是基于组件库中的Newpicker写的时间的picker和几个picker。&lt;/p&gt;
&lt;p&gt;可触摸滑动的进度环：主要是用SVG来绘图，Gesture的手势的响应，触摸的位置的坐标切换到相当于圆心点的坐标。&lt;br&gt;通过滑动的初始角度和结束角度来再次绘图SVG。同时改变标识点的位置。&lt;/p&gt;
&lt;p&gt;标识点：用SVG中的circle来绘制，通过手势滑动的位置，来改变小圆点的位置。&lt;/p&gt;
&lt;p&gt;旋转的动画：遇到的问题：在关机或者是退出后再进去动画不能连续或者是出现了多个动画的重叠。解决方法：开始动画的时候把状态设置为true，停止动画设置为false，&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.animating = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rotateAnim.setValue(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Animated.timing(rotateAnim, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;toValue&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      duration,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;easing&lt;/span&gt;: Easing.linear,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).start(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.animating) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.startAnimation();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;lowPro&quot;&gt;&lt;a href=&quot;#lowPro&quot; class=&quot;headerlink&quot; title=&quot;lowPro&quot;&gt;&lt;/a&gt;lowPro&lt;/h3&gt;&lt;p&gt;感觉好像是纯体力活，没什么复杂页面和逻辑交互，就是历史记录的处理也是用的以前的一套。&lt;/p&gt;
&lt;h3 id=&quot;cooker&quot;&gt;&lt;a href=&quot;#cooker&quot; class=&quot;headerlink&quot; title=&quot;cooker&quot;&gt;&lt;/a&gt;cooker&lt;/h3&gt;&lt;p&gt;这个项目中的逻辑比较复杂，就是各种状态的不同的页面。&lt;/p&gt;
&lt;p&gt;难点就是在每种模式运行的时候要倒计时。同时刻度要变化。倒计时和刻度的变化要同步，同时后端每隔30秒传回数据来修正时间。用setTimeout好于用serInterval。&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 倒计时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;  &lt;span class=&quot;title&quot;&gt;countdownHandle&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const handle = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      let &amp;#123; time &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      time -= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123; time &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.countdownHandle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.time &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.timerId = setTimeout(handle, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;倒计时和刻度的变化要同步:fixDegreeAndBindToInstance更新角度，mapValueToDeltaDeg。通过最后的角度/总的格子数。来算出每一个的角度&lt;/p&gt;
&lt;h3 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h3&gt;&lt;p&gt;这个项目中复杂的地方就是多个开关要区分不同的ID。&lt;/p&gt;
&lt;p&gt;业务逻辑方面理解不到位，在点击配对开关后要置灰。并且根据返回的配对结果来显示不同的成功和失败的页面。配对以后的开关才能进行清除操作。才能进行点击。&lt;/p&gt;
&lt;h2 id=&quot;技术总结以及学习巩固的方向：&quot;&gt;&lt;a href=&quot;#技术总结以及学习巩固的方向：&quot; class=&quot;headerlink&quot; title=&quot;技术总结以及学习巩固的方向：&quot;&gt;&lt;/a&gt;技术总结以及学习巩固的方向：&lt;/h2&gt;&lt;p&gt;1.熟悉JS的语法：this的绑定。何时才能取到this（static方法如：defaultProps和PropTypes取不到）&lt;br&gt;2.研究ReactNative的源码，搞清楚RN的生命周期。&lt;br&gt;3.如何使用react-native-SVG来绘图，以及如何使用Animated来做动画。&lt;br&gt;4.如何使用Redux来管理整个项目：当后台实时的改变数据以后，前端页面也能够实时的变化，了解数据的流向，Redux就是一种思想，在新数据获取到后再RN的生命周期中何时setState。Redux中的action、reducer、store、type和router来实现mapStateToProps，做到实时的与服务器交互数据。（因为setState是异步的，可能不能保证数据的同步）&lt;/p&gt;
&lt;p&gt;5.对于Gesture和一些动画的角度设置还有具体的分析还有待提高&lt;/p&gt;
&lt;p&gt;6.代码的规范方面要注意：代码规范符合eslint，国际化的问题和不同屏幕的适配。&lt;/p&gt;
&lt;h2 id=&quot;生活方面&quot;&gt;&lt;a href=&quot;#生活方面&quot; class=&quot;headerlink&quot; title=&quot;生活方面&quot;&gt;&lt;/a&gt;生活方面&lt;/h2&gt;&lt;p&gt;多运动，办了健身卡，希望可以尽快学会游泳，要时常健身，打球，业余时间还想学习一下机器学习、人工智能方面的算法的东西来写论文，有空还想学习一下如何理财的知识，以后可以用的上。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;日子过得真快！从上海回杭州了，还是回杭州比较好一点。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开发一个React-Native的APP</title>
    <link href="http://peilinghui.com/2017/09/24/%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAReact-Native%E7%9A%84APP/"/>
    <id>http://peilinghui.com/2017/09/24/开发一个React-Native的APP/</id>
    <published>2017-09-24T13:34:53.000Z</published>
    <updated>2017-09-24T14:01:24.000Z</updated>
    
    <content type="html">&lt;p&gt;从7月底到9月底两个月的时间开发了一个React-Native的APP。不得不说，用RN的开发效率还是很快的。就来总结一下历程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;整个项目的逻辑大概就是： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建项目，导入项目的图片资源，APP的图标，启动图，ios的启动图在Xcode中直接设置Launch Image和icon，对于安卓的启动图要写代码实现才行。对于项目的图片资源，可以两套系统共用一套图片那就可以放在一个文件夹下，引入的时候用相对路径导入；也可以放在Xcode或者是Android Studio中进行uri:+图片名称导入。&lt;/li&gt;
&lt;li&gt;用上一篇的第三方组件和一些基本组件大概完成了一些页面，完成了登录，手势解锁页，还有主页面的框架和主页面中一些子页面的大体显示。接下来遇到的问题大概有两个：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一：如何跳转，把这个页面都串起来，就像一些珠子如何才能串成一串：导航的使用：Navigator已经废弃，就要使用react-naviagtion来导航。&lt;/p&gt;
&lt;p&gt;第二：如何进行数据处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是如何从服务器获取数据.&lt;/li&gt;
&lt;li&gt;是如何把从服务器获取的数据进行持久化存储。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何在页面间进行参数的传递&lt;br&gt;对于数据的处理也是难点。&lt;br&gt;首先对于网络请求要用fetch，&lt;br&gt;遇到的相关问题：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取设备ID：用第三方库，补充：JS中如何把字符串中的?替换为&amp;amp;:&lt;br&gt;&lt;code&gt;var str_replaced = str.replace(/\?/g,&amp;quot;&amp;amp;&amp;quot;);//加g就是替换所有的？号&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;React-Natvie用RSA加密用户的密码:&lt;br&gt;&lt;a href=&quot;https://github.com/z-hao-wang/react-native-rsa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-rsa&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rzcoder/node-rsa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-rsa&lt;/a&gt;&lt;br&gt;虽然有这些第三方库，但是我并没有用，这个简直搞到我头大，终于搞定了！&lt;br&gt;主要是参照这两个网址：&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/Grart/p/5080228.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Grart/p/5080228.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;node-rsa的基础库&lt;/strong&gt;&lt;a href=&quot;http://www-cs-students.stanford.edu/~tjw/jsbn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www-cs-students.stanford.edu/~tjw/jsbn/&lt;/a&gt;&lt;br&gt;因为密码需要先用公钥RSA加密，然后在用base64加密，加密以后的字符串传给服务器，服务器那边再先base64解密，然后再用私钥解密。&lt;br&gt;在使用的时候最大的问题就是你要传一个N和E的参数来setPublic，这个问题困扰了我一天之久，终于后端的同学帮我搞定了，Java里面有方法可以根据已有的公钥来逆向出N和E的值，然后再使用下面的那个网页，网页，没错，就是下载下来那个网页，然后就有基本的JS文件了，其实RN就是JS，只怪自己前端不佳，然后把JS文件转化成RN可以用的JS组件库导入直接调用就可以加密成功了！终于加密成功了。感动哭。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置假数据显示一般来说都是容易的，与后台交互就需要用网络请求了。一般是GET和POST请求。POST的请求头：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般常见的网络请求：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; login=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data,doSuccess,doError&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fetch(&lt;span class=&quot;string&quot;&gt;&#39;http://&#39;&lt;/span&gt;+url+&lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          method: &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          headers: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;Accept&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          body: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; response.json();&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .then(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resData&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doSuccess(resData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .done();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而我们这个post请求头呢？是下面这样的。&lt;/p&gt;
&lt;figure class=&quot;highlight ocaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;&#39;Content&lt;/span&gt;-&lt;span class=&quot;type&quot;&gt;Type&#39;&lt;/span&gt;:&lt;span class=&quot;symbol&quot;&gt;&#39;application&lt;/span&gt;/x-www-form-urlencoded&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般在post的body中是用：&lt;br&gt;{userName:this.state.userName,passWord:_pwd}这样的JSON传过去，再body: JSON.stringify(data)。。。&lt;br&gt;而我们这个呢？data是拼接起来的，我也是醉了，这我是用Charles发请求后才发现的，也是折腾了半天才明白的。也用postman还有终端httpie发现都可以请求成功，唯独用这个请求不到，后来就拼接了一下，成功了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JSON.stringify(result);和JSON.parse(result)有什么区别啊？&lt;br&gt;用于把JavaScript对象序列化为JSON字符串和把JSON字符串解析为原生JavaScript。&lt;br&gt;JSON.stringify将JavaScript对象转换为JSON文本，并将该JSON文本存储在字符串中。&lt;br&gt;JSON.parse将一串JSON文本转换成Javascript对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当你在fetch请求后 .then((response)=&amp;gt; response.json())的时候就不用解析直接用.取。。。&lt;br&gt;当你在fetch请求后， .then((response) =&amp;gt; response.text())的时候就需要JSON.parse(result);&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初学者最容易犯错误的地方就是this指针了！！我是在导航跳转的时候意识到这个问题的。每个组件都是有props和states的。&lt;br&gt;子组件如何调用父组件：this.props。&lt;br&gt;父组件如何调用子组件：首先用属性ref给子组件取个名字吧，this.refs.名字.getDOMNode().&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从服务返回的JSON数据的解析，有些需要遍历一下。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; brandata = &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;.dangqiAnalysisBrandList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; brandeach=brandata.map((val) =&amp;gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; val[&#39;dangqiAnalysisList&#39;] &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;安卓打包&quot;&gt;&lt;a href=&quot;#安卓打包&quot; class=&quot;headerlink&quot; title=&quot;安卓打包&quot;&gt;&lt;/a&gt;安卓打包&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;生成一个签名密钥&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后它会生成一个叫做my-release-key.keystore的密钥库文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;找到路径/android/app/src/main，并在该目录下新建assets文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在工程目录下将index.android.bundle下载并保存到assets资源文件夹中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;curl -k &amp;quot;http://localhost:8081/index.android.bundle&amp;quot; &amp;gt; android/app/src/main/assets/index.android.bundle&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这句命令是重点，如果assets目录中不存在该文件，则打包的apk在执行时显示空白。&lt;/p&gt;
&lt;p&gt;Protocol ‘http not supported or disabled in libcurl&lt;/p&gt;
&lt;p&gt;Windows下安装使用curl命令:&lt;a href=&quot;http://jingyan.baidu.com/article/a681b0dec4c67a3b1943467c.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jingyan.baidu.com/article/a681b0dec4c67a3b1943467c.html&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加gradle的android keystore配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打包的apk在未签名的情况下,在手机中（非root）是不允许安装的&lt;/p&gt;
&lt;p&gt;在build.gradle文件中&lt;/p&gt;
&lt;p&gt;  //签名&lt;br&gt;&lt;code&gt;signingConfigs{
    release {
        storeFile file(&amp;quot;/my-release-key.keystore&amp;quot;)
        storePassword &amp;quot;密码&amp;quot;
        keyAlias &amp;quot;keyAlias的名字&amp;quot;
        keyPassword &amp;quot;密码&amp;quot;
    }
}
 buildTypes {
    release {
        minifyEnabled false
        proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
        signingConfig signingConfigs.release //添加这句话引用签名配置
    }
}&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启用Proguard代码混淆来缩小APK文件的大小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Proguard是一个Java字节码混淆压缩工具，它可以移除掉React Native Java（和它的依赖库中）中没有被使用到的部分，最终有效的减少APK的大小。&lt;/p&gt;
&lt;p&gt;重要：启用Proguard之后，你必须再次全面地测试你的应用。Proguard有时候需要为你引入的每个原生库做一些额外的配置。参见app/proguard-rules.pro文件。&lt;/p&gt;
&lt;p&gt;def enableProguardInReleaseBuilds = true&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在/android/目录中执行gradle assembleRelease命令，打包后的文件在 android/app/build/outputs/apk目录中，例如app-release.apk。如果打包碰到问题可以先执行 gradle clean 清理一下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一定要注意：在打包的时候要运行起来安卓。&lt;br&gt;安装gradle工具（版本与android\gradle\wrapper下的一致），并配置环境变量，配置GRADLE_HOME到你的gradle根目录当中，然后把%GRADLE_HOME%/bin（linux或mac的是$GRADLE_HOME/bin）加到PATH的环境变量。&lt;br&gt;mac要配置gradle的环境变量的路径&lt;/p&gt;
&lt;p&gt;配置完成之后，运行gradle -v，检查一下是否安装无误&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将apk发布到各大应用市场（BUILD SUCCESSFUL）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;iOS打包&quot;&gt;&lt;a href=&quot;#iOS打包&quot; class=&quot;headerlink&quot; title=&quot;iOS打包&quot;&gt;&lt;/a&gt;iOS打包&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在项目的目录下建立bundle文件夹。然后执行如下命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;react-native bundle --entry-file index.ios.js --platform ios --bundle-output ./bundle/main.jsbundle --dev false --assets-dest ./bundle/&lt;/code&gt;&lt;br&gt;几分钟过后，在 bundle 文件夹里会多出个 assets 文件夹和 main.jsbundle 文件。不然会提示npm install…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把刚刚得到的 main.jsbundle 和 assets 文件夹添加到项目中， 在 Xcode 中 assets 资源文件夹比较特殊，必须用 Create folder references 的方式添加进去，添加完后是蓝色文件夹图标.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改 AppDelegate.m 文件&lt;br&gt;在XCODE里打开 APPDELEGATE.M 文件，找到代码 JSCODELOCATION = [[RCTBUNDLEURLPROVIDER SHAREDSETTINGS]，在其下方添加以下代码 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&amp;quot;main&amp;quot; withExtension:@&amp;quot;jsbundle&amp;quot;];&lt;/code&gt;&lt;br&gt;注意：代码里的 @”main” 和 @”jsbundle”，与之前生成的文件 main.jsbundle 对应。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在XCODE里点击运行，使用模拟器测试APP能否正常运行。&lt;/li&gt;
&lt;li&gt;和在Xcode里面打包原生应用一样的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;打包遇到的问题&quot;&gt;&lt;a href=&quot;#打包遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;打包遇到的问题&quot;&gt;&lt;/a&gt;打包遇到的问题&lt;/h1&gt;&lt;h3 id=&quot;native-echarts的组件问题-—–真机上面React-echart显示不了吗？白色的。&quot;&gt;&lt;a href=&quot;#native-echarts的组件问题-—–真机上面React-echart显示不了吗？白色的。&quot; class=&quot;headerlink&quot; title=&quot;native-echarts的组件问题 —–真机上面React-echart显示不了吗？白色的。&quot;&gt;&lt;/a&gt;native-echarts的组件问题 —–真机上面React-echart显示不了吗？白色的。&lt;/h3&gt;&lt;p&gt;主要是因为路径不对。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;br&gt;将node_modules/native-echarts/src/components/Echarts/tpl.html拷贝到assets下需要修改node_modules/native-echarts/src/components/Echarts/index.js&lt;br&gt;&lt;strong&gt;IOS&lt;/strong&gt;&lt;br&gt; 将tpl.html  放置  Xcode项目 下面 然后如下引用,修改源码下面的index.js&lt;br&gt; 为下面的：&lt;/p&gt;
 &lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; import &lt;span class=&quot;constant&quot;&gt;React&lt;/span&gt;, &amp;#123; &lt;span class=&quot;constant&quot;&gt;Component&lt;/span&gt; &amp;#125; from &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; &lt;span class=&quot;constant&quot;&gt;WebView&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;View&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;StyleSheet&lt;/span&gt; &amp;#125; from &lt;span class=&quot;string&quot;&gt;&#39;react-native&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import renderChart from &lt;span class=&quot;string&quot;&gt;&#39;./renderChart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import echarts from &lt;span class=&quot;string&quot;&gt;&#39;./echarts.min&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export default &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  componentWillReceiveProps(nextProps) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nextProps.option !== this.props.option) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.refs.chart.reload();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;constant&quot;&gt;View&lt;/span&gt; style=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;symbol&quot;&gt;flex:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;height:&lt;/span&gt; this.props.height || &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,&amp;#125;&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;span class=&quot;constant&quot;&gt;Platform&lt;/span&gt;.&lt;span class=&quot;constant&quot;&gt;OS&lt;/span&gt;===&lt;span class=&quot;string&quot;&gt;&#39;ios&#39;&lt;/span&gt;?(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;lt;&lt;span class=&quot;constant&quot;&gt;WebView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               ref=&lt;span class=&quot;string&quot;&gt;&quot;chart&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               scrollEnabled = &amp;#123;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               injectedJavaScript = &amp;#123;renderChart(this.props)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               style=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;symbol&quot;&gt;height:&lt;/span&gt; this.props.height || &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               source=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;symbol&quot;&gt;uri:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;tpl.html&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       ):(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;lt;&lt;span class=&quot;constant&quot;&gt;WebView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               ref=&lt;span class=&quot;string&quot;&gt;&quot;chart&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               scrollEnabled = &amp;#123;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               injectedJavaScript = &amp;#123;renderChart(this.props)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               style=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;symbol&quot;&gt;height:&lt;/span&gt; this.props.height || &lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               source=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;symbol&quot;&gt;uri:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;file:///android_asset/tpl.html&#39;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       )&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/View&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;真机测试时候发现的问题&quot;&gt;&lt;a href=&quot;#真机测试时候发现的问题&quot; class=&quot;headerlink&quot; title=&quot;真机测试时候发现的问题&quot;&gt;&lt;/a&gt;真机测试时候发现的问题&lt;/h1&gt;&lt;h3 id=&quot;react-navigation的问题：&quot;&gt;&lt;a href=&quot;#react-navigation的问题：&quot; class=&quot;headerlink&quot; title=&quot;react-navigation的问题：&quot;&gt;&lt;/a&gt;react-navigation的问题：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ios上面：&lt;br&gt;手势左边滑动就能返回到上一个页面，这样在你不需要返回的时候也返回了。&lt;br&gt;解决方法：&lt;br&gt;gesturesEnabled：是否支持滑动返回收拾，iOS默认支持，安卓默认关闭。设置为false试了一下。&lt;br&gt;参照文章：&lt;a href=&quot;https://hans007.github.io/react-native/2017/06/19/react-navigation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hans007.github.io/react-native/2017/06/19/react-navigation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android上面：物理返回键的处理。&lt;br&gt;BackAndroid已经废弃了，使用BackHandler，大概思路就是添加监听，&lt;br&gt;之前使用Navigator的时候，可以通过下面的方法实现监听安卓的返回键，但使用了react-navigation后，会很迷茫，不知该怎么监听了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决办法：集成Redux咯！集成完Redux，在跳转之后，就能获得路由的length，可以通过length来判断当前页面是第几层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Navigator的方法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentWillMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BackAndroid.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;hardwareBackPress&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentWillUnmount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BackAndroid.removeEventListener(&lt;span class=&quot;string&quot;&gt;&#39;hardwareBackPress&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;onBackAndroid&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const nav = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.navigator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const routers = nav.getCurrentRoutes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (routers.length &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      nav.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;react-navigation的方式&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentWillMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BackHandler.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;handwareBackPress&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;componentWillUnmount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Platform.OS === &lt;span class=&quot;string&quot;&gt;&#39;android&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BackHandler.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;handwareBackPress&#39;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBackAndroid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;onBackAndroid&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const routers = nav.getCurrentRoutes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (routers.length &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 在跳转之后的页面中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;onBackAndroid&lt;/span&gt; = &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;=&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const &amp;#123;routes&amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(routes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; alert(routes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (routes.length &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 因为其他页面获得不到&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props，所以只能每个页面都写这个方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.navigation.goBack();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;其他小问题&quot;&gt;&lt;a href=&quot;#其他小问题&quot; class=&quot;headerlink&quot; title=&quot;其他小问题&quot;&gt;&lt;/a&gt;其他小问题&lt;/h3&gt;&lt;p&gt; 需要把服务器取过来的数字(也有可能是数字字符串)，将小数点前的数字每隔三位添加一个逗号（前面数是一个四位数的值）。比如取到的值是123456，要将其转换成123,456。搜索了一下，这叫数字分位符号。&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;代码量：近1万行，调通近40个接口。还有很多方面要优化，比如没有用Redux。还有一些其他方面的逻辑也有待优化。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从7月底到9月底两个月的时间开发了一个React-Native的APP。不得不说，用RN的开发效率还是很快的。就来总结一下历程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReactNative的常用组件</title>
    <link href="http://peilinghui.com/2017/07/27/ReactNative%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://peilinghui.com/2017/07/27/ReactNative的常用组件/</id>
    <published>2017-07-27T02:16:21.000Z</published>
    <updated>2017-08-19T03:08:25.000Z</updated>
    
    <content type="html">&lt;p&gt;在开发RN的时候所需用的常用开源组件。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;IDE&quot;&gt;&lt;a href=&quot;#IDE&quot; class=&quot;headerlink&quot; title=&quot;IDE&quot;&gt;&lt;/a&gt;IDE&lt;/h1&gt;&lt;p&gt;刚开始开发的时候用的是Webstrom或者是Sublime，后来发现一个超级IDE：&lt;br&gt;&lt;a href=&quot;https://www.decoide.org/docs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.decoide.org/docs&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除了官方文档的一些常用组件，还有一些在项目开发中的常用组件。&lt;/p&gt;
&lt;h1 id=&quot;常用组件&quot;&gt;&lt;a href=&quot;#常用组件&quot; class=&quot;headerlink&quot; title=&quot;常用组件&quot;&gt;&lt;/a&gt;常用组件&lt;/h1&gt;&lt;h2 id=&quot;获取设备相关信息&quot;&gt;&lt;a href=&quot;#获取设备相关信息&quot; class=&quot;headerlink&quot; title=&quot;获取设备相关信息&quot;&gt;&lt;/a&gt;获取设备相关信息&lt;/h2&gt;&lt;p&gt;设备deviceID：&lt;a href=&quot;https://github.com/rebeccahughes/react-native-device-info&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-device-info&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h2&gt;&lt;p&gt;手势解锁：&lt;a href=&quot;https://github.com/spikef/react-native-gesture-password&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gesture-password&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面那个经过测试不好用,用这个：&lt;br&gt;&lt;strong&gt;大小手势解锁：&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/react-native-component/react-native-smart-gesture-password&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-smart-gesture-password&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Touch id指纹解锁：&lt;a href=&quot;https://github.com/naoufal/react-native-touch-id&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;touch-id&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;搜索框：&lt;a href=&quot;https://github.com/umhan35/react-native-search-bar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ios可以用的搜索框&lt;/a&gt;&lt;br&gt;&lt;strong&gt;好看的搜索Box：&lt;/strong&gt;：&lt;a href=&quot;&quot;&gt;react-native-search-box&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h2&gt;&lt;p&gt;底部tab组件：&lt;a href=&quot;https://github.com/happypancake/react-native-tab-navigator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-tab-navigator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;侧滑栏：&lt;/strong&gt;&lt;a href=&quot;https://github.com/react-native-community/react-native-side-menu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;side-Menu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顶部tab的滑动&lt;/strong&gt;：&lt;a href=&quot;https://github.com/skv-headless/react-native-scrollable-tab-view&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;scrollable-tab-view&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提示框toast：&lt;a href=&quot;https://github.com/magicismight/react-native-root-toast&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;toast&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下拉刷新组件 &lt;a href=&quot;https://github.com/jsdf/react-native-refreshable-listview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jsdf/react-native-refreshable-listview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模态框 &lt;a href=&quot;https://github.com/brentvatne/react-native-modal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/brentvatne/react-native-modal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;react-native-navbar &lt;a href=&quot;https://github.com/react-native-fellowship/react-native-navbar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/react-native-fellowship/react-native-navbar&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;下拉选择菜单：&lt;/strong&gt;&lt;a href=&quot;https://github.com/WheelerLee/react-native-dropdown-menu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dropdown-menu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;折线图，柱状图，条形图：&lt;a href=&quot;https://github.com/somonus/react-native-echarts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-echarts&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;日历&quot;&gt;&lt;a href=&quot;#日历&quot; class=&quot;headerlink&quot; title=&quot;日历&quot;&gt;&lt;/a&gt;日历&lt;/h1&gt;&lt;p&gt;发现超好用还好看的日历组件：&lt;a href=&quot;https://github.com/xgfe/react-native-datepicker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;datepicker&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在开发RN的时候所需用的常用开源组件。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS应用APP架构</title>
    <link href="http://peilinghui.com/2017/07/14/iOS%E5%BA%94%E7%94%A8APP%E6%9E%B6%E6%9E%84/"/>
    <id>http://peilinghui.com/2017/07/14/iOS应用APP架构/</id>
    <published>2017-07-14T02:54:01.000Z</published>
    <updated>2017-07-14T07:31:47.000Z</updated>
    
    <content type="html">&lt;p&gt;对于网络层的改造其实就相当于iOS应用的APP的架构了，然后就去查了相关的资料。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;发现几篇很好的博文：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/ios-app-arch-part-01?utm_source=infoq&amp;amp;utm_campaign=user_page&amp;amp;utm_medium=link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈（一）：架构设计的方法论&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/ios-app-arch-2-1?utm_source=infoq&amp;amp;utm_campaign=user_page&amp;amp;utm_medium=link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈（二）：View层的组织和调用方案（上）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/ios-app-arch-3-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS应用架构谈（三）：网络层设计方案(上)&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于网络层的改造其实就相当于iOS应用的APP的架构了，然后就去查了相关的资料。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS网络层的封装</title>
    <link href="http://peilinghui.com/2017/07/10/iOS%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>http://peilinghui.com/2017/07/10/iOS网络层的封装/</id>
    <published>2017-07-10T13:26:39.000Z</published>
    <updated>2017-07-13T09:44:38.000Z</updated>
    
    <content type="html">&lt;p&gt;对于项目的重构，很重要的就是对网络层的重构，其实也就是对AFN的二次封装。对于AFN的介绍在前一篇：&lt;a href=&quot;&quot;&gt;研究AFNetworking框架&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;AFN2.0是基于NSURLConnection封装的。而AFN3.0是基于NSURLSession封装的。(NSURLSession是iOS7推出的是为了取代NSURLConnection的)。&lt;/p&gt;
&lt;h1 id=&quot;关于AFN3-0&quot;&gt;&lt;a href=&quot;#关于AFN3-0&quot; class=&quot;headerlink&quot; title=&quot;关于AFN3.0&quot;&gt;&lt;/a&gt;关于AFN3.0&lt;/h1&gt;&lt;h2 id=&quot;HTTP协议&quot;&gt;&lt;a href=&quot;#HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议&quot;&gt;&lt;/a&gt;HTTP协议&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;客户端发给服务器的HTTP请求包含了：&lt;br&gt;&lt;strong&gt;请求行&lt;/strong&gt;：请求方法、请求资源路径、HTTP协议版本号&lt;br&gt;GET /index.htm HTTP/1.1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;请求头：&lt;/strong&gt;对客户端环境的描述，客户端请求的主机的地址。&lt;br&gt;HOST: 192.168.1.105：8080&lt;br&gt;User-Agent:MAC或者IPhone （客户端环境）&lt;br&gt;Accept：text/html   (客户端所能接受的数据类型)&lt;br&gt;Accept-Language：zh-cn   （客户端的语言）&lt;/p&gt;
&lt;p&gt;在POST中有&lt;strong&gt;请求体：&lt;/strong&gt;客户端发给服务器的具体数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器返回给客户端的HTTP响应包含了：（NSHTTPUELResponse）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;状态行：&lt;/strong&gt;协议版本、状态码、状态英文名称&lt;br&gt;HTTP/1.1 200 OK&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;响应头：&lt;/strong&gt;对服务器的描述、对返回数据的描述。&lt;br&gt;Server：Apache             （服务器）&lt;br&gt;Date: Sat,  22:07:00 GMT&lt;br&gt;Content-Length: 500      （返回数据长度）&lt;br&gt;Content-Type: text/html  (返回数据类型)  &lt;/p&gt;
&lt;p&gt;&lt;html&gt;…..&lt;/html&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实体内容：&lt;/strong&gt;服务器返回给客户端的具体数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1436896-f274db501af46b86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;屏幕快照 2016-11-07 下午4.44.02.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GET与POST&lt;br&gt;GET：所有的请求参数都拼接在URL后面，如果访问资源，向服务器索要数据就是GET请求。URL长度有限，不能发送太多数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;POST：把所有请求参数放在请求体(HTTPBody)中，发给服务器的长度没有限制，&lt;br&gt;200：请求成功。 400：客户端请求的语法错误，服务器无法解析。&lt;br&gt;404：服务器无法根据客户端的请求找到资源。&lt;br&gt;500：服务器内部错误，无法完成请求。&lt;/p&gt;
&lt;p&gt;URL还要注意对中文的转码：&lt;br&gt;方法：&lt;code&gt;urlString = [urlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;如何使用-NSURLSession-发出-HTTP-请求&quot;&gt;&lt;a href=&quot;#如何使用-NSURLSession-发出-HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;如何使用 NSURLSession 发出 HTTP 请求&quot;&gt;&lt;/a&gt;如何使用 NSURLSession 发出 HTTP 请求&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1.得到session对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURLSession&lt;/span&gt; *session = [&lt;span class=&quot;built_in&quot;&gt;NSURLSession&lt;/span&gt; sharedSession];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *url = [&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; URLWithString:&lt;span class=&quot;string&quot;&gt;@&quot;http://。。。/Server/login&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;NSMutableURLRequest&lt;/span&gt; *request = [&lt;span class=&quot;built_in&quot;&gt;NSMutableURLRequest&lt;/span&gt; requestWithURL:url];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request&lt;span class=&quot;variable&quot;&gt;.HTTPMethod&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;@&quot;POST&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置请求体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request&lt;span class=&quot;variable&quot;&gt;.HTTPBody&lt;/span&gt; = [&lt;span class=&quot;string&quot;&gt;@&quot;username=123&amp;amp;pwd=123&quot;&lt;/span&gt; dataUsingEncoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 设置请求头信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[request setValue:&lt;span class=&quot;string&quot;&gt;@&quot;iPhone 6&quot;&lt;/span&gt; forHTTPHeaderField:&lt;span class=&quot;string&quot;&gt;@&quot;User-Agent&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; *task = [session dataTaskWithRequest:request completionHandler:^(&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *data, &lt;span class=&quot;built_in&quot;&gt;NSURLResponse&lt;/span&gt; *response, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//系统的解析方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *dict = [&lt;span class=&quot;built_in&quot;&gt;NSJSONSerialization&lt;/span&gt; JSONObjectWithData:data options:&lt;span class=&quot;built_in&quot;&gt;NSJSONReadingMutableLeaves&lt;/span&gt; error:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;----%@&quot;&lt;/span&gt;, dict);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3.开始任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[task resume];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;如何使用-AFNetworking-发出-HTTP-请求&quot;&gt;&lt;a href=&quot;#如何使用-AFNetworking-发出-HTTP-请求&quot; class=&quot;headerlink&quot; title=&quot;如何使用 AFNetworking 发出 HTTP 请求&quot;&gt;&lt;/a&gt;如何使用 AFNetworking 发出 HTTP 请求&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;manager&lt;span class=&quot;variable&quot;&gt;.responseSerializer&lt;/span&gt; = [AFHTTPResponseSerializer serializer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[manager POST:&lt;span class=&quot;string&quot;&gt;@&quot;http://baidu.com/verification/user/loginNew.htm?token=&amp;amp;random=27289&amp;amp;version=1.19.0&quot;&lt;/span&gt; parameters:dict progress:^(&lt;span class=&quot;built_in&quot;&gt;NSProgress&lt;/span&gt; * _Nonnull downloadProgress) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;请求成功&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;success:^(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; * _Nonnull task, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;  _Nullable responseObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//请求返回的数据(二进制数据)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;responseObject(二进制) = %@&quot;&lt;/span&gt;,responseObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//转化二进制数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;responseObject = %@&quot;&lt;/span&gt;, [[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; alloc] initWithData:responseObject encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; oaLoginSuccess];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;failure:^(&lt;span class=&quot;built_in&quot;&gt;NSURLSessionDataTask&lt;/span&gt; * _Nullable task, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; * _Nonnull   error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,error);  &lt;span class=&quot;comment&quot;&gt;//这里打印错误信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在 iOS9 中，苹果默认全局 HTTPs，如果你要发送不安全的 HTTP 请求，需要在 info.plist 中加入如下键值对才能发出不安全的 HTTP 请求.&lt;br&gt;还有一件事情是要注意的是，AFNetworking 默认接收 json 格式的响应（因为这是在 iOS 平台上的框架，一般不需要 text/html），如果想要返回 html，需要设置 acceptableContentTypes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;AFN中的相应类&quot;&gt;&lt;a href=&quot;#AFN中的相应类&quot; class=&quot;headerlink&quot; title=&quot;AFN中的相应类&quot;&gt;&lt;/a&gt;AFN中的相应类&lt;/h3&gt;&lt;h5 id=&quot;AFURLSessionManager-核心类&quot;&gt;&lt;a href=&quot;#AFURLSessionManager-核心类&quot; class=&quot;headerlink&quot; title=&quot;AFURLSessionManager(核心类)&quot;&gt;&lt;/a&gt;AFURLSessionManager(核心类)&lt;/h5&gt;&lt;p&gt;AFURLSessionManager 是 AFHTTPSessionManager 的父类&lt;br&gt;AFURLSessionManager 负责生成 NSURLSession 的实例，管理 AFSecurityPolicy 和 AFNetworkReachabilityManager，来保证请求的安全和查看网络连接情况，它有一个 AFJSONResponseSerializer 的实例来序列化 HTTP 响应&lt;/p&gt;
&lt;h5 id=&quot;AFHTTPSessionManager&quot;&gt;&lt;a href=&quot;#AFHTTPSessionManager&quot; class=&quot;headerlink&quot; title=&quot;AFHTTPSessionManager&quot;&gt;&lt;/a&gt;AFHTTPSessionManager&lt;/h5&gt;&lt;p&gt;其中 AFHTTPSessionManager 有着自己的 AFHTTPRequestSerializer 和 AFJSONResponseSerializer 来管理请求和响应的序列化，同时依赖父类提供的接口保证安全、监控网络状态，实现发出 HTTP 请求这一核心功能&lt;/p&gt;
&lt;h5 id=&quot;AFURLRequestSerialization&quot;&gt;&lt;a href=&quot;#AFURLRequestSerialization&quot; class=&quot;headerlink&quot; title=&quot;AFURLRequestSerialization&quot;&gt;&lt;/a&gt;AFURLRequestSerialization&lt;/h5&gt;&lt;p&gt;主要用于 AFHTTPSessionManager 中，因为它主要用于修改 HTTP 头部，提供了一些语义明确的接口设置 HTTP 头部字段。HTTP 头部字段 Accept-Language User-Agent&lt;/p&gt;
&lt;h5 id=&quot;AFURLResponseSerialization&quot;&gt;&lt;a href=&quot;#AFURLResponseSerialization&quot; class=&quot;headerlink&quot; title=&quot;AFURLResponseSerialization&quot;&gt;&lt;/a&gt;AFURLResponseSerialization&lt;/h5&gt;&lt;p&gt;处理响应的模块，将请求返回的数据解析成对应的格式。这个模块使用在 AFURLSessionManager 也就是核心类中&lt;/p&gt;
&lt;h3 id=&quot;为什么要对AFN进行二次封装呢？&quot;&gt;&lt;a href=&quot;#为什么要对AFN进行二次封装呢？&quot; class=&quot;headerlink&quot; title=&quot;为什么要对AFN进行二次封装呢？&quot;&gt;&lt;/a&gt;为什么要对AFN进行二次封装呢？&lt;/h3&gt;&lt;p&gt;上面这种写法可维护性差：主要是因为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址是写死的字符串，对于一个应用来说，网络请求的地址通常是统一而且具有规律的。如果大量的请求都用这种写法，那么想要统一进行修改的话就变得很困难。&lt;/li&gt;
&lt;li&gt;没有统一的请求和响应过滤机制。通常客户端开发当中需要对于请求和响应进行一些处理，例如在请求中加入验证字段（如 Token），以验证请求的合法性。&lt;/li&gt;
&lt;li&gt;对 AFNetworking 产生了强依赖，如果要进行网络库的替换，成本会非常高。  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;随着应用复杂程度的增加，上面这种在控制层直接对网络请求层进行交互的方式，会产生越来越多的问题。因此有必要通过单独的一层把控制层（业务层）和网络请求层隔离开来，这一层我们暂时把它叫做“网络封装层”。&lt;/p&gt;
&lt;h3 id=&quot;封装的目标&quot;&gt;&lt;a href=&quot;#封装的目标&quot; class=&quot;headerlink&quot; title=&quot;封装的目标&quot;&gt;&lt;/a&gt;封装的目标&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;监测网络状态&lt;/li&gt;
&lt;li&gt;业务层和网络层分离&lt;/li&gt;
&lt;li&gt;处理环境的变化，开发，测试，预发布，发布&lt;/li&gt;
&lt;li&gt;处理GET、POST、下载、上传的操作&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;如何封装&quot;&gt;&lt;a href=&quot;#如何封装&quot; class=&quot;headerlink&quot; title=&quot;如何封装&quot;&gt;&lt;/a&gt;如何封装&lt;/h2&gt;封装主要是把业务层和网络层分开，此次的封装分为三层：&lt;blockquote&gt;
&lt;p&gt;第一层：首先，从应用层ViewController获取参数，这个参数传到第二层的业务Service，在回调中利用网络请求返回的responseModel来显示在页面上。&lt;br&gt;第二层：设置一个BaseService，然后+LoginService。BaseService中主要是配置公有的参数。在每个业务层的Service中设置每一个的接口定义。业务层主要是暴露接口的定义，而BaseService中定义了BaseRequestModel来实现发起请求到第三层Client。&lt;br&gt;第三层：这层就是CLient，由ASI或者AFN充当，发起网络请求。这一层最好是个单例，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;BaseRequestModel中定义了：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PLHRequestModel&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//网络请求参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nonnull, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * serverRoot; &lt;span class=&quot;comment&quot;&gt;//网络请求的根地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nonnull, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * actionPath;&lt;span class=&quot;comment&quot;&gt;//发起响应的二级地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; timeout;  &lt;span class=&quot;comment&quot;&gt;//时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) PLHHTTPRequestType requestType;  &lt;span class=&quot;comment&quot;&gt;//网络请求方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nonnull, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * serviceName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nullable, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *apiVersion;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, nullable, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *parameters; &lt;span class=&quot;comment&quot;&gt;// 请求参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) PLHHTTPServiceType serviceType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Client&quot;&gt;&lt;a href=&quot;#Client&quot; class=&quot;headerlink&quot; title=&quot;Client&quot;&gt;&lt;/a&gt;Client&lt;/h3&gt;&lt;p&gt;单例的，定义了AFURLSessionManager *sessionManager;生成并且发出网络请求。或者直接继承自AFURLSessionManager&lt;/p&gt;
&lt;h4 id=&quot;PLHHTTPRequestSerializer&quot;&gt;&lt;a href=&quot;#PLHHTTPRequestSerializer&quot; class=&quot;headerlink&quot; title=&quot;PLHHTTPRequestSerializer&quot;&gt;&lt;/a&gt;PLHHTTPRequestSerializer&lt;/h4&gt;&lt;p&gt;单例的，生成AFHTTPRequestSerializer，或者直接继承自AFHTTPRequestSerializer。为的是生成NSURLRequest&lt;/p&gt;
&lt;h4 id=&quot;PLHRequestModel&quot;&gt;&lt;a href=&quot;#PLHRequestModel&quot; class=&quot;headerlink&quot; title=&quot;PLHRequestModel&quot;&gt;&lt;/a&gt;PLHRequestModel&lt;/h4&gt;&lt;h4 id=&quot;PLHResponseModel&quot;&gt;&lt;a href=&quot;#PLHResponseModel&quot; class=&quot;headerlink&quot; title=&quot;PLHResponseModel&quot;&gt;&lt;/a&gt;PLHResponseModel&lt;/h4&gt;&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://draveness.me/afnetworking1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AFNetworking 概述&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于项目的重构，很重要的就是对网络层的重构，其实也就是对AFN的二次封装。对于AFN的介绍在前一篇：&lt;a href=&quot;&quot;&gt;研究AFNetworking框架&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目重构遇到的问题</title>
    <link href="http://peilinghui.com/2017/07/05/%E9%A1%B9%E7%9B%AE%E9%87%8D%E6%9E%84%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://peilinghui.com/2017/07/05/项目重构遇到的问题/</id>
    <published>2017-07-05T07:12:10.000Z</published>
    <updated>2017-07-20T07:23:55.000Z</updated>
    
    <content type="html">&lt;p&gt;在项目重构的时候难免会遇到问题。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;加入了新公司，也是接手了一个14年的项目，项目大概6万行代码。然后准备做一些业务并且重构，做了一个需求以后开始重构，然后发现每走一步都是坑啊。上家公司也是14年的代码，那个时候是我们那个老大架构师也是刚去的带我们重构(顺便说一句上家公司代码大概20万行)现在自己准备着手的时候感觉我上一个老大真的好厉害额。5年工作经验额。我等菜鸟还要慢慢踩坑，慢慢修炼呐~&lt;/p&gt;
&lt;p&gt;不得不说，这两个旧的项目有很多共同点呐，可能那个时候流行那么写，不过从上家公司走的时候那个代码都已经重构的很不错了额。关键是上家公司做iOS的人就接近10个了。实话说，我都觉得自己的用处不大了。然后现在就我和我老大两个做iOS的了。不管怎么说，加油💪把！努力提高自己才是关键。&lt;/p&gt;
&lt;p&gt;旧项目的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用老式框架 ASI，并且没有做任何封装和抽取； 如果工程是ARC的 第三方文件编译选项加上-fno-objc-arc -O0&lt;/li&gt;
&lt;li&gt;字典转模型用的是Jastor.&lt;/li&gt;
&lt;li&gt;没有使用 Cocoa Pods，所有框架都是拖进去的。&lt;/li&gt;
&lt;li&gt;所有的网络请求只用了两个方法，一个同步一个异步。&lt;/li&gt;
&lt;li&gt;所有的VC都是用的代码写的，布局用的frame，这点还好一点，上家公司一大片storyboard，新加需求能把人逼疯的那种。&lt;/li&gt;
&lt;li&gt;一个VC的数据模型在一个类中。&lt;/li&gt;
&lt;li&gt;代码不规范，没有用固定的前缀，Deployment Target设置为6.0.当你把target设置为8.0的时候，警告暴增，很多的方法以及过期了。&lt;/li&gt;
&lt;li&gt;目录结构：项目中目录结构还算清晰，文件中的目录都没有，一大片.h和.m文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了上家公司的经验，我有个初步的计划和构想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把第三方的库可以把一些替换成Pod管理。&lt;/li&gt;
&lt;li&gt;对于网络层以前用的ASI，如果有新的需求就要用AFN，然后对于AFN进行一些封装，写的网络请求的方法要有successBlock和failureBlock。对于数据转模型用yymodel。&lt;/li&gt;
&lt;li&gt;可以写if debug运行环境的配置代码，来切换测试，预发和正式环境。或者我发现用SwitchHost直接切换环境开发的人比较方便，对于测试的人，就得用Charles或者是fiddler的抓包工具设置代理连到自己的电脑来切换到不同的环境测试。&lt;/li&gt;
&lt;li&gt;打包现在是用Xcode的手工打包可以引入Jenkins来实现自动化打包的模式。这就需要搭建Jenkins服务器和配置到gitlab上面。&lt;/li&gt;
&lt;li&gt;Jenkins也可以结合OCLint实现代码的review。&lt;/li&gt;
&lt;li&gt;使用 fir 和 fastlane 实现 iOS 持续集成。实现iOS应用发布流程的自动化&lt;/li&gt;
&lt;li&gt;对于推送可以使用极光推送还有一些统计崩溃率的第三方工具，还有设置埋点来统计APP的功能。&lt;/li&gt;
&lt;li&gt;对于一些登录还有一些公共组件可以抽取成私有的Pod，然后打tag，以便可以共用。&lt;/li&gt;
&lt;li&gt;对于业务方面就是要把数据和业务分离，对于重复出现的tableview可以写基类，然后再进行扩展。&lt;/li&gt;
&lt;li&gt;对于页面的布局要用masonary框架。&lt;/li&gt;
&lt;li&gt;对于一些第三方的框架和组件旧的逐步替换成新的第三方(一直有人维护和更新)的框架。&lt;/li&gt;
&lt;li&gt;当然最最重要的就是把代码进行完善，然后实现业务需求的继续扩张。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，上面都是我暂时的目标和想法，还有待去实践和一步步的改造。需要足够的耐心和坚持。&lt;/p&gt;
&lt;p&gt;在这期间遇到的一些问题：&lt;/p&gt;
&lt;h1 id=&quot;错误1：clang-error-Linker-command-failed-with-exit-code-1&quot;&gt;&lt;a href=&quot;#错误1：clang-error-Linker-command-failed-with-exit-code-1&quot; class=&quot;headerlink&quot; title=&quot;错误1：clang error: Linker command failed with exit code 1&quot;&gt;&lt;/a&gt;错误1：clang error: Linker command failed with exit code 1&lt;/h1&gt;&lt;h2 id=&quot;解决方法：-m文件被重复编译&quot;&gt;&lt;a href=&quot;#解决方法：-m文件被重复编译&quot; class=&quot;headerlink&quot; title=&quot;解决方法：.m文件被重复编译&quot;&gt;&lt;/a&gt;解决方法：.m文件被重复编译&lt;/h2&gt;&lt;p&gt;好好检查代码，看是不是在.m文件中的引入写成了引入.m文件。&lt;br&gt;看看是不是有新添加的文件跟之前文件同名&lt;br&gt;2，错误信息中出现了某个类的名字，去原文件中看看#import了哪些第三方库，把这些库挨个注释排除，找到出错的那个库，然后按照官方提供的步骤重新添加一遍。&lt;/p&gt;
&lt;h2 id=&quot;解决方法：使用Pod管理的时候&quot;&gt;&lt;a href=&quot;#解决方法：使用Pod管理的时候&quot; class=&quot;headerlink&quot; title=&quot;解决方法：使用Pod管理的时候&quot;&gt;&lt;/a&gt;解决方法：使用Pod管理的时候&lt;/h2&gt;&lt;p&gt;在把引入的第三方库改为Cocoapods管理的时候，遇到Linker command failed。&lt;br&gt;链接文件没有找到CocoaPods中的文件，&lt;/p&gt;
&lt;h3 id=&quot;解决方法1：&quot;&gt;&lt;a href=&quot;#解决方法1：&quot; class=&quot;headerlink&quot; title=&quot;解决方法1：&quot;&gt;&lt;/a&gt;解决方法1：&lt;/h3&gt;&lt;p&gt;找到 Build settings-&amp;gt;Linking-&amp;gt;Other Linker Flags&lt;br&gt;将此属性修改成-all_load 或者 -ObjC ，这个视情况而定。总之可以多试几次。&lt;/p&gt;
&lt;h3 id=&quot;解决方法2：&quot;&gt;&lt;a href=&quot;#解决方法2：&quot; class=&quot;headerlink&quot; title=&quot;解决方法2：&quot;&gt;&lt;/a&gt;解决方法2：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Go to project path and remove Pods folder and Podfile.lock file.&lt;/li&gt;
&lt;li&gt;Reinstall pods again using “pod install” command.&lt;/li&gt;
&lt;li&gt;Open xcworkspace and clean it before running.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解决方法3：&quot;&gt;&lt;a href=&quot;#解决方法3：&quot; class=&quot;headerlink&quot; title=&quot;解决方法3：&quot;&gt;&lt;/a&gt;解决方法3：&lt;/h3&gt;&lt;p&gt;如果添加的是第三方静态库（.a文件）&lt;br&gt;这种情况就可能是这个静态库路径混乱导致的链接错误。解决方法：Build settings-&amp;gt;Search Path-&amp;gt;Library Search Paths 添加静态库的相应路径。&lt;/p&gt;
&lt;h1 id=&quot;CocoaPods的相关问题&quot;&gt;&lt;a href=&quot;#CocoaPods的相关问题&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods的相关问题&quot;&gt;&lt;/a&gt;CocoaPods的相关问题&lt;/h1&gt;&lt;h3 id=&quot;pod-install-和-pod-update-的区别：&quot;&gt;&lt;a href=&quot;#pod-install-和-pod-update-的区别：&quot; class=&quot;headerlink&quot; title=&quot;pod install 和 pod update 的区别：&quot;&gt;&lt;/a&gt;pod install 和 pod update 的区别：&lt;/h3&gt;&lt;p&gt;使用 pod install，你只会安装 Podfile 中新改变的东西，并且会：优先遵循 Podfile 里指定的版本信息；其次遵循 Podfile.lock 里指定的版本信息来安装对应的依赖库。比如：下面在 Podfile 里没指定 iRate 的版本，但是 Podfile.lock 里指定了 iRate 的版本是 1.11.1，那么即使现在有最新的 1.11.4，最终也会安装 1.11.1。但是如果 Podfile 里指定了 iRate 版本是 1.11.3，那么则会安装 1.11.3，并更新 Podfile.lock 里的信息。&lt;/p&gt;
&lt;p&gt;使用 pod update，你会根据 Podfile 的规则更新所有依赖库，不会理睬现有的 Podfile.lock，而是根据安装依赖库的情况生成新的 Podfile.lock 文件&lt;br&gt;&lt;a href=&quot;http://www.samirchen.com/about-podfile-lock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于 Podfile.lock 带来的痛&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用CocoaPods开发并打包静态库&quot;&gt;&lt;a href=&quot;#使用CocoaPods开发并打包静态库&quot; class=&quot;headerlink&quot; title=&quot;使用CocoaPods开发并打包静态库&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/brycezhang/p/4117180.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用CocoaPods开发并打包静态库&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;用-CocoaPods-集成本地私有库&quot;&gt;&lt;a href=&quot;#用-CocoaPods-集成本地私有库&quot; class=&quot;headerlink&quot; title=&quot;用 CocoaPods 集成本地私有库&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.samirchen.com/use-cocoapods-to-manage-private-libs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用 CocoaPods 集成本地私有库&lt;/a&gt;&lt;/h3&gt;&lt;h1 id=&quot;静态库-a打包成支持64位的&quot;&gt;&lt;a href=&quot;#静态库-a打包成支持64位的&quot; class=&quot;headerlink&quot; title=&quot;静态库.a打包成支持64位的&quot;&gt;&lt;/a&gt;静态库.a打包成支持64位的&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;2015年2月1日不允许不支持arm64的应用的提交；&lt;/li&gt;
&lt;li&gt;iOS10发布后，如果你的应用中使用到了32位的类、库，没有相应支持64位机型的库，则首次启动后会弹窗式提示：“ xxx可能使iPhone变慢…”；&lt;/li&gt;
&lt;li&gt;iOS10.3公测版发布:封杀32位应用；&lt;/li&gt;
&lt;li&gt;苹果系统（iOS7/iOS8-iOS9）,32位的framework和64位的framework是共存的，所以如果所有的应用都是64位的话，系统就自动不加载32位的framework，这样可以少占用资源，另外对运行的速度是有好处的，也就是说，你会感觉手机运行的快了一点。应用在兼容64位系统后，内存的占用肯定会变多一点，不过性能也有相应的提升。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;i386是针对intel通用微处理器32位处理器&lt;br&gt;x86_64是针对x86架构的64位处理器&lt;br&gt;模拟器32位处理器测试需要i386架构&lt;br&gt;模拟器64位处理器测试需要x86_64架构&lt;br&gt;真机32位处理器需要armv7,或者armv7s架构&lt;br&gt;真机64位处理器需要arm64架构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/567d3b730608&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS armv7, armv7s, arm64区别与应用32位、64位配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;制作方法：一般只要是模拟器一运行就会生成.a的静态库，然后cd到目录下输入lipo -info XXX.a就可以打印出支持的是x86_34,还是什么了，现在一般都要求32位和64位了，如果要是某些项目要在模拟器上运行还要支持i386,所以，可以进行.a静态包的合并。用命令输入lipo -create XX.a XXX.a -output XXXX.a 就可以生成了XXXX.a的静态包。然后导入工程并且在building setting中设置支持arm7,arm7s和arm64即可。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/kaqijiang/blog/649632&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS静态库.a 和framework&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zybuluo.com/qidiandasheng/note/603907&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS里的动态库和静态库&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2014/12/20/64-bit-tips/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;64-bit Tips&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Xib问题&quot;&gt;&lt;a href=&quot;#Xib问题&quot; class=&quot;headerlink&quot; title=&quot;Xib问题&quot;&gt;&lt;/a&gt;Xib问题&lt;/h1&gt;&lt;p&gt;由于更新手机系统iOS11以及xcode9 beta，然后项目在xcode9运行出现一些错误：Compiling IB documents for earlier than iOS 7 is no longer supported.如截图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1244409-5cf0c15ba87dd1f2.png?imageMogr2/auto-orient/strip%7CimageView2/2&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决办法是：Builds for更改版本7之后，我更改成9.0&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1244409-e59c5cbfe0074c5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;关于APP一启动就crash&quot;&gt;&lt;a href=&quot;#关于APP一启动就crash&quot; class=&quot;headerlink&quot; title=&quot;关于APP一启动就crash&quot;&gt;&lt;/a&gt;关于APP一启动就crash&lt;/h1&gt;&lt;p&gt;由于更新手机系统iOS11以及xcode9 beta，然后项目在xcode9运行出现_runWithMainScene:transitionContext:completion错误。解决方法在&lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&lt;/code&gt;方法中的UIWindow必须设置它的rootViewController&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在项目重构的时候难免会遇到问题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS中的图表Charts</title>
    <link href="http://peilinghui.com/2017/06/30/iOS%E4%B8%AD%E7%9A%84%E5%9B%BE%E8%A1%A8Charts/"/>
    <id>http://peilinghui.com/2017/06/30/iOS中的图表Charts/</id>
    <published>2017-06-30T12:17:16.000Z</published>
    <updated>2017-07-06T03:28:17.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS中的图表，包括：折线图，柱状图，饼图。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对于数据的展示，最常见的就是柱状图，折线图了。在的上家公司用的柱状图都是自己写的，自己封装的。现在公司接手的项目原来是用core-plot&lt;a href=&quot;https://github.com/core-plot&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/core-plot&lt;/a&gt;的第三方库。现在打算尝试一下新的第三方库：&lt;strong&gt;Charts&lt;/strong&gt;&lt;a href=&quot;https://github.com/danielgindi/Charts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/danielgindi/Charts&lt;/a&gt;界面更加的好看了。&lt;/p&gt;
&lt;h1 id=&quot;charts的前期准备&quot;&gt;&lt;a href=&quot;#charts的前期准备&quot; class=&quot;headerlink&quot; title=&quot;charts的前期准备&quot;&gt;&lt;/a&gt;charts的前期准备&lt;/h1&gt;&lt;p&gt;可以看它那个READMe.md,就写了使用，一种共识直接拖进项目，由于是用swift写的，OC也可以使用，因此要设置桥接文件，才可以。一种是使用cocoapods，还有一种是使用Carthage安装。&lt;/p&gt;
&lt;p&gt;我用的是cocoapods的方式：&lt;/p&gt;
&lt;h2 id=&quot;先cocoads安装：&quot;&gt;&lt;a href=&quot;#先cocoads安装：&quot; class=&quot;headerlink&quot; title=&quot;先cocoads安装：&quot;&gt;&lt;/a&gt;先cocoads安装：&lt;/h2&gt;&lt;p&gt;$sudo gem install -n /usr/local/bin cocoapods&lt;/p&gt;
&lt;p&gt;$pod setup&lt;/p&gt;
&lt;h2 id=&quot;集成Charts：&quot;&gt;&lt;a href=&quot;#集成Charts：&quot; class=&quot;headerlink&quot; title=&quot;集成Charts：&quot;&gt;&lt;/a&gt;集成Charts：&lt;/h2&gt;&lt;p&gt;新建一个项目TestChatDemos&lt;/p&gt;
&lt;p&gt;cd 把工程直接拖过来&lt;/p&gt;
&lt;h2 id=&quot;创建podfile文件&quot;&gt;&lt;a href=&quot;#创建podfile文件&quot; class=&quot;headerlink&quot; title=&quot;创建podfile文件&quot;&gt;&lt;/a&gt;创建podfile文件&lt;/h2&gt;&lt;p&gt;touch podfile&lt;/p&gt;
&lt;p&gt;open -a xcode podfile &lt;/p&gt;
&lt;p&gt;在podfile文件中输入&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;platform&lt;/span&gt; :iOS, &lt;span class=&quot;string&quot;&gt;&#39;8.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use_frameworks!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &lt;span class=&quot;string&quot;&gt;&#39;TestCharsDemo&#39;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;Charts&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;string&quot;&gt;&#39;Charts/Realm&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post_install &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt; |installer|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    installer.pods_project.targets.&lt;span class=&quot;keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt; |target|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       target.build_configurations.&lt;span class=&quot;keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;do&lt;/span&gt; |config|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           config.build_settings[&lt;span class=&quot;string&quot;&gt;&#39;SWIFT_VERSION&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&#39;3.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;pod search Charts&lt;/p&gt;
&lt;p&gt;pod install&lt;/p&gt;
&lt;h2 id=&quot;设置桥接文件&quot;&gt;&lt;a href=&quot;#设置桥接文件&quot; class=&quot;headerlink&quot; title=&quot;设置桥接文件&quot;&gt;&lt;/a&gt;设置桥接文件&lt;/h2&gt;&lt;p&gt;建立与Swift的桥接文件，建立一个以swift文件，提示是否建立桥接，点击creat bridging header&lt;/p&gt;
&lt;p&gt;将pods——testChatDemos。frameworkios添加到 general-&amp;gt;embedded binaries&lt;/p&gt;
&lt;p&gt;在桥接文件中写上要引用的swift头文件 @import Charts；&lt;/p&gt;
&lt;p&gt;用到时导入 #import “testChartDemos-bridging-header.h”的头文件，然后就可以使用Charts里的东西了&lt;/p&gt;
&lt;p&gt;使用ChartsDemos里的东西的时候，要配置product module name 为（TestCharsDemo）系统会自动生成&lt;/p&gt;
&lt;p&gt;“TestCharsDemo-Swift.h”导入&lt;br&gt;“Chart-swift.h”的文件导入&lt;/p&gt;
&lt;p&gt;这样基本就可以运行程序看到ChartsDemo里的案例了。&lt;/p&gt;
&lt;h1 id=&quot;使用Charts&quot;&gt;&lt;a href=&quot;#使用Charts&quot; class=&quot;headerlink&quot; title=&quot;使用Charts&quot;&gt;&lt;/a&gt;使用Charts&lt;/h1&gt;&lt;p&gt;接下来就可以参照GitHUB官网上的Demo来写你需要的图形了。&lt;/p&gt;
&lt;p&gt;使用这个库无非就是几个问题：&lt;br&gt;写界面，放入数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看你的需求是需要那种图，各个图的样式的属性。&lt;/li&gt;
&lt;li&gt;x轴，y轴的数据是从哪里获得的。&lt;/li&gt;
&lt;li&gt;x轴和y轴的数据是否可以动态变化。&lt;/li&gt;
&lt;li&gt;该如何把从服务器传过来的数组对应到图中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;LineChart折线图&quot;&gt;&lt;a href=&quot;#LineChart折线图&quot; class=&quot;headerlink&quot; title=&quot;LineChart折线图&quot;&gt;&lt;/a&gt;LineChart折线图&lt;/h2&gt;&lt;h3 id=&quot;Line-Chart单折线&quot;&gt;&lt;a href=&quot;#Line-Chart单折线&quot; class=&quot;headerlink&quot; title=&quot;Line Chart单折线&quot;&gt;&lt;/a&gt;Line Chart单折线&lt;/h3&gt;&lt;p&gt;1.首先是需要LineChartView。&lt;br&gt;然后是ChartLimitLine-x轴的限制线。&lt;br&gt;ChartLimitLine-Y轴的限制线&lt;br&gt;ChartYAxis设置Y轴，有左边的Y轴leftAxis和右边的Y轴rightAxis。&lt;br&gt;BalloonMarker&lt;/p&gt;
&lt;p&gt;设置x轴和Y轴的数据的方法.&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *values = [[NSMutableArray alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt; val = arc4random_uniform(range) + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [values &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[ChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithX:&lt;/span&gt;i &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;val &lt;span class=&quot;string&quot;&gt;icon:&lt;/span&gt; [UIImage &lt;span class=&quot;string&quot;&gt;imageNamed:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;icon&quot;&lt;/span&gt;]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于0到Count的x轴的值，随机的产生y值，并放入数组values中，其中values是&lt;__nsarraym 0x600000057670=&quot;&quot;&gt;(&lt;br&gt;ChartDataEntry, x: 0.0, y 53.0,&lt;br&gt;ChartDataEntry, x: 1.0, y 91.0,&lt;br&gt;ChartDataEntry, x: 2.0, y 44.0）这样的。&lt;/__nsarraym&gt;&lt;/p&gt;
&lt;p&gt;然后是LineChartDataSet，每一个set对应一条折线。把上面的values放入这个set中当做这条线的各个坐标点。设置它的属性。&lt;br&gt;把每一个set都放入dataSets中，作为LineChartData的数据源，也就是chartView的data源了。&lt;/p&gt;
&lt;h3 id=&quot;Line-Chart-Dual-YAxis-双折线&quot;&gt;&lt;a href=&quot;#Line-Chart-Dual-YAxis-双折线&quot; class=&quot;headerlink&quot; title=&quot;Line Chart(Dual YAxis)双折线&quot;&gt;&lt;/a&gt;Line Chart(Dual YAxis)双折线&lt;/h3&gt;&lt;p&gt;ChartLegend设置图例，就是每条线Dataset的说明。&lt;br&gt;对于其他同上面，其中上面的values变成了三个yVals.放入三个LineChartDataSet中，设置每一个set的属性。&lt;/p&gt;
&lt;h3 id=&quot;Multiple-Lines-Chart多种折线图&quot;&gt;&lt;a href=&quot;#Multiple-Lines-Chart多种折线图&quot; class=&quot;headerlink&quot; title=&quot;Multiple Lines Chart多种折线图&quot;&gt;&lt;/a&gt;Multiple Lines Chart多种折线图&lt;/h3&gt;&lt;p&gt;设置ChartLegend，没有设置x轴和y轴。其他同上。&lt;/p&gt;
&lt;h3 id=&quot;Colored-Line-Chart彩色的折线图&quot;&gt;&lt;a href=&quot;#Colored-Line-Chart彩色的折线图&quot; class=&quot;headerlink&quot; title=&quot;Colored Line Chart彩色的折线图&quot;&gt;&lt;/a&gt;Colored Line Chart彩色的折线图&lt;/h3&gt;&lt;p&gt;设置了_chartViews的Count为4，然后对于每一个_chartViews固定了range就是高度为100.其他同上。&lt;/p&gt;
&lt;h3 id=&quot;TimeLine-Chart时间线的折线图&quot;&gt;&lt;a href=&quot;#TimeLine-Chart时间线的折线图&quot; class=&quot;headerlink&quot; title=&quot;TimeLine Chart时间线的折线图&quot;&gt;&lt;/a&gt;TimeLine Chart时间线的折线图&lt;/h3&gt;&lt;p&gt;LineChartTimeViewController&lt;/p&gt;
&lt;h3 id=&quot;Filled-Line-Chart-填充的折线图&quot;&gt;&lt;a href=&quot;#Filled-Line-Chart-填充的折线图&quot; class=&quot;headerlink&quot; title=&quot;Filled Line Chart 填充的折线图&quot;&gt;&lt;/a&gt;Filled Line Chart 填充的折线图&lt;/h3&gt;&lt;h2 id=&quot;BarChart柱状条形图&quot;&gt;&lt;a href=&quot;#BarChart柱状条形图&quot; class=&quot;headerlink&quot; title=&quot;BarChart柱状条形图&quot;&gt;&lt;/a&gt;BarChart柱状条形图&lt;/h2&gt;&lt;h3 id=&quot;Bar-Chart竖的条形图&quot;&gt;&lt;a href=&quot;#Bar-Chart竖的条形图&quot; class=&quot;headerlink&quot; title=&quot;Bar Chart竖的条形图&quot;&gt;&lt;/a&gt;Bar Chart竖的条形图&lt;/h3&gt;&lt;p&gt;和折线图也差不多。设置x轴ChartXAxis，设置y轴ChartYAxis的leftAxis和rightAxis，图例ChartLegend.&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *yVals = [[NSMutableArray alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; i = start; i &amp;lt; start + count + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt; mult = (range + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt; val = (&lt;span class=&quot;typename&quot;&gt;double&lt;/span&gt;) (arc4random_uniform(mult));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arc4random_uniform(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &amp;lt; &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [yVals &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[BarChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithX:&lt;/span&gt;i &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;val &lt;span class=&quot;string&quot;&gt;icon:&lt;/span&gt; [UIImage &lt;span class=&quot;string&quot;&gt;imageNamed:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;icon&quot;&lt;/span&gt;]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [yVals &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[BarChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithX:&lt;/span&gt;i &lt;span class=&quot;string&quot;&gt;y:&lt;/span&gt;val]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;po yVals&lt;/p&gt;
&lt;p&gt;&lt;__nsarraym 0x60800004d4d0=&quot;&quot;&gt;(&lt;br&gt;ChartDataEntry, x: 1.0, y 18.0,&lt;br&gt;ChartDataEntry, x: 2.0, y 36.0,&lt;br&gt;ChartDataEntry, x: 3.0, y 17.0&lt;br&gt;)&lt;/__nsarraym&gt;&lt;/p&gt;
&lt;p&gt;每一个BarChartDataSet是一个柱状图，然后放到datasets中他们会作为BarChartData的数据源。也是_chartView的data&lt;/p&gt;
&lt;h3 id=&quot;Horizontal-Bar-Chart横的条形图&quot;&gt;&lt;a href=&quot;#Horizontal-Bar-Chart横的条形图&quot; class=&quot;headerlink&quot; title=&quot;Horizontal Bar Chart横的条形图&quot;&gt;&lt;/a&gt;Horizontal Bar Chart横的条形图&lt;/h3&gt;&lt;p&gt;就是左边的Y轴是数据的X轴，下面的一条x轴是数据的Y轴。yVals是&lt;__nsarraym 0x6100000591a0=&quot;&quot;&gt;(&lt;br&gt;ChartDataEntry, x: 0.0, y 3.0,&lt;br&gt;ChartDataEntry, x: 10.0, y 20.0,&lt;br&gt;ChartDataEntry, x: 20.0, y 50.0,&lt;br&gt;ChartDataEntry, x: 30.0, y 7.0,&lt;br&gt;ChartDataEntry, x: 40.0, y 33.0,&lt;br&gt;ChartDataEntry, x: 50.0, y 19.0,&lt;br&gt;ChartDataEntry, x: 60.0, y 26.0）&lt;/__nsarraym&gt;&lt;/p&gt;
&lt;h3 id=&quot;Multiple-Bars-Chart多种条形图&quot;&gt;&lt;a href=&quot;#Multiple-Bars-Chart多种条形图&quot; class=&quot;headerlink&quot; title=&quot;Multiple Bars Chart多种条形图&quot;&gt;&lt;/a&gt;Multiple Bars Chart多种条形图&lt;/h3&gt;&lt;h3 id=&quot;Stack-Bar-Chart堆积的柱状条形图&quot;&gt;&lt;a href=&quot;#Stack-Bar-Chart堆积的柱状条形图&quot; class=&quot;headerlink&quot; title=&quot;Stack Bar Chart堆积的柱状条形图&quot;&gt;&lt;/a&gt;Stack Bar Chart堆积的柱状条形图&lt;/h3&gt;&lt;h3 id=&quot;Stack-Bar-Chart-Negative堆积的反向柱状条形图&quot;&gt;&lt;a href=&quot;#Stack-Bar-Chart-Negative堆积的反向柱状条形图&quot; class=&quot;headerlink&quot; title=&quot;Stack Bar Chart Negative堆积的反向柱状条形图&quot;&gt;&lt;/a&gt;Stack Bar Chart Negative堆积的反向柱状条形图&lt;/h3&gt;&lt;h3 id=&quot;Another-Bar-Chart干净的条形图&quot;&gt;&lt;a href=&quot;#Another-Bar-Chart干净的条形图&quot; class=&quot;headerlink&quot; title=&quot;Another Bar Chart干净的条形图&quot;&gt;&lt;/a&gt;Another Bar Chart干净的条形图&lt;/h3&gt;&lt;h3 id=&quot;Sinus-Bar-Chart正弦柱状图&quot;&gt;&lt;a href=&quot;#Sinus-Bar-Chart正弦柱状图&quot; class=&quot;headerlink&quot; title=&quot;Sinus Bar Chart正弦柱状图&quot;&gt;&lt;/a&gt;Sinus Bar Chart正弦柱状图&lt;/h3&gt;&lt;h3 id=&quot;BarChart-positive-negative正反向的柱状图&quot;&gt;&lt;a href=&quot;#BarChart-positive-negative正反向的柱状图&quot; class=&quot;headerlink&quot; title=&quot;BarChart positive/negative正反向的柱状图&quot;&gt;&lt;/a&gt;BarChart positive/negative正反向的柱状图&lt;/h3&gt;&lt;h2 id=&quot;PieChart饼图&quot;&gt;&lt;a href=&quot;#PieChart饼图&quot; class=&quot;headerlink&quot; title=&quot;PieChart饼图&quot;&gt;&lt;/a&gt;PieChart饼图&lt;/h2&gt;&lt;p&gt;PieChartView.不再是X轴和Y轴，而是表示一共把饼图分几块和一共的百分比。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *values = [[NSMutableArray alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [values &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;[[PieChartDataEntry alloc] &lt;span class=&quot;string&quot;&gt;initWithValue:&lt;/span&gt;(arc4random_uniform(mult) + mult / &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;label:&lt;/span&gt;parties[i % parties.count] &lt;span class=&quot;string&quot;&gt;icon:&lt;/span&gt; [UIImage &lt;span class=&quot;string&quot;&gt;imageNamed:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;icon&quot;&lt;/span&gt;]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把values放入PieChartDataSet中，其中values是下面的：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pie entries &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; have &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;__NSArrayM &lt;span class=&quot;number&quot;&gt;0x610000042910&lt;/span&gt;&amp;gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;96.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;118.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;27.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChartDataEntry, &lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;115.03017578125&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Pie-Chart饼图、&quot;&gt;&lt;a href=&quot;#Pie-Chart饼图、&quot; class=&quot;headerlink&quot; title=&quot;Pie Chart饼图、&quot;&gt;&lt;/a&gt;Pie Chart饼图、&lt;/h3&gt;&lt;h3 id=&quot;Pie-Chart-With-Value-lines带有值的饼图&quot;&gt;&lt;a href=&quot;#Pie-Chart-With-Value-lines带有值的饼图&quot; class=&quot;headerlink&quot; title=&quot;Pie Chart With Value lines带有值的饼图&quot;&gt;&lt;/a&gt;Pie Chart With Value lines带有值的饼图&lt;/h3&gt;&lt;h3 id=&quot;Half-Pie-Chart一半的饼图&quot;&gt;&lt;a href=&quot;#Half-Pie-Chart一半的饼图&quot; class=&quot;headerlink&quot; title=&quot;Half Pie Chart一半的饼图&quot;&gt;&lt;/a&gt;Half Pie Chart一半的饼图&lt;/h3&gt;&lt;h2 id=&quot;Scatter-Chart离散图&quot;&gt;&lt;a href=&quot;#Scatter-Chart离散图&quot; class=&quot;headerlink&quot; title=&quot;Scatter Chart离散图&quot;&gt;&lt;/a&gt;Scatter Chart离散图&lt;/h2&gt;&lt;h2 id=&quot;Bubble-Chart气泡图&quot;&gt;&lt;a href=&quot;#Bubble-Chart气泡图&quot; class=&quot;headerlink&quot; title=&quot;Bubble Chart气泡图&quot;&gt;&lt;/a&gt;Bubble Chart气泡图&lt;/h2&gt;&lt;h2 id=&quot;Combine-Chart结合的图&quot;&gt;&lt;a href=&quot;#Combine-Chart结合的图&quot; class=&quot;headerlink&quot; title=&quot;Combine Chart结合的图&quot;&gt;&lt;/a&gt;Combine Chart结合的图&lt;/h2&gt;&lt;h2 id=&quot;Radar-Chart雷达分散图&quot;&gt;&lt;a href=&quot;#Radar-Chart雷达分散图&quot; class=&quot;headerlink&quot; title=&quot;Radar Chart雷达分散图&quot;&gt;&lt;/a&gt;Radar Chart雷达分散图&lt;/h2&gt;&lt;h2 id=&quot;Candle-Stick-Chart蜡烛状的图&quot;&gt;&lt;a href=&quot;#Candle-Stick-Chart蜡烛状的图&quot; class=&quot;headerlink&quot; title=&quot;Candle Stick Chart蜡烛状的图&quot;&gt;&lt;/a&gt;Candle Stick Chart蜡烛状的图&lt;/h2&gt;&lt;p&gt;Demo地址：&lt;a href=&quot;https://github.com/peilinghui/BokeDemo/tree/master/PLHDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/BokeDemo/tree/master/PLHDemo&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;其他图表框架&quot;&gt;&lt;a href=&quot;#其他图表框架&quot; class=&quot;headerlink&quot; title=&quot;其他图表框架&quot;&gt;&lt;/a&gt;其他图表框架&lt;/h1&gt;&lt;p&gt;PNChart&lt;a href=&quot;https://github.com/peilinghui/PNChart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/PNChart&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS中的图表，包括：折线图，柱状图，饼图。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动应用的设计模式</title>
    <link href="http://peilinghui.com/2017/06/26/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://peilinghui.com/2017/06/26/移动应用的设计模式/</id>
    <published>2017-06-26T10:55:14.000Z</published>
    <updated>2017-06-27T10:48:13.000Z</updated>
    
    <content type="html">&lt;p&gt;在我们平时使用APP的时候，尤其是现在那些主流的APP，它们的设计模式。是如何迎合用户的需求和喜好。如果你自己做的一款产品你自己都不喜欢的话，如何让更多的用户去使用这个APP呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对于iPhone手机的系统的不断的更新，也是在不断的融合用户的喜好。从指纹解锁，唤起APP的模式。还有通知栏的设计，控制中心的设计，各个应用的排列和图标的显示，只有在意了每个细节才能造就一个更加完美的产品。&lt;br&gt;而对于一个开发人员来讲，不仅要关注现在市场的技术的革新，更重要的是不断的研究其他的主流的产品和主流产品的设计。不然你连自己都不知道自己的产品设计已经out了。&lt;/p&gt;
&lt;h1 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h1&gt;&lt;p&gt;导航有主导航和次级导航。&lt;br&gt;对于iOS用户来讲，一个APP可能更偏好于使用左右滑动的模式。因为上下滑动的模式很容易和系统的控制中心、通知的手势冲突。&lt;/p&gt;
&lt;h2 id=&quot;主导航&quot;&gt;&lt;a href=&quot;#主导航&quot; class=&quot;headerlink&quot; title=&quot;主导航&quot;&gt;&lt;/a&gt;主导航&lt;/h2&gt;&lt;p&gt;没错，在前几年比较流行的就是那种侧边抽屉的主导航，就是“突破画布”的思维来打破虚拟的边界，让这个屏幕尺寸有限的手机可以呈现更多的内容。&lt;br&gt;但是，facebook在千万级用户批量测试中，选项卡式完胜侧边抽屉式和其他类型的导航模式。这也是为什么现在打开很多主流的APP。你会发现很多的APP都使用的是选项式的导航，就是下面的tab的切换，最多只有5个tab。  &lt;/p&gt;
&lt;p&gt;微信：下面有4个tab。微信、通讯录、发现和我。使用用户偏好的左右滑动的手势来实现了聊天记录的标记与删除。而在上部使用简洁的搜索和一个＋的点击，来发起群聊，添加朋友，扫一扫和收付款，这就说明了在顶部的导航，应该放一些比较显目，提醒用户或是做一些常用的功能的入口。&lt;/p&gt;
&lt;p&gt;微博：下面有5个tab。微博、消息、弹框、发现和我。而微博的新版也为了迎合用户喜好的左右滑动，把常用的热门的功能放在外面（原来是在发现里面的）和全部微博平行的左右滑动的入口。左边还是照相机，推出了微博的新功能，微博故事–可以用来拍摄照片和视频，类似朋友圈的小视频，时间大于10秒，而且可以用户个性化的编辑，添加表情、文字、图片，而且类似直播的画面设计，粉丝可以关注然后评论。很赞！&lt;br&gt;右边是扫一扫和打车的入口。顶部是简洁的搜索。  &lt;/p&gt;
&lt;p&gt;京东：下面是5个tab，首页，分类，觅Me，购物车和我的。上面是搜索框。左边是扫一扫，右边是消息。&lt;br&gt;实话说，我比较喜欢京东的设计，尤其是分类tab中的两级的菜单的显示。左边是菜单的项，联动的是菜单下面的collectionView的显示。很容易找到自己所喜欢的类别。然后是觅Me的tab，上面是ScrollView的滑动，很符合用户的左右滑动的习惯，而且一点也不卡的显示了视频精选、直播、关注、清单、问答、视频够、社区、生活、亲子、风尚、美食，滑动特别的流畅，对于视频的缓存，图片和文字的排版，图片的缓存还有下拉图标的动画是一个快递员。真的很好的设计呐~&lt;/p&gt;
&lt;p&gt;淘宝：下面也是5个tab，首页、微淘、问大家、购物车和我的淘宝。上面也同样是扫一扫和搜索框，还有消息。我一直觉得淘宝的拍照购物很神奇，不过现在好像很多电商：比如京东，都实现了这种是一种类似算法匹配的搜索吧。虽然有的时候也不是很准啦。第一个tab还实现了点击一个图标的跳动，显示成了火箭🚀的标识。直接跳转到了猜你喜欢的一系列（这个应该是现在最流行的机器学习大数据来统计用户的喜好）来推荐你的习惯和购物习惯来定制的为你推荐产品，促进你的购物消费。&lt;/p&gt;
&lt;p&gt;支付宝：&lt;/p&gt;
&lt;p&gt;网易云音乐：&lt;/p&gt;
&lt;p&gt;简书：&lt;/p&gt;
&lt;p&gt;手机QQ：手机QQ及更不用说了，都好多年沉淀的技术了，好多的功能的隐藏。都没有注意到过，主要现在跟多的在玩微博，很少玩QQ了，QQ里面有个日迹的入口和微博故事很像。但是入口就没有微博辣么明显了。&lt;/p&gt;
&lt;p&gt;对于这种主流的导航可以写一些个Demo了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在我们平时使用APP的时候，尤其是现在那些主流的APP，它们的设计模式。是如何迎合用户的需求和喜好。如果你自己做的一款产品你自己都不喜欢的话，如何让更多的用户去使用这个APP呢？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jenkins搭建来实现自动化打包</title>
    <link href="http://peilinghui.com/2017/06/14/Jenkins%E6%90%AD%E5%BB%BA%E6%9D%A5%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
    <id>http://peilinghui.com/2017/06/14/Jenkins搭建来实现自动化打包/</id>
    <published>2017-06-14T10:45:34.000Z</published>
    <updated>2017-06-19T08:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;Jenkins持续集成自动化打包平台在一般公司都会使用，但是有的时候都不用我来弄，凡事都是觉知此事要躬行，只有亲身经历了才会知道怎么做额。好了，就来探索一下吧。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;配置Java环境&quot;&gt;&lt;a href=&quot;#配置Java环境&quot; class=&quot;headerlink&quot; title=&quot;配置Java环境&quot;&gt;&lt;/a&gt;配置Java环境&lt;/h1&gt;&lt;p&gt;mac OS 10.6及以前的版本中系统已经自带了JDK 1.6可以直接使用JDK1.6 ，现在最新是jdk1.8&lt;/p&gt;
&lt;p&gt;在mac OS 10.7及之后的版本中苹果移除了Java的本地支持，所以需要手动安装JDK&lt;/p&gt;
&lt;p&gt;一、  JDK 的下载与安装&lt;br&gt;下载jdk：&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Oracle官方下载链接:&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;版本 $ java -version &lt;/li&gt;
&lt;li&gt;&lt;p&gt;mac系统自带的jdk的安装目录在如下目录：/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home&lt;br&gt;在mac系统里面jdk的路径是要到Home这里的，所以我们在后面配置环境变量的时候一点要记住选择到home这个文件这里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们自己安装的jdk的目录一般在：/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home  下,也就是到Library这个目录下面去找应该就可以找到。找到路径以后就是如何配置环境变量的问题，配置环境变量比较简单：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置jdk环境变量&lt;br&gt;编辑profile文件: $ vi /etc/profile,配置JAVA_HOME,Java JDK安装路径,根据你自己的版本来写。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.&lt;span class=&quot;number&quot;&gt;7.0_79&lt;/span&gt;.jdk/Contents/Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLASSPAHT=.:&lt;span class=&quot;variable&quot;&gt;$JAVA&lt;/span&gt;_HOME/lib/dt.jar:&lt;span class=&quot;variable&quot;&gt;$JAVA&lt;/span&gt;_HOME/lib/tools.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PATH=&lt;span class=&quot;variable&quot;&gt;$JAVA&lt;/span&gt;_HOME/bin:&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export JAVA_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export CLASSPATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;保存退出 ,&lt;code&gt;$ source .bash_profile&lt;/code&gt;&lt;br&gt;环境变量是否已经配置成功：&lt;code&gt;echo $JAVA_HOME&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装Jenkins&quot;&gt;&lt;a href=&quot;#安装Jenkins&quot; class=&quot;headerlink&quot; title=&quot;安装Jenkins&quot;&gt;&lt;/a&gt;安装Jenkins&lt;/h1&gt;&lt;p&gt;访问 &lt;a href=&quot;http://localhost:8080&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jenkins Master/Slave 架构&lt;/p&gt;
&lt;p&gt;Master/Slave 相当于 Server 和 agent 的概念。Master 提供 web 接口让用户来管理 job 和 slave，job 可以运行在 master 本机或者被分配到 slave 上运行。一个 master 可以关联多个 slave 用来为不同的 job 或相同的 job 的不同配置来服务。&lt;/p&gt;
&lt;p&gt;当 job 被分配到 slave 上运行的时候，此时 master 和 slave 其实是建立的双向字节流的连接， 其中连接方法主要有如下几种:&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins持续集成自动化打包平台在一般公司都会使用，但是有的时候都不用我来弄，凡事都是觉知此事要躬行，只有亲身经历了才会知道怎么做额。好了，就来探索一下吧。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>做一个搜索框的Demo</title>
    <link href="http://peilinghui.com/2017/05/27/%E5%81%9A%E4%B8%80%E4%B8%AA%E6%90%9C%E7%B4%A2%E6%A1%86%E7%9A%84Demo/"/>
    <id>http://peilinghui.com/2017/05/27/做一个搜索框的Demo/</id>
    <published>2017-05-27T15:11:25.000Z</published>
    <updated>2017-07-03T23:49:02.000Z</updated>
    
    <content type="html">&lt;p&gt;打开手机，就会发现我们用的最多的就是TableView和搜索框了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;打开手机，从通知中心的搜索，APP store的搜索，通讯录的搜索，设置页面的搜索，照片搜索，信息搜索，再到打开每一个APP，都有的搜索。看了下，实现的需求类似，基本上都是输入关键字从网络接口上来搜索，只要点击过的都会保存到历史记录中，然后显示到历史记录的tableview中，下次可以直接点击然后搜索。可以清空单个记录或者所有的历史记录。还有一些APP还有热门搜索的标签。&lt;br&gt;所以，鉴于此，决定做一个Demo出来。&lt;/p&gt;
&lt;h1 id=&quot;搜索框&quot;&gt;&lt;a href=&quot;#搜索框&quot; class=&quot;headerlink&quot; title=&quot;搜索框&quot;&gt;&lt;/a&gt;搜索框&lt;/h1&gt;&lt;p&gt;对于搜索框可以用系统自带的UISearchBar，UISearchController，UISearchDisplayController，或者是自定义搜索框–把UIView和UITextField代理结合起来，&lt;/p&gt;
&lt;h1 id=&quot;搜索功能&quot;&gt;&lt;a href=&quot;#搜索功能&quot; class=&quot;headerlink&quot; title=&quot;搜索功能&quot;&gt;&lt;/a&gt;搜索功能&lt;/h1&gt;&lt;p&gt;对于搜索功能的实现，&lt;br&gt;动态的：可以在输入一个字符，根据关键字去请求接口来返回数据加载在tableView上。&lt;br&gt;静态的：如果数据是本地的，或者是已经加载出来的数据中来搜索的话，可以用&lt;br&gt;NSPredicate来做过滤筛选出想要搜索的结果。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; *resultPredicate = [&lt;span class=&quot;built_in&quot;&gt;NSPredicate&lt;/span&gt; predicateWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;SELF contains[cd] %@&quot;&lt;/span&gt;, searchText];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.searchResults&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.items&lt;/span&gt; filteredArrayUsingPredicate:resultPredicate];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;历史记录的存储&quot;&gt;&lt;a href=&quot;#历史记录的存储&quot; class=&quot;headerlink&quot; title=&quot;历史记录的存储&quot;&gt;&lt;/a&gt;历史记录的存储&lt;/h1&gt;&lt;p&gt;对于已经搜索过的历史记录可以选择的数据化存储有NSUserDefault，存在本地的Plist。还有就是Core Data的存储。&lt;br&gt;在APPdelegate中打印NSLog(@”%@”, NSHomeDirectory());记录本地存储的地址。&lt;br&gt;一般是/Users/peilinghui/Library/Developer/CoreSimulator/Devices/44CFA0DF-507C-4C90-A9E2-215F6706FB36/data/Containers/Data/Application/AA25A5E2-6E19-47F4-AB43-D4C73B1C3DE5。每次登陆都不一样额。&lt;/p&gt;
&lt;p&gt;[[NSUserDefaults standardUserDefaults] objectForKey:obj];&lt;/p&gt;
&lt;p&gt;对于多用户的历史记录的存储要拼接用户名&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *paths = &lt;span class=&quot;built_in&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSDocumentDirectory&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSUserDomainMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *docDir = [paths objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NSString *historyScheduleListPath = [docDir stringByAppendingPathComponent:@&quot;historySchedule.plist&quot;];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *historyScheduleListPath = [docDir stringByAppendingPathComponent:[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;history--%@.plist&quot;&lt;/span&gt;,UserDefaultsObjectForKey(LOGINUSERNAME)]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;tableView的数据源&quot;&gt;&lt;a href=&quot;#tableView的数据源&quot; class=&quot;headerlink&quot; title=&quot;tableView的数据源&quot;&gt;&lt;/a&gt;tableView的数据源&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;如果是从接口查询数据的话，必然有历史记录的table和查询结果table。这个需要用到两个tableView两个数据源。通过判断来加载不同的数据源。&lt;/li&gt;
&lt;li&gt;如果是从已经有的数据源中搜索结果，不论是静态的还是先从历史记录中搜索，用到谓词匹配的时候，也可以设置两个数据源来刷新一个table，或者是两个table两个数据源.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;键盘的收起&quot;&gt;&lt;a href=&quot;#键盘的收起&quot; class=&quot;headerlink&quot; title=&quot;键盘的收起&quot;&gt;&lt;/a&gt;键盘的收起&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;当数据加载到tableview上，然后滚动时，要收起键盘：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#pragma mark - &lt;span class=&quot;title&quot;&gt;&amp;lt; UIScrollViewDelegate &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewWillBeginDragging:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.searchBar&lt;/span&gt; setShowsCancelButton:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt; animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.searchBar&lt;/span&gt; endEditing:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;点击searchBar的确定搜索和取消按钮的时候，要收起键盘：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;[searchBar resignFirstResponder];&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当进入后台的时候要收起键盘：不用view实现endEditing的方法&lt;br&gt;&lt;code&gt;[[[UIApplication sharedApplication] keyWindow] endEditing:YES];&lt;/code&gt;&lt;br&gt;或者&lt;br&gt;&lt;code&gt;[[UIApplication sharedApplication] sendAction:@selector(resignFirstResponder) to:nil from:nil forEvent:nil];&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击背景View的时候收起键盘：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;点击背景收起键盘可以实现view的&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesBegan:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event方法，然后执行view的- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)endEditing:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)force;方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchesBegan:(&lt;span class=&quot;built_in&quot;&gt;NSSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UITouch&lt;/span&gt; *&amp;gt; *)touches withEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt; endEditing:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;//实现该方法是需要注意view需要是继承UIControl而来的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在背景view上面加手势，添加UIButton或者view，然后在对应的点击事件的监听方法中实现resignFirstResponder或者endEditing。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt; *tapGestureRecognizer = [[&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(keyboardHide:)];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置成NO表示当前控件响应后会传播到其他控件上，默认为YES。  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tapGestureRecognizer&lt;span class=&quot;variable&quot;&gt;.cancelsTouchesInView&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//将触摸事件添加到view上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt; addGestureRecognizer:tapGestureRecognizer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)keyboardHide:(&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt;*)tap&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [textFiled resignFirstResponder];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Demo地址：&lt;a href=&quot;https://github.com/peilinghui/BokeDemo/tree/master/%E7%A4%BA%E4%BE%8B%E6%90%9C%E7%B4%A2%E6%A1%86%E7%9A%84Table&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/BokeDemo/tree/master/%E7%A4%BA%E4%BE%8B%E6%90%9C%E7%B4%A2%E6%A1%86%E7%9A%84Table&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;打开手机，就会发现我们用的最多的就是TableView和搜索框了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何使用Mac本地服务器</title>
    <link href="http://peilinghui.com/2017/05/27/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Mac%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://peilinghui.com/2017/05/27/如何使用Mac本地服务器/</id>
    <published>2017-05-27T14:27:26.000Z</published>
    <updated>2017-05-27T15:42:26.000Z</updated>
    
    <content type="html">&lt;p&gt;我们经常性的需要使用局域网搭建 Web 服务器测试环境，如部署局域网无线安装企业应用，模拟某个接口的返回JSON的时候，Mac OS X 自带了 Apache 和 PHP 环境，我们只需要简单的启动它就行了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;启动-Apache&quot;&gt;&lt;a href=&quot;#启动-Apache&quot; class=&quot;headerlink&quot; title=&quot;启动 Apache&quot;&gt;&lt;/a&gt;启动 Apache&lt;/h1&gt;&lt;h4 id=&quot;查看Apache版本&quot;&gt;&lt;a href=&quot;#查看Apache版本&quot; class=&quot;headerlink&quot; title=&quot;查看Apache版本&quot;&gt;&lt;/a&gt;查看Apache版本&lt;/h4&gt;&lt;p&gt;打开终端，输入&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ httpd -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server version: Apache/&lt;span class=&quot;number&quot;&gt;2.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.25&lt;/span&gt; (Unix)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Server built:   Feb  &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;08&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;启动Apache&quot;&gt;&lt;a href=&quot;#启动Apache&quot; class=&quot;headerlink&quot; title=&quot;启动Apache&quot;&gt;&lt;/a&gt;启动Apache&lt;/h4&gt;&lt;p&gt;在终端输入 sudo apachectl start 即可启动 Apache。&lt;br&gt;启动后，在浏览器中输入 &lt;a href=&quot;http://127.0.0.1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1&lt;/a&gt; 或 &lt;a href=&quot;http://localhost&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost&lt;/a&gt; 如果看到 It Works! 页面。那么 Apache 就启动成功了，站点的根目录为系统级根目录 /Library/WebServer/Documents。&lt;/p&gt;
&lt;p&gt;启动后，你可以通过编辑 /etc/apache2/httpd.conf 文件来修改 Apache 配置&lt;/p&gt;
&lt;h4 id=&quot;停止-Apache：sudo-apachectl-stop&quot;&gt;&lt;a href=&quot;#停止-Apache：sudo-apachectl-stop&quot; class=&quot;headerlink&quot; title=&quot;停止 Apache：sudo apachectl stop&quot;&gt;&lt;/a&gt;停止 Apache：sudo apachectl stop&lt;/h4&gt;&lt;h4 id=&quot;重启-Apache：sudo-apachectl-restart&quot;&gt;&lt;a href=&quot;#重启-Apache：sudo-apachectl-restart&quot; class=&quot;headerlink&quot; title=&quot;重启 Apache：sudo apachectl restart&quot;&gt;&lt;/a&gt;重启 Apache：sudo apachectl restart&lt;/h4&gt;&lt;h2 id=&quot;创建用户级根目录&quot;&gt;&lt;a href=&quot;#创建用户级根目录&quot; class=&quot;headerlink&quot; title=&quot;创建用户级根目录&quot;&gt;&lt;/a&gt;创建用户级根目录&lt;/h2&gt;&lt;p&gt;我们也可以创建用户级根目录，更方便管理和操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在用户目录下创建 Sites 目录，cd; mkdir Sites; touch Sites/.localized，旧的 Mac 系统中如果该目录已存在，则略过。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cd /etc/apache2/users 检查目录下是否存在 username.conf 文件，username 为当前用户名，如果没有则创建一个 sudo touch username.conf，并修改文件权限 sudo chmod 644 username.conf。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建之后，打开 username.conf 文件，sudo vi  username.conf 将下面的配置信息写入文件，username 依然为当前用户名：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;Directory &quot;/Users/username/Sites/&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Options&lt;/span&gt;&lt;/span&gt; Indexes MultiViews FollowSymLinks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;All&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Order&lt;/span&gt;&lt;/span&gt; allow,deny&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;common&quot;&gt;Allow&lt;/span&gt;&lt;/span&gt; from &lt;span class=&quot;literal&quot;&gt;all&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;all&lt;/span&gt; granted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;编辑 /etc/apache2/httpd.conf 文件，找到下列代码，并将前面的注释符号 # 删除：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Include &lt;span class=&quot;regexp&quot;&gt;/private/&lt;/span&gt;etc&lt;span class=&quot;regexp&quot;&gt;/apache2/&lt;/span&gt;extra/httpd-userdir.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LoadModule userdir_module libexec&lt;span class=&quot;regexp&quot;&gt;/apache2/&lt;/span&gt;mod_userdir.so&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编辑 /etc/apache2/extra/httpd-userdir.conf 文件，找到下列代码，并将前面的注释符号 # 删除：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Include /private/etc/apache2/users/*.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重启 Apache：sudo apachectl restart&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在浏览器中输入 &lt;a href=&quot;http://127.0.0.1/~username&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://127.0.0.1/~username&lt;/a&gt; 或 &lt;a href=&quot;http://localhost/~username，即可测试用户目录是否工作。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/~username，即可测试用户目录是否工作。&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们经常性的需要使用局域网搭建 Web 服务器测试环境，如部署局域网无线安装企业应用，模拟某个接口的返回JSON的时候，Mac OS X 自带了 Apache 和 PHP 环境，我们只需要简单的启动它就行了。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS打包和发布流程</title>
    <link href="http://peilinghui.com/2017/05/10/iOS%E6%89%93%E5%8C%85%E5%92%8C%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B/"/>
    <id>http://peilinghui.com/2017/05/10/iOS打包和发布流程/</id>
    <published>2017-05-10T08:56:16.000Z</published>
    <updated>2017-05-28T17:41:11.000Z</updated>
    
    <content type="html">&lt;p&gt;学习iOS的打包和发布流程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;两种证书&quot;&gt;&lt;a href=&quot;#两种证书&quot; class=&quot;headerlink&quot; title=&quot;两种证书&quot;&gt;&lt;/a&gt;两种证书&lt;/h2&gt;&lt;p&gt;App证书分为两种：开发证书、发布证书。App发布证书分：AppStore(正常的发布到商店) 及 Adhoc（内部测试发布） 两种。&lt;/p&gt;
&lt;h2 id=&quot;真机运行-dev&quot;&gt;&lt;a href=&quot;#真机运行-dev&quot; class=&quot;headerlink&quot; title=&quot;真机运行(dev)&quot;&gt;&lt;/a&gt;真机运行(dev)&lt;/h2&gt;&lt;p&gt;真机调试指 mac 连上 iphone, xcode 可以直接以这台 iphone 设备为 build target, 能在 iphone 里执行编译结果&lt;br&gt;为什么真机调试？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;部分功能需要硬件支持，模拟器是不支持的，如：&lt;br&gt;传感器：磁力计、陀螺仪、距离传感器等&lt;br&gt;特定功能：拍照、打电话、发短信、蓝牙等&lt;/p&gt;
&lt;p&gt;真机的环境和模拟器的环境是不一样，模拟器是使用电脑的环境， CPU、Memory、Disk、Network 这些和真机环境都不一样，有些bug可能会在特定的环境才会出现，比如网络非常慢，内存特别小的时候，可能在模拟器上不会有bug，在真机上就有可能出现bug&lt;br&gt;使用真机开发比使用模拟器体验更好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Xcode7以前：&quot;&gt;&lt;a href=&quot;#Xcode7以前：&quot; class=&quot;headerlink&quot; title=&quot;Xcode7以前：&quot;&gt;&lt;/a&gt;Xcode7以前：&lt;/h4&gt;&lt;p&gt;真机调试的主要步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录开发者主页&lt;/li&gt;
&lt;li&gt;生成cer证书：cer是一个跟电脑相关联的证书文件，让电脑具备真机调试的功能&lt;/li&gt;
&lt;li&gt;添加App ID：调试哪些app？&lt;/li&gt;
&lt;li&gt;注册真机设备：哪台设备需要做真机调试？&lt;/li&gt;
&lt;li&gt;生成MobileProvision文件：结合2、3、4生成一个手机规定文件&lt;/li&gt;
&lt;li&gt;导入cer、MobileProvision文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终会得到2个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cer文件：让电脑具备真机调试的功能&lt;/li&gt;
&lt;li&gt;MobileProvision文件：哪台设备、哪些app、哪台电脑需要做真机调试？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Xcode7以后&quot;&gt;&lt;a href=&quot;#Xcode7以后&quot; class=&quot;headerlink&quot; title=&quot;Xcode7以后&quot;&gt;&lt;/a&gt;Xcode7以后&lt;/h4&gt;&lt;p&gt;Xcode–&amp;gt;Preferences—&amp;gt;Accounts—&amp;gt; Add Apple ID 然后选择真机直接允许App，弹出来个框点击Fix Issue即可，这样就完成真机测试了。&lt;/p&gt;
&lt;p&gt;Xcode7.0真机测试Apple ID必须加入苹果开发者计划，而Xcode7.0之后直接使用普通的Apple ID即可真机测试。注意Xcode7.0之后并不是不需要.cer和.mobileprovision文件，而是苹果已经生产了这两个文件，并将.cer文件安装到钥匙串访问里，.mobileprovision已经复制到Library/MobileDevice/Provisioning Profiles文件夹中.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ios.jobbole.com/89870/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS真机调试详解&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试打包&quot;&gt;&lt;a href=&quot;#测试打包&quot; class=&quot;headerlink&quot; title=&quot;测试打包&quot;&gt;&lt;/a&gt;测试打包&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;登录apple的开发者主页:developer.apple.com&lt;/li&gt;
&lt;li&gt;选择Ad Hoc生成一个ios_distribution.cer: 让电脑具备打包程序的能力&lt;/li&gt;
&lt;li&gt;新建一个App ID : 方便打包哪个程序&lt;/li&gt;
&lt;li&gt;利用用户设备的UDID注册设备&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择Ad Hoc利用ios_distribution.cer + 设备UDID + App ID –&amp;gt; 描述文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(描述文件的作用:
1&amp;gt; 能知道在哪台电脑上, 为哪台设备打包哪个程序
2&amp;gt; 哪台设备需要安装打包哪个程序    )
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最终产生了3个文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&amp;gt; CertificateSigningRequest.certSigningRequest(CSR证书)
* 包含了电脑的信息
* 发送给苹果服务器, 苹果服务器根据文件信息来生成一个电脑证书
* 生成的证书就可以让对应的电脑具备某个特殊的能力
2&amp;gt; ios_distribution.cer
* 打包证书
* 安装这个证书后, 电脑就具备打包程序的能力
3&amp;gt; nj_iphone6_news.mobileprovision
* 里面包含了3个信息:ios_distribution.cer + 设备UDID + App ID
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装证书和描述文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&amp;gt; ios_distribution.cer
2&amp;gt; nj_iphone6_news.mobileprovision
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;项目Scheme右边的设备选择iOS Device&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;点击Xcode的菜单&lt;br&gt;Product –&amp;gt; Archive –&amp;gt; Distribute –&amp;gt; ….Ad Hoc… –&amp;gt; 选择对应的描述文件&lt;/li&gt;
&lt;li&gt;生成一个ipa文件,发给测试人员和客户&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多：&lt;a href=&quot;http://debugtalk.com/post/iOS-Android-Packing-with-Jenkins/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用Jenkins搭建iOS/Android持续集成打包平台&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;发布&quot;&gt;&lt;a href=&quot;#发布&quot; class=&quot;headerlink&quot; title=&quot;发布&quot;&gt;&lt;/a&gt;发布&lt;/h2&gt;&lt;p&gt;四种发布方式：&lt;/p&gt;
&lt;h3 id=&quot;苹果应用商店发布AppStore&quot;&gt;&lt;a href=&quot;#苹果应用商店发布AppStore&quot; class=&quot;headerlink&quot; title=&quot;苹果应用商店发布AppStore&quot;&gt;&lt;/a&gt;苹果应用商店发布AppStore&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;developer.apple.com : 开发者主页, 配置证书\AppId\描述文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&amp;gt;发布的证书, 说清楚哪台电脑可以发布程序
2&amp;gt;添加发布的描述文件，描述在哪台计算机上能够发布哪些应用程序
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iTunesConnect网站(专门用来发布应用程序)&lt;br&gt;&lt;a href=&quot;https://itunesconnect.apple.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://itunesconnect.apple.com&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&amp;gt;    如果想挣钱，先设置在Agreements, Tax, and Banking设置个人储蓄卡信息
做一次就行
2&amp;gt; 添加应用程序
－ 名称，不能重复，可以使用 - 添加一些后缀信息
－ 关键字，增加软件被搜中的几率，使用英文的都好分隔，不能超过255个字节
－图片，图片文件名称中不能有中文
－ Rating，设置应用程序的等级，默认都选择最低的，成人，赌博……
－ App Review Information
提供给苹果的审核人员，来辅助测试使用的。
如果有测试帐号，必须提供！
如果有测试数据，需要提供给苹果，例如快递查询！
需要提供联系人的联系方式，电子邮件，电话需要添加国际区号，+86
3&amp;gt; 从Xcode6开始，上传完应用程序之后，程序默认会在prerelease中，需要等待5～50分钟不等。只有Prerelease中的状态变化后，才能够在Versions中添加Build，提示，这个过程中，不要重复在Xcode中上传。    
4&amp;gt; 所有准备就绪后，点Submit按钮提交应用程序，出现的三个选项，都选择No。
卡通形象，第三方内容，商标！
5&amp;gt; 等待，2天～20天不等……
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;苹果应用商店批量购买发布（Volume-Purchase-Program）&quot;&gt;&lt;a href=&quot;#苹果应用商店批量购买发布（Volume-Purchase-Program）&quot; class=&quot;headerlink&quot; title=&quot;苹果应用商店批量购买发布（Volume Purchase Program）&quot;&gt;&lt;/a&gt;苹果应用商店批量购买发布（Volume Purchase Program）&lt;/h3&gt;&lt;h3 id=&quot;Ad-Hoc应用发布方式&quot;&gt;&lt;a href=&quot;#Ad-Hoc应用发布方式&quot; class=&quot;headerlink&quot; title=&quot;Ad Hoc应用发布方式.&quot;&gt;&lt;/a&gt;Ad Hoc应用发布方式.&lt;/h3&gt;&lt;p&gt;Ad Hoc方式发布应用，应用的具体内容也不需要经过苹果的评审，但限制每个应用不能发布到超过100个设备上。如果应用需要小规模的测试或者企业规模很小可以采用这种方式发布企业应用.&lt;/p&gt;
&lt;h3 id=&quot;In-House企业应用发布&quot;&gt;&lt;a href=&quot;#In-House企业应用发布&quot; class=&quot;headerlink&quot; title=&quot;In-House企业应用发布&quot;&gt;&lt;/a&gt;In-House企业应用发布&lt;/h3&gt;&lt;p&gt;In-House企业应用是不能提交到App Store,发布应用的具体内容也是不需要苹果官方审核.安装设备的数量目前也没有任何限制.所以权限最为开放，适合针对支持开放大批量对外用户测试使用.所以你看到很多第三方开放渠道下载IPA其实基于其他企业账号来支持的.&lt;/p&gt;
&lt;h4 id=&quot;内网OTA&quot;&gt;&lt;a href=&quot;#内网OTA&quot; class=&quot;headerlink&quot; title=&quot;内网OTA&quot;&gt;&lt;/a&gt;内网OTA&lt;/h4&gt;&lt;p&gt;OTA即Over-the-Air，是Apple在 iOS4 中新加的一项技术，目的是让开发者能够脱离Appstore，实现从自己的服务器下载并安装iOS应用。简单地说，就是用户只需要在Safari中点开一条链接，就能直接在主界面中安装App。&lt;/p&gt;
&lt;p&gt; 实现步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用Xcode打包release版本&lt;/li&gt;
&lt;li&gt;搭建本地Web服务器&lt;/li&gt;
&lt;li&gt;开启HTTPS&lt;/li&gt;
&lt;li&gt;编写好对应的.plist文件&lt;/li&gt;
&lt;li&gt;上传ipa、.plist、ca证书到Web服务器，配置好index.html&lt;/li&gt;
&lt;li&gt;在手机上用Safari打开链接，完成下载&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更多参考：&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/35ca63ec0d8e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一步一步实现无线安装iOS应用(内网OTA)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/close_marty/article/details/38559673&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jenkins中集成OTA发布&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;APNS远程通知&quot;&gt;&lt;a href=&quot;#APNS远程通知&quot; class=&quot;headerlink&quot; title=&quot;APNS远程通知&quot;&gt;&lt;/a&gt;APNS远程通知&lt;/h2&gt;&lt;p&gt;iOS中提供了2种推送通知:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本地推送通知（Local Notification）:不需要联网就能发出的推送通知（不需要服务器的支持）定时提醒用户完成一些任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;远程推送通知（Remote Notification）：就是从远程服务器推送给客户端的通知（需要联网）远程推送服务，又称为APNs（Apple Push Notification Services）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;创建支持远程推送功能的App ID&lt;/li&gt;
&lt;li&gt;申请开发者证书，并选中刚刚创建的App ID&lt;/li&gt;
&lt;li&gt;下载CER文件，并导入钥匙串管理&lt;/li&gt;
&lt;li&gt;申请发布证书，并选中刚刚创建的App ID&lt;/li&gt;
&lt;li&gt;下载CER文件，并导入钥匙串管理&lt;/li&gt;
&lt;li&gt;检查App ID，确认证书已经指定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基本代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)application:(&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; *)application didFinishLaunchingWithOptions:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)launchOptions&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#ifdef __IPHONE_8_0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 注册接收通知的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationSettings&lt;/span&gt; *settings = [&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationSettings&lt;/span&gt; settingsForTypes:&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeAlert&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeBadge&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeSound&lt;/span&gt; categories:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [application registerUserNotificationSettings:settings];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 注册允许接收远程推送通知&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [application registerForRemoteNotifications];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果是iOS7.0，使用以下方法注册&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [application registerForRemoteNotificationTypes:&lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeAlert&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeBadge&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIUserNotificationTypeSound&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PushMeBaby是一款用来测试ANPs的开源Mac项目：&lt;a href=&quot;https://github.com/stefanhafeneger/PushMeBaby&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/stefanhafeneger/PushMeBaby&lt;/a&gt;它充当了服务器的作用，用法非常简单。它负责将内容提交给苹果的APNs服务器，苹果的APNs服务器再将内容推送给用户的设备。将推送的调试证书改为名apns.cer，添加到PushMeBaby项目中。&lt;/li&gt;
&lt;li&gt;JPush：&lt;a href=&quot;https://www.jpush.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jpush.cn&lt;/a&gt;&lt;br&gt;一套远程推送解决方案，支持android和iOS两个平台。&lt;br&gt;它能够快捷地为iOS App增加推送功能，减少集成APNs需要的工作量、开发复杂度。[集成iOS SDK]&lt;br&gt;(&lt;a href=&quot;http://docs.jpush.cn/pages/viewpage.action?pageId=2621727&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://docs.jpush.cn/pages/viewpage.action?pageId=2621727&lt;/a&gt;)&lt;br&gt;JPush会自动记录和管理所有安装过此app的设备deviceToken&lt;br&gt;利用JPush，可以轻易地给所有设备发送远程推送通知.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;更多参考：&quot;&gt;&lt;a href=&quot;#更多参考：&quot; class=&quot;headerlink&quot; title=&quot;更多参考：&quot;&gt;&lt;/a&gt;更多参考：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.qcloud.com/community/article/673429&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 程序从开发完到上 AppStore 那点事儿&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/mddblog/p/4718228.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;苹果企业账号打包发布APP流程详解&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;学习iOS的打包和发布流程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习iOS中JS与OC相互调用的方式</title>
    <link href="http://peilinghui.com/2017/05/05/%E5%AD%A6%E4%B9%A0iOS%E4%B8%ADJS%E4%B8%8EOC%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://peilinghui.com/2017/05/05/学习iOS中JS与OC相互调用的方式/</id>
    <published>2017-05-05T06:50:42.000Z</published>
    <updated>2017-05-11T01:24:53.000Z</updated>
    
    <content type="html">&lt;p&gt;Web App即是HTML5 APP框架开发模式，使用HTML5,CSS3以及JavaScript以及服务器端语言来完成开发，Web App具有跨平台的优势。那么就来学习一下iOS中JS与OC相互调用的方式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;目前JS与OC相互调用的方式&quot;&gt;&lt;a href=&quot;#目前JS与OC相互调用的方式&quot; class=&quot;headerlink&quot; title=&quot;目前JS与OC相互调用的方式&quot;&gt;&lt;/a&gt;目前JS与OC相互调用的方式&lt;/h1&gt;&lt;p&gt;目前主要的JS与OC相互调用方式主要有如下6种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在JS 中做一次URL跳转，然后在OC中拦截跳转。（这里分为UIWebView 和 WKWebView两种，UIWebView兼容iOS 6）&lt;/li&gt;
&lt;li&gt;利用WKWebView 的MessageHandler。(有坑)&lt;/li&gt;
&lt;li&gt;利用系统库JavaScriptCore，来做相互调用。（iOS 7推出）&lt;/li&gt;
&lt;li&gt;利用第三方库WebViewJavascriptBridge。&lt;/li&gt;
&lt;li&gt;利用第三方cordova库，以前叫PhoneGap。（这是一个库平台的库）&lt;/li&gt;
&lt;li&gt;当下盛行的React Native。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-08%20%E4%B8%8A%E5%8D%8811.49.52.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;拦截URL&quot;&gt;&lt;a href=&quot;#拦截URL&quot; class=&quot;headerlink&quot; title=&quot;拦截URL&quot;&gt;&lt;/a&gt;拦截URL&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-08%20%E4%B8%8A%E5%8D%8811.55.32.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;UIWebView&quot;&gt;&lt;a href=&quot;#UIWebView&quot; class=&quot;headerlink&quot; title=&quot;UIWebView&quot;&gt;&lt;/a&gt;UIWebView&lt;/h2&gt;&lt;p&gt;在以前我们只能通过UIWebView的UIWebViewDelegate协议来实现oc与js的通信交互就是发送消息，也即函数调用。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (nullable &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)stringByEvaluatingJavaScriptFromString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)script;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIWebViewDelegate&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)webView:(&lt;span class=&quot;built_in&quot;&gt;UIWebView&lt;/span&gt; *)webView shouldStartLoadWithRequest:(&lt;span class=&quot;built_in&quot;&gt;NSURLRequest&lt;/span&gt; *)request navigationType:(&lt;span class=&quot;built_in&quot;&gt;UIWebViewNavigationType&lt;/span&gt;)navigationType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)webViewDidStartLoad:(&lt;span class=&quot;built_in&quot;&gt;UIWebView&lt;/span&gt; *)webView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)webViewDidFinishLoad:(&lt;span class=&quot;built_in&quot;&gt;UIWebView&lt;/span&gt; *)webView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)webView:(&lt;span class=&quot;built_in&quot;&gt;UIWebView&lt;/span&gt; *)webView didFailLoadWithError:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *)error;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;oc–&amp;gt;js stringByEvaluatingJavaScriptFromString,其参数是一NSString 字符串内容是js代码（这又可以是一个js函数、一句js代码或他们的组合），当js函数有返回值或一句js代码有值返回可通过stringByEvaluatingJavaScriptFromString的返回值获取&lt;/li&gt;
&lt;li&gt;js–&amp;gt;oc 利用webView的重定向原理（即重新在js中指定document.location的值，此为一url），只要在这个url字符串中按自定义的规则指定好所需调用oc中的函数和参数，然后通过OC中的shouldStartLoadWithRequest函数去捕获处理请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WKWebView&quot;&gt;&lt;a href=&quot;#WKWebView&quot; class=&quot;headerlink&quot; title=&quot;WKWebView&quot;&gt;&lt;/a&gt;WKWebView&lt;/h2&gt;&lt;p&gt;由于UIWebView比较耗内存，性能上不太好，而苹果在iOS8中推出了WKWebView。同样的用WKWebView也可以拦截URL，做JS与OC交互。WKWebView与UIWebView拦截URL的处理方式基本一样。除了代理方法和WKWebView的使用不太一样。&lt;/p&gt;
&lt;h3 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;更多的支持HTML5的特性
官方宣称的高达60fps的滚动刷新率以及内置手势
将UIWebViewDelegate与UIWebView拆分成了14类与3个协议,以前很多不方便实现的功能得以实现。文档
Safari相同的JavaScript引擎
占用更少的内存
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;WKWebView的创建有几点不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化多了configuration参数，当然这个参数也可以不传，直接使用默认的设置。&lt;/li&gt;
&lt;li&gt;WKWebView的代理有两个navigationDelegate和UIDelegate。我们要拦截URL，就要通过navigationDelegate的一个代理方法来实现。如果在HTML中要使用alert等弹窗，就必须得实现UIDelegate的相应代理方法。&lt;/li&gt;
&lt;li&gt;在iOS9之前，WKWebView加载本地HTML会有一些问题。（不能加载本地HTML，或者部分CSS/本地图片加载不了等）&lt;/li&gt;
&lt;li&gt;注意加载HTTP和HTTPS的时候要在文件设置App Transport Security Settings的Allow Arbitrary Loads设置为YES。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;WKNavigationDelegate&quot;&gt;&lt;a href=&quot;#WKNavigationDelegate&quot; class=&quot;headerlink&quot; title=&quot;WKNavigationDelegate&quot;&gt;&lt;/a&gt;WKNavigationDelegate&lt;/h4&gt;&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;pp&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;webView:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;WKWebView&lt;/span&gt; *)&lt;/span&gt;webView decidePolicyForNavigationAction:&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;WKNavigationAction&lt;/span&gt; *)&lt;/span&gt;navigationAction decisionHandler:&lt;span class=&quot;params&quot;&gt;(void (^)&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;WKNavigationActionPolicy&lt;/span&gt;)&lt;/span&gt;)decisionHandler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现这个代理方法，必须得调用decisionHandler这个block，否则会导致app 崩溃。block参数是个枚举类型，WKNavigationActionPolicyCancel代表取消加载，相当于UIWebView的代理方法return NO的情况；WKNavigationActionPolicyAllow代表允许加载，相当于UIWebView的代理方法中return YES的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WKWebView中OC直接调用JS方法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *js = &lt;span class=&quot;string&quot;&gt;@&quot;callJsAlert()&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.webView&lt;/span&gt; evaluateJavaScript:js completionHandler:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; _Nullable response, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; * _Nullable error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;response: %@ error: %@&quot;&lt;/span&gt;, response, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;call js alert by native&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;evaluateJavaScript:completionHandler:&lt;/strong&gt;没有返回值，JS 执行成功还是失败会在completionHandler 中返回。所以使用这个API 就可以避免执行耗时的JS，或者alert 导致界面卡住的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WKWebView中JS调用OC原生方法&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;MessageHandler&quot;&gt;&lt;a href=&quot;#MessageHandler&quot; class=&quot;headerlink&quot; title=&quot;MessageHandler&quot;&gt;&lt;/a&gt;MessageHandler&lt;/h2&gt;&lt;p&gt;利用WKWebView的新特性MessageHandler来实现JS调用原生方法。&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-08%20%E4%B8%8B%E5%8D%881.58.58.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;MessageHandler的好处&quot;&gt;&lt;a href=&quot;#MessageHandler的好处&quot; class=&quot;headerlink&quot; title=&quot;MessageHandler的好处&quot;&gt;&lt;/a&gt;MessageHandler的好处&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在JS中写起来简单，不用再用创建URL的方式那么麻烦了。&lt;/li&gt;
&lt;li&gt;JS传递参数更方便。使用拦截URL的方式传递参数，只能把参数拼接在后面，如果遇到要传递的参数中有特殊字符，如&amp;amp;、=、?等，必须得转换，否则参数解析肯定会出错。&lt;/li&gt;
&lt;li&gt;使用MessageHandler就可以避免特殊字符引起的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h3&gt;&lt;p&gt;WKWebView初始化时，有一个参数叫configuration，它是WKWebViewConfiguration类型的参数，而WKWebViewConfiguration有一个属性叫userContentController，它又是WKUserContentController类型的参数。WKUserContentController对象有一个方法- addScriptMessageHandler:name:，我把这个功能简称为MessageHandler。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;- addScriptMessageHandler:name:&lt;/code&gt;有两个参数，第一个参数是userContentController的代理对象，第二个参数是JS里发送postMessage的对象。&lt;/p&gt;
&lt;p&gt;所以要使用MessageHandler功能，就必须要实现WKScriptMessageHandler协议。&lt;br&gt;在OC文件中：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WKWebViewConfiguration *config = [[WKWebViewConfiguration alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.userContentController = [[WKUserContentController alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 注入JS对象名称AppModel，当JS通过AppModel来调用时，我们可以在WKScriptMessageHandler代理中接收到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[config.userContentController &lt;span class=&quot;string&quot;&gt;addScriptMessageHandler:&lt;/span&gt;self &lt;span class=&quot;string&quot;&gt;name:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;AppModel&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//WKScriptMessageHandler协议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;typename&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;userContentController:&lt;/span&gt;(WKUserContentController *)userContentController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;label&quot;&gt;      didReceiveScriptMessage:&lt;/span&gt;(WKScriptMessage *)message &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([message.name &lt;span class=&quot;string&quot;&gt;isEqualToString:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;AppModel&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;%@&quot;&lt;/span&gt;, message.body);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现协议方法。&lt;br&gt;这里实现了两个协议&amp;lt; WKUIDelegate,WKScriptMessageHandler &amp;gt;，WKUIDelegate是因为需要在JS中弹出alert。WKScriptMessageHandler是用来处理JS调用OC方法的请求。&lt;strong&gt;名字替换AppModel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在JS文件中：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// AppModel是我们所注入的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.webkit&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.messageHandlers&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.AppModel&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.postMessage&lt;/span&gt;(&amp;#123;&lt;span class=&quot;attribute&quot;&gt;body&lt;/span&gt;: response&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;JavaScriptCore&quot;&gt;&lt;a href=&quot;#JavaScriptCore&quot; class=&quot;headerlink&quot; title=&quot;JavaScriptCore&quot;&gt;&lt;/a&gt;JavaScriptCore&lt;/h2&gt;&lt;p&gt;JavaScriptCore自iOS7之后出现，用Objective-C把WebKit的JavaScript引擎封装了一下，提供了简单快捷的方式与JavaScript交互。&lt;/p&gt;
&lt;p&gt;特点： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS中调用OC方法更简单，参数的传递也更加简单 &lt;/li&gt;
&lt;li&gt;支持iOS7以上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用-1&quot;&gt;&lt;a href=&quot;#使用-1&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;使用前需要先导入JavaScriptCore.framework&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSVirtualMachine直译是JS虚拟机，也就是说JavaScript是在一个虚拟的环境中执行，而JSVirtualMachine为其执行提供底层资源。&lt;/li&gt;
&lt;li&gt;JSContext是为JavaScript的执行提供运行环境，所有的JavaScript的执行都必须在JSContext环境中。JSContext也管理JSVirtualMachine中对象的生命周期。每一个JSValue对象都要强引用关联一个JSContext。当与某JSContext对象关联的所有JSValue释放后，JSContext也会被释放。&lt;/li&gt;
&lt;li&gt;JSValue都是通过JSContext返回或者创建的，并没有构造方法。JSValue包含了每一个JavaScript类型的值，通过JSValue可以将Objective-C中的类型转换为JavaScript中的类型，也可以将JavaScript中的类型转换为Objective-C中的类型。&lt;/li&gt;
&lt;li&gt;JSManagedValue主要用途是解决JSValue对象在Objective-C堆上的安全引用问题。把JSValue保存进Objective-C堆对象中是不正确的，这很容易引发循环引用，而导致JSContext不能释放。但是不常用。&lt;/li&gt;
&lt;li&gt;JSExport是一个协议类，但是该协议并没有任何属性和方法。可以自定义一个协议类，继承自JSExport。无论在JSExport里声明的属性、实例方法还是类方法，继承的协议都会自动的提供给任何JavaScript代码。因此，只需要在自定义的协议类中，添加上属性和方法就可以了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;WKWebVIew中的坑&quot;&gt;&lt;a href=&quot;#WKWebVIew中的坑&quot; class=&quot;headerlink&quot; title=&quot;WKWebVIew中的坑&quot;&gt;&lt;/a&gt;WKWebVIew中的坑&lt;/h1&gt;&lt;h2 id=&quot;WKWebView导致ViewController不调用dealloc方法&quot;&gt;&lt;a href=&quot;#WKWebView导致ViewController不调用dealloc方法&quot; class=&quot;headerlink&quot; title=&quot;WKWebView导致ViewController不调用dealloc方法&quot;&gt;&lt;/a&gt;WKWebView导致ViewController不调用dealloc方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;webview不设置 delegate，可以正常dealloc&lt;/li&gt;
&lt;li&gt;webview.UIDelegate和 navigationDelegate 设置为 self，可以正常dealloc&lt;/li&gt;
&lt;li&gt;webview.configuration.userContentController addScriptMessageHandler 为 self之后，无法正常dealloc，该方法引起ViewController内存泄漏。&lt;/li&gt;
&lt;li&gt;使用 ScriptMessageHandler 作为webview.scriptMessageHandler，当前viewController 可以正常释放。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当前 viewController dealloc 方法中，通过 removeScriptMessazgeHanlder 释放掉&lt;br&gt;scriptMessageHandler&lt;/p&gt;
&lt;p&gt;解决方法：&lt;br&gt;(1)WeakScriptMessageDelegate&lt;br&gt;可以创建一个新的类WeakScriptMessageDelegate，也可以将@interface-@end写在ViewController.h中，@implementation-@end写在ViewController.m中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WeakScriptMessageDelegate&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;WKScriptMessageHandler&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;WKScriptMessageHandler&amp;gt; scriptDelegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithDelegate:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;WKScriptMessageHandler&amp;gt;)scriptDelegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WeakScriptMessageDelegate&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithDelegate:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;WKScriptMessageHandler&amp;gt;)scriptDelegate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _scriptDelegate = scriptDelegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.scriptDelegate&lt;/span&gt; userContentController:userContentController didReceiveScriptMessage:message];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(2)使用&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_webView = [[WKWebView alloc] initWithFrame:&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.view.bounds configuration:configuration];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; _webView.UIDelegate = &lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; _webView.navigationDelegate = &lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;configuration.&lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;ContentController = [WKUserContentController new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//无法正常dealloc[configuration.&lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;ContentController addScriptMessageHandler:&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt; name:@&lt;span class=&quot;string&quot;&gt;&quot;myHandler&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用代理来实现可以调用dealloc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[configuration.&lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;ContentController addScriptMessageHandler:[[WeakScriptMessageDelegate alloc] initWithDelegate:&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;] name:@&lt;span class=&quot;string&quot;&gt;&quot;myHandler&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; - (void)dealloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;literal&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;ContentController removeScriptMessageHandlerForName:@&lt;span class=&quot;string&quot;&gt;&quot;myHandler&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Demo地址：&lt;a href=&quot;https://github.com/peilinghui/BokeDemo/tree/master/PLHWebViewDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/BokeDemo/tree/master/PLHWebViewDemo&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/9513d101e582#&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WKWebView使用及注意点(keng)&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://imciel.com/2016/06/18/oc-js-communication/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 JavaScriptCore 实现 JS和OC间的通信&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.brighttj.com/ios/ios-user-safari-debug-webview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用safari对webview进行调试&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Web App即是HTML5 APP框架开发模式，使用HTML5,CSS3以及JavaScript以及服务器端语言来完成开发，Web App具有跨平台的优势。那么就来学习一下iOS中JS与OC相互调用的方式。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入学习NSURLProtocol</title>
    <link href="http://peilinghui.com/2017/04/30/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0NSURLProtocol/"/>
    <id>http://peilinghui.com/2017/04/30/深入学习NSURLProtocol/</id>
    <published>2017-04-30T04:59:56.000Z</published>
    <updated>2017-04-30T09:18:27.000Z</updated>
    
    <content type="html">&lt;p&gt;研究一下NSURLProtocol.h。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;NSURLProtocol是什么？&quot;&gt;&lt;a href=&quot;#NSURLProtocol是什么？&quot; class=&quot;headerlink&quot; title=&quot;NSURLProtocol是什么？&quot;&gt;&lt;/a&gt;NSURLProtocol是什么？&lt;/h1&gt;&lt;p&gt;NSURLProtocol是URL Loading System的重要组成部分。&lt;br&gt;首先虽然名叫NSURLProtocol，但它却不是协议。它是一个抽象类。我们要使用它的时候需要创建它的一个子类。&lt;br&gt;NSURLProtocol在iOS系统中大概处于这样一个位置。&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-30%20%E4%B8%8B%E5%8D%882.12.33.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果开发者自定义的一个NSURLProtocol并且注册到app中，那么在这个自定义的NSURLProtocol中我们可以拦截UIWebView，基于系统的NSURLConnection或者NSURLSession进行封装的网络请求，然后做到自定义的response返回。非常强大。&lt;/p&gt;
&lt;h1 id=&quot;NSURLProtocol能拦截哪些网络请求&quot;&gt;&lt;a href=&quot;#NSURLProtocol能拦截哪些网络请求&quot; class=&quot;headerlink&quot; title=&quot;NSURLProtocol能拦截哪些网络请求&quot;&gt;&lt;/a&gt;NSURLProtocol能拦截哪些网络请求&lt;/h1&gt;&lt;p&gt;URL Loading System&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-30%20%E4%B8%8B%E5%8D%882.13.34.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;所以，可以拦截的网络请求包括NSURLSession，NSURLConnection以及UIWebVIew。&lt;br&gt;基于CFNetwork的网络请求，以及WKWebView的请求是无法拦截的。&lt;/p&gt;
&lt;p&gt;现在主流的iOS网络库，例如AFNetworking，Alamofire等网络库都是基于NSURLSession或NSURLConnection的，所以这些网络库的网络请求都可以被NSURLProtocol所拦截 。&lt;br&gt;还有一些年代比较久远的网络库，例如ASIHTTPRequest，MKNetwokit等网路库都是基于CFNetwork的，所以这些网络库的网络请求无法被NSURLProtocol拦截。&lt;/p&gt;
&lt;h1 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h1&gt;&lt;p&gt;NSURLProtocol是一个抽象类。我们要使用它的时候需要创建它的一个子类。&lt;br&gt;&lt;code&gt;@interface PLHHTTPProtocol : NSURLProtocol&lt;/code&gt;&lt;br&gt;使用NSURLProtocol的主要可以分为5个步骤：&lt;br&gt;注册—&amp;gt;拦截—&amp;gt;转发—&amp;gt;回调—&amp;gt;结束&lt;/p&gt;
&lt;h2 id=&quot;注册：&quot;&gt;&lt;a href=&quot;#注册：&quot; class=&quot;headerlink&quot; title=&quot;注册：&quot;&gt;&lt;/a&gt;注册：&lt;/h2&gt;&lt;p&gt;在系统加载的时候，把自定义的PLHHTTPProtocol注册到URL加载系统中，这样 所有的URL请求都有机会进入我们自定义的PLHHTTPProtocol进行拦截处理。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;-&lt;/span&gt; (BOOL)&lt;span class=&quot;tag&quot;&gt;application&lt;/span&gt;:(UIApplication *)&lt;span class=&quot;tag&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt;:(NSDictionary *)&lt;span class=&quot;tag&quot;&gt;launchOptions&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr_selector&quot;&gt;[NSURLProtocol registerClass:[PLHHTTPURLProtocol class]&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于基于NSURLSession的网络请求，需要通过配置NSURLSessionConfiguration对象的protocolClasses属性。&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSURLSessionConfiguration *sessionConfiguration = [NSURLSessionConfiguration defaultSessionConfiguration];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sessionConfiguration.protocolClasses = @&lt;span class=&quot;string&quot;&gt;[[NSClassFromString(@&quot;CustomURLProtocol&quot;) class]]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;拦截：&quot;&gt;&lt;a href=&quot;#拦截：&quot; class=&quot;headerlink&quot; title=&quot;拦截：&quot;&gt;&lt;/a&gt;拦截：&lt;/h2&gt;&lt;p&gt;在拦截到网络请求后，NSURLProtocol会依次执行下列方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+ (BOOL)canInitWithRequest:(NSURLRequest *)request&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该方法会拿到request的对象，我们可以通过该方法的返回值来筛选request是否需要被NSURLProtocol做拦截处理。&lt;br&gt;如果返回YES则进入该自定义加载器进行处理，如果返回NO则不进入该自定义选择器，使用系统默认行为进行处理。&lt;/p&gt;
&lt;p&gt;重新设置NSURLRequest的信息:&lt;br&gt;&lt;code&gt;+ (NSURLRequest *)canonicalRequestForRequest:(NSURLRequest *)request&lt;/code&gt;&lt;br&gt;比如请求重定向或者添加头部信息等等。如果没有特殊需求，直接返回request就可以了。但是因为这个方法在会在一次请求中被调用多次（暂时我也不知道什么原因为什么需要回调多洗），所以request重定向和添加头部信息也可以在开始加载中startLoading方法中重新设置。&lt;/p&gt;
&lt;h2 id=&quot;转发&quot;&gt;&lt;a href=&quot;#转发&quot; class=&quot;headerlink&quot; title=&quot;转发&quot;&gt;&lt;/a&gt;转发&lt;/h2&gt;&lt;p&gt;在拦截到网络请求，并且对网络请求进行定制处理以后。我们需要将网络请求重新发送出去。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;- (id)initWithRequest:(NSURLRequest *)request cachedResponse:(NSCachedURLResponse *)cachedResponse client:(id&amp;lt;NSURLProtocolClient&amp;gt;)client&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该方法会创建一个NSURLProtocol实例，这里每一个网络请求都会创建一个新的实例。被拦截的请求开始执行的地方.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;- (void)startLoading&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来就是转发的核心方法startLoading。在该方法中，我们把处理过的request重新发送出去。至于发送的形式，可以是基于NSURLConnection，NSURLSession甚至CFNetwork。&lt;/p&gt;
&lt;h2 id=&quot;回调&quot;&gt;&lt;a href=&quot;#回调&quot; class=&quot;headerlink&quot; title=&quot;回调&quot;&gt;&lt;/a&gt;回调&lt;/h2&gt;&lt;p&gt;既是面向切面的编程，就不能影响到原来网络请求的逻辑。所以上一步将网络请求转发出去以后，当收到网络请求的返回，还需要再将返回值返回给原来发送网络请求的地方。&lt;br&gt;主要需要需要调用到&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self.client &lt;/span&gt;URLProtocol:&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;didFailWithError:error]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self.client &lt;/span&gt;URLProtocolDidFinishLoading:&lt;span class=&quot;keyword&quot;&gt;self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;self.client &lt;/span&gt;URLProtocol:&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;didReceiveResponse:response cacheStoragePolicy:NSURLCacheStorageNotAllowed]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self.client &lt;/span&gt;URLProtocol:&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;didLoadData:&lt;span class=&quot;preprocessor&quot;&gt;data&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这四个方法来回调给原来发送网络请求的地方。&lt;br&gt;这里假设我们在转发过程中是使用NSURLSession发送的网络请求，那么在NSURLSession的回调方法中，我们做相应的处理即可。并且我们也可以对这些返回，进行定制化处理。&lt;/p&gt;
&lt;h2 id=&quot;结束：&quot;&gt;&lt;a href=&quot;#结束：&quot; class=&quot;headerlink&quot; title=&quot;结束：&quot;&gt;&lt;/a&gt;结束：&lt;/h2&gt;&lt;p&gt;在一个网络请求完全结束以后，NSURLProtocol回调用到.结束加载URL请求&lt;br&gt;&lt;code&gt;- (void)stopLoading&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;应用&quot;&gt;&lt;a href=&quot;#应用&quot; class=&quot;headerlink&quot; title=&quot;应用&quot;&gt;&lt;/a&gt;应用&lt;/h1&gt;&lt;p&gt;既然NSURLProtocol功能非常强大，那么在具体开发中，会有哪些应用呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义请求和响应&lt;/li&gt;
&lt;li&gt;网络的缓存处理（H5离线包 和 网络图片缓存）&lt;/li&gt;
&lt;li&gt;重定向网络请求&lt;/li&gt;
&lt;li&gt;为测试提供数据Mocking功能，在没有网络的情况下使用本地数据返回。&lt;/li&gt;
&lt;li&gt;过滤掉一些非法请求&lt;/li&gt;
&lt;li&gt;快速进行测试环境的切换&lt;/li&gt;
&lt;li&gt;拦截图片加载请求，转为从本地文件加载&lt;/li&gt;
&lt;li&gt;可以拦截UIWebView，基于系统的NSURLConnection或者NSURLSession进行封装的网络请求。目前WKWebView无法被NSURLProtocol拦截。&lt;/li&gt;
&lt;li&gt;当有多个自定义NSURLProtocol注册到系统中的话，会按照他们注册的反向顺序依次调用URL加载流程。当其中有一个NSURLProtocol拦截到请求的话，后续的NSURLProtocol就无法拦截到该请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DEMO地址：&lt;a href=&quot;https://github.com/peilinghui/BokeDemo/tree/master/PLHHTTPDNSDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/BokeDemo/tree/master/PLHHTTPDNSDemo&lt;/a&gt;      &lt;/p&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/02781c0bbca9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSURLProtocol全攻略&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/55f5ac1ab817&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WKWebView 不支持 NSURLProtocol 吗&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;研究一下NSURLProtocol.h。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UIView的Frame和bounds区别</title>
    <link href="http://peilinghui.com/2017/04/21/UIView%E7%9A%84Frame%E5%92%8Cbounds%E5%8C%BA%E5%88%AB/"/>
    <id>http://peilinghui.com/2017/04/21/UIView的Frame和bounds区别/</id>
    <published>2017-04-21T10:48:21.000Z</published>
    <updated>2017-04-22T06:19:05.000Z</updated>
    
    <content type="html">&lt;p&gt;UIView的相关重点。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/UIview.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;frame和bounds简介&quot;&gt;&lt;a href=&quot;#frame和bounds简介&quot; class=&quot;headerlink&quot; title=&quot;frame和bounds简介&quot;&gt;&lt;/a&gt;frame和bounds简介&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/frame%E5%92%8Cbounds.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;frame: 该view在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）&lt;br&gt;bounds：该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）&lt;br&gt;center：该view的中心点在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）&lt;/p&gt;
&lt;h1 id=&quot;实际例子&quot;&gt;&lt;a href=&quot;#实际例子&quot; class=&quot;headerlink&quot; title=&quot;实际例子&quot;&gt;&lt;/a&gt;实际例子&lt;/h1&gt;&lt;p&gt;Demo：&lt;a href=&quot;https://github.com/peilinghui/BokeDemo/tree/master/FrameAndBoundsDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/peilinghui/BokeDemo/tree/master/FrameAndBoundsDemo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;旋转一个自定义View&quot;&gt;&lt;a href=&quot;#旋转一个自定义View&quot; class=&quot;headerlink&quot; title=&quot;旋转一个自定义View&quot;&gt;&lt;/a&gt;旋转一个自定义View&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#pragma mark --   例子1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//旋转一个自定义view后，frame改变了，而bounds没有改变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *View1 = [[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; alloc]initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View1&lt;span class=&quot;variable&quot;&gt;.backgroundColor&lt;/span&gt; = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; redColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.view&lt;/span&gt; addSubview:View1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;自定义子view的self.view.frame = %@&quot;&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;NSStringFromCGRect&lt;/span&gt;(View1&lt;span class=&quot;variable&quot;&gt;.frame&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//自定义子view的self.view.frame = &amp;#123;&amp;#123;100, 100&amp;#125;, &amp;#123;50, 50&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;自定义子view的self.view.bounds=%@&quot;&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;NSStringFromCGRect&lt;/span&gt;(View1&lt;span class=&quot;variable&quot;&gt;.bounds&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//自定义子view的self.view.bounds=&amp;#123;&amp;#123;0, 0&amp;#125;, &amp;#123;50, 50&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; transitionWithView:View1 duration:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    View1&lt;span class=&quot;variable&quot;&gt;.transform&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;CGAffineTransformMakeRotation&lt;/span&gt;(M_PI_4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;completion:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (finished)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;旋转后子view的self.view.frame = %@&quot;&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;NSStringFromCGRect&lt;/span&gt;(View1&lt;span class=&quot;variable&quot;&gt;.frame&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//旋转后子view的self.view.frame = &amp;#123;&amp;#123;89.644660940672622, 89.644660940672622&amp;#125;, &amp;#123;70.710678118654755, 70.710678118654755&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;旋转后子view的self.view.bounds=%@&quot;&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;NSStringFromCGRect&lt;/span&gt;(View1&lt;span class=&quot;variable&quot;&gt;.bounds&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//旋转后子view的self.view.bounds=&amp;#123;&amp;#123;0, 0&amp;#125;, &amp;#123;50, 50&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%888.09.35.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%888.09.00.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在旋转动画后，frame发生改变，bounds依然没变。下面的结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;frame的位置是根据父容器来计算的，正方形在动画开始前的x=100,y=100是相对于self.view的坐标系统而言的，从而确定当前视图在父视图中的位置。&lt;/li&gt;
&lt;li&gt;bounds的x,y是根据自己的坐标系统而言的。没错，每个view都有自己的坐标系。以自己左上角点为坐标原点。所以bounds的x,y默认为(0,0),除非调用setBounds方法；&lt;/li&gt;
&lt;li&gt;frame的size不一定等于bounds的size，在旋转后它们的size就不一样了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把frame理解为占用区域，把bounds理解为边界。View在旋转过程中，其实自己的坐标系统并没有发生改变，bounds中的origin只能通过setBounds方法修改。&lt;/p&gt;
&lt;h3 id=&quot;把一个子View放到父View中，改变父View的bounds&quot;&gt;&lt;a href=&quot;#把一个子View放到父View中，改变父View的bounds&quot; class=&quot;headerlink&quot; title=&quot;把一个子View放到父View中，改变父View的bounds&quot;&gt;&lt;/a&gt;把一个子View放到父View中，改变父View的bounds&lt;/h3&gt;&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;UIView&lt;/span&gt; *fatherView = [[&lt;span class=&quot;constant&quot;&gt;UIView&lt;/span&gt; alloc]&lt;span class=&quot;symbol&quot;&gt;initWithFrame:&lt;/span&gt;&lt;span class=&quot;constant&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatherView.backgroundColor = [&lt;span class=&quot;constant&quot;&gt;UIColor&lt;/span&gt; yellowColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view &lt;span class=&quot;symbol&quot;&gt;addSubview:&lt;/span&gt;fatherView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;UIView&lt;/span&gt; *sunView = [[&lt;span class=&quot;constant&quot;&gt;UIView&lt;/span&gt; alloc]&lt;span class=&quot;symbol&quot;&gt;initWithFrame:&lt;/span&gt;&lt;span class=&quot;constant&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sunView.backgroundColor = [&lt;span class=&quot;constant&quot;&gt;UIColor&lt;/span&gt; redColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[fatherView &lt;span class=&quot;symbol&quot;&gt;addSubview:&lt;/span&gt;sunView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;父view的frame = %@,bounds=%@,中心点=：%@&quot;&lt;/span&gt;,&lt;span class=&quot;constant&quot;&gt;NSStringFromCGRect&lt;/span&gt;(fatherView.frame),&lt;span class=&quot;constant&quot;&gt;NSStringFromCGRect&lt;/span&gt;(fatherView.bounds),&lt;span class=&quot;constant&quot;&gt;NSStringFromCGPoint&lt;/span&gt;(fatherView.center));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;父view的frame = &lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;,bounds=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;,中心点=：&amp;#123;&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;NSLog&lt;/span&gt;(@&lt;span class=&quot;string&quot;&gt;&quot;子view的frame = %@,bounds=%@,中心点=：%@&quot;&lt;/span&gt;,&lt;span class=&quot;constant&quot;&gt;NSStringFromCGRect&lt;/span&gt;(sunView.frame),&lt;span class=&quot;constant&quot;&gt;NSStringFromCGRect&lt;/span&gt;(sunView.bounds),&lt;span class=&quot;constant&quot;&gt;NSStringFromCGPoint&lt;/span&gt;(sunView.center));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;子view的frame = &lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;,bounds=&lt;span class=&quot;expansion&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;,中心点=：&amp;#123;&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;regexp&quot;&gt;/1. 改变父View的bounds的位置,父view的bounds改变了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[UIView animateWithDuration:4 animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [fatherView setBounds:CGRectMake(30, 30, 200, 200)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;completion:^(BOOL finished)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&quot;改变父坐标bounds的位置后父view的frame = %@,bounds=%@,中心点=：%@&quot;,NSStringFromCGRect(fatherView.frame),NSStringFromCGRect(fatherView.bounds),NSStringFromCGPoint(fatherView.center));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/ 改变父坐标bounds的位置后父view的frame = &amp;#123;&amp;#123;100, 100&amp;#125;, &amp;#123;200, 200&amp;#125;&amp;#125;,bounds=&amp;#123;&amp;#123;30, 30&amp;#125;, &amp;#123;200, 200&amp;#125;&amp;#125;,中心点=：&amp;#123;200, 200&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	NSLog(@&quot;改变父坐标bounds的位置后子view的frame = %@,bounds=%@,中心点=：%@&quot;,NSStringFromCGRect(sunView.frame),NSStringFromCGRect(sunView.bounds),NSStringFromCGPoint(sunView.center));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/改变父坐标bounds的位置后子view的frame = &amp;#123;&amp;#123;0, 0&amp;#125;, &amp;#123;50, 50&amp;#125;&amp;#125;,bounds=&amp;#123;&amp;#123;0, 0&amp;#125;, &amp;#123;50, 50&amp;#125;&amp;#125;,中心点=：&amp;#123;25, 25&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%888.22.30.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%888.21.21.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%888.24.15.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;setBounds 强制将自己坐标系的左上角点改为（30，30）。那么真正的原点(0,0)自然向右上角偏移(30,30);&lt;br&gt;若是setBounds设为（-30，-30） ，则子view向右下角移动，偏移(30,30)。&lt;br&gt;注意：setBounds中的(x,y)只改变自己的坐标系统。子view的bounds和frame并不会改变。&lt;br&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setBounds中的(x,y)只改变自己的坐标系统，子View的bounds和frame并不会改变；&lt;/li&gt;
&lt;li&gt;setBounds是修改自己坐标系的原点位置，进而影响到子View的显示位置；&lt;/li&gt;
&lt;li&gt;bounds改变位置时，改变的是子视图的位置，自身没有影响，其实就是改变了自身的坐标系原点，默认原点在左上角。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;改变父View的bounds的大小&quot;&gt;&lt;a href=&quot;#改变父View的bounds的大小&quot; class=&quot;headerlink&quot; title=&quot;改变父View的bounds的大小&quot;&gt;&lt;/a&gt;改变父View的bounds的大小&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[fatherView setBounds:CGRectMake(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%888.34.11.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%888.34.22.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;使用setBounds方法减小了父View的bounds.size ,可以看到把frame也改变了。总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改bounds的大小，bounds的大小代表当前视图的长和宽，修改长宽后，中心点继续保持不变，长宽进行改变，通过bounds修改长宽就像是以中心点为基准点对长宽两边同时进行缩放。&lt;/li&gt;
&lt;li&gt;center是根据父容器的相对位置来计算的，无论是修改父容器的bounds还是自身的bounds，都不会改变center。况且使用bounds来缩放view，都是根据center中心点来缩放的，所以center不会改变。&lt;/li&gt;
&lt;li&gt;setBounds也可以修改view的大小，进而修改frame。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;改子视图的bounds的位置&quot;&gt;&lt;a href=&quot;#改子视图的bounds的位置&quot; class=&quot;headerlink&quot; title=&quot;改子视图的bounds的位置&quot;&gt;&lt;/a&gt;改子视图的bounds的位置&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[sunView setBounds:CGRectMake(-&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;图像没有变化，与把一个子View放到父View中那个图一样的。&lt;/p&gt;
&lt;h3 id=&quot;修改子视图的bounds的大小&quot;&gt;&lt;a href=&quot;#修改子视图的bounds的大小&quot; class=&quot;headerlink&quot; title=&quot;修改子视图的bounds的大小&quot;&gt;&lt;/a&gt;修改子视图的bounds的大小&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[sunView setBounds:CGRectMake(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%888.48.46.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%888.53.04.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;修改子视图的bounds的大小，只是把子视图以中心点为中心扩大了，改变了子视图的frame的位置和bounds，父view不受影响。&lt;/p&gt;
&lt;h3 id=&quot;改变父view的frame的位置&quot;&gt;&lt;a href=&quot;#改变父view的frame的位置&quot; class=&quot;headerlink&quot; title=&quot;改变父view的frame的位置&quot;&gt;&lt;/a&gt;改变父view的frame的位置&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[fatherView setFrame:CGRectMake(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%889.01.36.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%889.01.43.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;从效果图上可以看到，我们改变了父View的位置和大小（坐标系原点仍然是(0,0),但是实际位置已经改变了，坐标系改变），子View的位置也改变了。但是子View的frame和bounds并没有改变。因为子View.origin是相对于父View的而言的，这并没有改变。&lt;/p&gt;
&lt;h3 id=&quot;改变父view的frame的大小&quot;&gt;&lt;a href=&quot;#改变父view的frame的大小&quot; class=&quot;headerlink&quot; title=&quot;改变父view的frame的大小&quot;&gt;&lt;/a&gt;改变父view的frame的大小&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[fatherView setFrame:CGRectMake(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%888.34.11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%889.12.26.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[fatherView setFrame:CGRectMake(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%889.13.02.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xr8q7.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-21%20%E4%B8%8B%E5%8D%889.13.26.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;setFrame改变大小和setBounds改变大小是完全不一样的，setFrame改变长宽是从左上角原点进行缩放的，固定的是原点。而setBounds则固定的是center。&lt;/p&gt;
&lt;p&gt;一句话说：使用frame改变view大小，center改变，因为缩放参考点为左上角。使用bounds改变view大小，center不变，因为缩放参考点为center。&lt;br&gt;frame是参考父view的坐标系来设置自己左上角的位置。&lt;br&gt;设置bounds可以修改自己坐标系的原点位置，进而影响到其“子view”的显示位置。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果想修改view的位置而不影响其他，修改自身frame的位置；想修改view的大小，修改frame的大小或者bounds的大小（考虑相对位置的改变）。&lt;/li&gt;
&lt;li&gt;如果想修改view的所有子view的位置，修改view的bounds的位置（父容器坐标系）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;bounds使用场景&quot;&gt;&lt;a href=&quot;#bounds使用场景&quot; class=&quot;headerlink&quot; title=&quot;bounds使用场景&quot;&gt;&lt;/a&gt;bounds使用场景&lt;/h1&gt;&lt;p&gt;其实bounds我们一直在使用，就是我们使用scrollview的时候。&lt;br&gt;为什么我们滚动scrollview可以看到超出显示屏的内容。就是因为scrollview在不断改变自己的bounds，从而改变scrollview上的子view的frame，让他们的frame始终在最顶级view（window）的frame内部，这样我们就可以始终看到内容了。&lt;/p&gt;
&lt;p&gt;向上滚动scrollview，我们就不断增加scrollview的bounds的y值，也就是不断把scrollview的本地坐标系原点向下偏移（相对于scrollview的父view的坐标系，y值越大，越向下偏移）。那么此时scrollview的子控件的frame设置的(0,0)就是不断向上偏移&lt;/p&gt;
&lt;p&gt;假设某一时刻scrollview的坐标系原点为(0,100)，那么scrollview的(0,0)位置就是相对于坐标系原点向上偏移100的距离，设置scrollview的子控件的frame为(0,0)，就是设置子控件左上角在scrollview中的(0,0)位置，那么子控件就会向上偏移100，你也就看到scrollview的内容（子控件）向上滚动的效果。&lt;/p&gt;
&lt;p&gt;我们可以不断增加fatherView的bounds的y值，来看看是不是可以达到同样的效果：fatherView不动，Sunview在不断向上滚动&lt;br&gt;理解 Scroll Views:&lt;a href=&quot;https://objccn.io/issue-3-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://objccn.io/issue-3-2/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;UIView的相关重点。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习React-Native的与原生的交互</title>
    <link href="http://peilinghui.com/2017/03/21/%E5%AD%A6%E4%B9%A0React-Native%E7%9A%84%E4%B8%8E%E5%8E%9F%E7%94%9F%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
    <id>http://peilinghui.com/2017/03/21/学习React-Native的与原生的交互/</id>
    <published>2017-03-21T09:12:44.000Z</published>
    <updated>2017-07-21T10:34:57.000Z</updated>
    
    <content type="html">&lt;p&gt;在用RN开发的时候，遇到一些情况也需要来扩展原生的组件，就需要与OC来交互。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;通讯的机制与流程&quot;&gt;&lt;a href=&quot;#通讯的机制与流程&quot; class=&quot;headerlink&quot; title=&quot;通讯的机制与流程&quot;&gt;&lt;/a&gt;通讯的机制与流程&lt;/h1&gt;&lt;h1 id=&quot;自定义Native-API组件&quot;&gt;&lt;a href=&quot;#自定义Native-API组件&quot; class=&quot;headerlink&quot; title=&quot;自定义Native API组件&quot;&gt;&lt;/a&gt;自定义Native API组件&lt;/h1&gt;&lt;h2 id=&quot;模块和方法的定义&quot;&gt;&lt;a href=&quot;#模块和方法的定义&quot; class=&quot;headerlink&quot; title=&quot;模块和方法的定义&quot;&gt;&lt;/a&gt;模块和方法的定义&lt;/h2&gt;&lt;p&gt;模块类就是一个实现了RCTBridgeModule协议的类。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// CalendarManager.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&amp;lt;React/RCTBridgeModule.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#import &lt;span class=&quot;title&quot;&gt;&amp;lt;React/RCTLog.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CalendarManager&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;RCTBridgeModule&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了实现RCTBridgeModule协议，你的类需要包含RCT_EXPORT_MODULE()宏.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RCT_EXPORT_MODULE();//向系统注册模块&lt;br&gt;RCT_REMAP_METHOD();//暴露模块方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JavaScript和OC之间要通信，完成数据类型的转化，标准的JSON的类型都是支持的。&lt;br&gt;RCT_EXPORT_METHOD 支持所有标准JSON类型，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string (NSString)&lt;/li&gt;
&lt;li&gt;number (NSInteger, float, double, CGFloat, NSNumber)&lt;/li&gt;
&lt;li&gt;boolean (BOOL, NSNumber)&lt;/li&gt;
&lt;li&gt;array (NSArray) 包含本列表中任意类型&lt;/li&gt;
&lt;li&gt;object (NSDictionary) 包含string类型的键和本列表中任意类型的值&lt;/li&gt;
&lt;li&gt;function (RCTResponseSenderBlock)&lt;br&gt;还支持一些常用类型：NSDate、UIColor、UIfont、NSURL、NSURLRequest、UIColorArray、CGPoint。。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;回调函数&quot;&gt;&lt;a href=&quot;#回调函数&quot; class=&quot;headerlink&quot; title=&quot;回调函数&quot;&gt;&lt;/a&gt;回调函数&lt;/h2&gt;&lt;p&gt;原生模块还支持一种特殊的参数——回调函数。它提供了一个函数来把返回值传回给JavaScript。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(^RCTResponseSenderBlock)(NSArray &lt;em&gt;)接收多个参数的回调函数&lt;br&gt;(^RCTRespomseErrorBlock)(NSError &lt;/em&gt;)接受错误参数的回调函数&lt;br&gt;(^RCTPromiseResolveBlock)(id result):处理Promise Resolve&lt;br&gt;(^RCTPromiseRejectBlock)(NSError *):处理Promise Reject&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;React-Native代码与OC代码的互通&quot;&gt;&lt;a href=&quot;#React-Native代码与OC代码的互通&quot; class=&quot;headerlink&quot; title=&quot;React Native代码与OC代码的互通&quot;&gt;&lt;/a&gt;React Native代码与OC代码的互通&lt;/h1&gt;&lt;p&gt;为了实现消息互通，需要建立一个原生语言模块负责与React Native桥接&lt;/p&gt;
&lt;p&gt;OC代码向React Native发送消息有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过回调接口。这种方式要求React Native代码先将接口传递给OC代码，然后OC代码才可以通过这个回调接口向React Native代码发送消息。&lt;/li&gt;
&lt;li&gt;通过eventDispatcher向React Native模块发送事件。这样能够做到OC代码主动向React Native发送消息。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在用RN开发的时候，遇到一些情况也需要来扩展原生的组件，就需要与OC来交互。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习React-Native的API和组件</title>
    <link href="http://peilinghui.com/2017/03/10/%E5%AD%A6%E4%B9%A0React-Native%E7%9A%84API%E5%92%8C%E7%BB%84%E4%BB%B6/"/>
    <id>http://peilinghui.com/2017/03/10/学习React-Native的API和组件/</id>
    <published>2017-03-10T09:09:04.000Z</published>
    <updated>2017-07-21T09:02:25.000Z</updated>
    
    <content type="html">&lt;p&gt;在学习了React-Native的搭建以后，然后就在网上找了一些Demo来学习，并且开始练习。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://reactnative.cn/docs/0.46/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://reactnative.cn/docs/0.46/getting-started.html&lt;/a&gt;&lt;br&gt;几个Demo链接：&lt;br&gt;&lt;a href=&quot;https://github.com/peilinghui/react-native-Gank&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GankIO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git clone &lt;a href=&quot;https://github.com/wangdicoder/react-native-Gank&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wangdicoder/react-native-Gank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cd react-native-Gank&lt;/li&gt;
&lt;li&gt;npm install&lt;/li&gt;
&lt;li&gt;react-native link (this step is for add the icon component)&lt;/li&gt;
&lt;li&gt;react-native run-android / run-ios&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;常用组件&quot;&gt;&lt;a href=&quot;#常用组件&quot; class=&quot;headerlink&quot; title=&quot;常用组件&quot;&gt;&lt;/a&gt;常用组件&lt;/h1&gt;&lt;h3 id=&quot;View组件&quot;&gt;&lt;a href=&quot;#View组件&quot; class=&quot;headerlink&quot; title=&quot;View组件&quot;&gt;&lt;/a&gt;View组件&lt;/h3&gt;&lt;p&gt;类似于div的组件就是View容器组件，视图布局都是用它，支持flexbox的布局。&lt;/p&gt;
&lt;h3 id=&quot;Text组件&quot;&gt;&lt;a href=&quot;#Text组件&quot; class=&quot;headerlink&quot; title=&quot;Text组件&quot;&gt;&lt;/a&gt;Text组件&lt;/h3&gt;&lt;p&gt;一个用于显示文本的React组件，并且它也支持嵌套、样式，以及触摸处理。有onPress事件，可以给text组件绑定触摸点击事件。&lt;/p&gt;
&lt;h3 id=&quot;TextInput组件&quot;&gt;&lt;a href=&quot;#TextInput组件&quot; class=&quot;headerlink&quot; title=&quot;TextInput组件&quot;&gt;&lt;/a&gt;TextInput组件&lt;/h3&gt;&lt;p&gt;TextInput是一个允许用户在应用中通过键盘输入文本的基本组件。本组件的属性提供了多种特性的配置，譬如自动完成、自动大小写、占位文字，以及多种不同的键盘类型（如纯数字键盘）等等。&lt;/p&gt;
&lt;h3 id=&quot;Touchable组件&quot;&gt;&lt;a href=&quot;#Touchable组件&quot; class=&quot;headerlink&quot; title=&quot;Touchable组件&quot;&gt;&lt;/a&gt;Touchable组件&lt;/h3&gt;&lt;h4 id=&quot;TouchableHighlight&quot;&gt;&lt;a href=&quot;#TouchableHighlight&quot; class=&quot;headerlink&quot; title=&quot;TouchableHighlight&quot;&gt;&lt;/a&gt;TouchableHighlight&lt;/h4&gt;&lt;p&gt;高亮触摸，用户点击的时候会产生高亮的效果。&lt;/p&gt;
&lt;h4 id=&quot;TouchableOpacity&quot;&gt;&lt;a href=&quot;#TouchableOpacity&quot; class=&quot;headerlink&quot; title=&quot;TouchableOpacity&quot;&gt;&lt;/a&gt;TouchableOpacity&lt;/h4&gt;&lt;p&gt;透明触摸，用户点击时，点击的组件会出现透明过度的效果。&lt;br&gt;activeOpacity number&lt;br&gt;指定封装的视图在被触摸操作激活时以多少不透明度显示（通常在0到1之间）。&lt;/p&gt;
&lt;h4 id=&quot;TouchableWithoutFeedback&quot;&gt;&lt;a href=&quot;#TouchableWithoutFeedback&quot; class=&quot;headerlink&quot; title=&quot;TouchableWithoutFeedback&quot;&gt;&lt;/a&gt;TouchableWithoutFeedback&lt;/h4&gt;&lt;p&gt;一般不要使用。&lt;/p&gt;
&lt;h3 id=&quot;NavigatorIOS组件&quot;&gt;&lt;a href=&quot;#NavigatorIOS组件&quot; class=&quot;headerlink&quot; title=&quot;NavigatorIOS组件&quot;&gt;&lt;/a&gt;NavigatorIOS组件&lt;/h3&gt;&lt;p&gt;对UIKit Navigation的封装，实质就是调用了这个。属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;barTintColor：导航条的背景颜色&lt;/li&gt;
&lt;li&gt;initialRoute:初始化路由&lt;/li&gt;
&lt;li&gt;itemWrapperStyle:设置每个页面的背景颜色&lt;/li&gt;
&lt;li&gt;navigationHidden:是否隐藏阴影&lt;/li&gt;
&lt;li&gt;tintColor:导航条上的按钮的颜色的设置&lt;/li&gt;
&lt;li&gt;titleTextColor：导航栏上字体的颜色&lt;/li&gt;
&lt;li&gt;translucent：导航条是否是半透明的&lt;/li&gt;
&lt;li&gt;push到新的页面&lt;/li&gt;
&lt;li&gt;pop返回&lt;/li&gt;
&lt;li&gt;replace替换当前路由&lt;/li&gt;
&lt;li&gt;replacePrevious(route)替换前一个页面的视图并且回退过去&lt;/li&gt;
&lt;li&gt;resetTo(reset)取代最顶层的路由并且回退过去&lt;/li&gt;
&lt;li&gt;popToTop：回到最上层的视图&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;&lt;span class=&quot;type&quot;&gt;Provider&lt;/span&gt; store=&amp;#123;store&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;&lt;span class=&quot;type&quot;&gt;Navigator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    initialRoute=&amp;#123;&amp;#123;component: &lt;span class=&quot;type&quot;&gt;MainPage&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    renderScene=&amp;#123;(route, navigator) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;route.component &amp;#123;...route.args&amp;#125; navigator=&amp;#123;navigator&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/&lt;span class=&quot;type&quot;&gt;Provider&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    componentDidMount()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;SplashScreen&lt;/span&gt;.hide();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;TabBarIOS组件&quot;&gt;&lt;a href=&quot;#TabBarIOS组件&quot; class=&quot;headerlink&quot; title=&quot;TabBarIOS组件&quot;&gt;&lt;/a&gt;TabBarIOS组件&lt;/h3&gt;&lt;p&gt;有TabBarIOS和TabBarIOS.item两种，后者是前者的附属组件。&lt;br&gt;TabBarIOS属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;barTintColor：标签栏的背景颜色。&lt;/li&gt;
&lt;li&gt;tintColor:当前被选中的标签图标的颜色。&lt;/li&gt;
&lt;li&gt;unselectedItemTintColor string&lt;br&gt;当前没有被选中的标签图标的颜色。仅在iOS 10及以上版本有效.&lt;/li&gt;
&lt;li&gt;translucent bool 一个布尔值，决定标签栏是否需要半透明化。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TabBarIOS.Item属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;badge：在图标右上角显示一个红色的气泡。&lt;/li&gt;
&lt;li&gt;icon 给当前标签指定一个自定义的图标。如果定义了systemIcon属性， 这个属性会被忽略。&lt;/li&gt;
&lt;li&gt;onPress 当此标签被选中时调用。你应该修改组件的状态来使得selected={true}。&lt;/li&gt;
&lt;li&gt;selected 这个属性决定了子视图是否可见。&lt;/li&gt;
&lt;li&gt;selectedIcon 当标签被选中的时候显示的自定义图标。如果定义了systemIcon属性，这个属性会被忽略。如果定义了icon而没定义这个属性，在选中的时候图标会染上蓝色。&lt;/li&gt;
&lt;li&gt;systemIcon enum(‘bookmarks’, ‘contacts’, ‘downloads’, ‘favorites’, ‘featured’, ‘history’, ‘more’, ‘most-recent’, ‘most-viewed’, ‘recents’, ‘search’, ‘top-rated’) 一些预定义的系统图标。注意如果你使用了此属性，标题和自定义图标都会被覆盖为系统定义的值。&lt;/li&gt;
&lt;li&gt;title在图标下面显示的标题文字。如果定义了systemIcon属性，这个属性会被忽略。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Image&quot;&gt;&lt;a href=&quot;#Image&quot; class=&quot;headerlink&quot; title=&quot;Image&quot;&gt;&lt;/a&gt;Image&lt;/h3&gt;&lt;p&gt;一个用于显示多种不同类型图片的React组件，包括网络图片、静态资源、临时的本地图片、以及本地磁盘上的图片（如相册）等。详细用法参阅图片文档。&lt;br&gt;resizeMode enum(‘cover’, ‘contain’, ‘stretch’, ‘repeat’, ‘center’)&lt;br&gt;决定当组件尺寸和图片尺寸不成比例的时候如何调整图片的大小。&lt;/p&gt;
&lt;h3 id=&quot;FlatList&quot;&gt;&lt;a href=&quot;#FlatList&quot; class=&quot;headerlink&quot; title=&quot;FlatList&quot;&gt;&lt;/a&gt;FlatList&lt;/h3&gt;&lt;p&gt;高性能的简单列表组件，支持下面这些常用的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全跨平台。&lt;/li&gt;
&lt;li&gt;支持水平布局模式。&lt;/li&gt;
&lt;li&gt;行组件显示或隐藏时可配置回调事件。&lt;/li&gt;
&lt;li&gt;支持单独的头部组件。&lt;/li&gt;
&lt;li&gt;支持单独的尾部组件。&lt;/li&gt;
&lt;li&gt;支持自定义行间分隔线。&lt;/li&gt;
&lt;li&gt;支持下拉刷新。&lt;/li&gt;
&lt;li&gt;支持上拉加载。&lt;/li&gt;
&lt;li&gt;支持跳转到指定行（ScrollToIndex）。&lt;br&gt;如果需要分组/类/区（section），请使用&lt;sectionlist&gt;。&lt;h3 id=&quot;WebView&quot;&gt;&lt;a href=&quot;#WebView&quot; class=&quot;headerlink&quot; title=&quot;WebView&quot;&gt;&lt;/a&gt;WebView&lt;/h3&gt;创建一个原生的WebView，可以用于访问一个网页。&lt;br&gt;属性：&lt;/sectionlist&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;onError 加载失败时调用。&lt;/li&gt;
&lt;li&gt;onLoad 加载成功时调用。&lt;/li&gt;
&lt;li&gt;onLoadEnd 加载结束时（无论成功或失败）调用。&lt;/li&gt;
&lt;li&gt;onLoadStart 加载开始时调用。&lt;/li&gt;
&lt;li&gt;onMessage 在webview内部的网页中调用window.postMessage方法时可以触发此属性对应的函数，从而实现网页和RN之间的数据交换。 设置此属性的同时会在webview中注入一个postMessage的全局函数并覆盖可能已经存在的同名实现。&lt;br&gt;网页端的window.postMessage只发送一个参数data，此参数封装在RN端的event对象中，即event.nativeEvent.data。data 只能是一个字符串。&lt;/li&gt;
&lt;li&gt;injectedJavaScript 设置在网页加载之前注入的一段JS代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h1&gt;&lt;h3 id=&quot;AppRegistry&quot;&gt;&lt;a href=&quot;#AppRegistry&quot; class=&quot;headerlink&quot; title=&quot;AppRegistry&quot;&gt;&lt;/a&gt;AppRegistry&lt;/h3&gt;&lt;p&gt;其中iOS代码的入口在index.ios.js中，&lt;br&gt;在index.ios.js中注册入口：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AppRegistry.registerComponent(&amp;#39;GankIO&amp;#39;, () =&amp;gt; App);&lt;/code&gt;当注册完应用程序组件后，Native的系统就会加载jsbundle文件并且触发AppRegistry.runApplication运行程序。AppRegistry有以下的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;registerConfig:静态方法，注册配置&lt;/li&gt;
&lt;li&gt;registerComponent注册入口组件&lt;/li&gt;
&lt;li&gt;registerRunnable：注册函数监听&lt;/li&gt;
&lt;li&gt;getAppKey:获取registerRunnable注册的监听键&lt;/li&gt;
&lt;li&gt;runApplication运行程序&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;AlertIOS&quot;&gt;&lt;a href=&quot;#AlertIOS&quot; class=&quot;headerlink&quot; title=&quot;AlertIOS&quot;&gt;&lt;/a&gt;AlertIOS&lt;/h3&gt;&lt;p&gt;启动一个提示对话框，包含对应的标题和信息。&lt;/p&gt;
&lt;p&gt;你还可以指定一系列的按钮，点击对应的按钮会调用对应的onPress回调并且关闭提示框。默认情况下，对话框会仅有一个’确定’按钮。&lt;/p&gt;
&lt;h3 id=&quot;PixelRatio&quot;&gt;&lt;a href=&quot;#PixelRatio&quot; class=&quot;headerlink&quot; title=&quot;PixelRatio&quot;&gt;&lt;/a&gt;PixelRatio&lt;/h3&gt;&lt;p&gt;告知开发者像素的密度。&lt;br&gt;根据像素密度获取指定大小的图片。&lt;br&gt;像素网格对齐。&lt;/p&gt;
&lt;h3 id=&quot;AppState&quot;&gt;&lt;a href=&quot;#AppState&quot; class=&quot;headerlink&quot; title=&quot;AppState&quot;&gt;&lt;/a&gt;AppState&lt;/h3&gt;&lt;p&gt;AppState能告诉你应用当前是在前台还是在后台，并且能在状态变化的时候通知你。&lt;/p&gt;
&lt;p&gt;AppState通常在处理推送通知的时候用来决定内容和对应的行为。&lt;br&gt;active - 应用正在前台运行&lt;br&gt;background - 应用正在后台运行。用户既可能在别的应用中，也可能在桌面。&lt;br&gt;inactive - 此状态表示应用正在前后台的切换过程中，或是处在系统的多任务视图，又或是处在来电状态中。&lt;/p&gt;
&lt;h3 id=&quot;CameraRoll&quot;&gt;&lt;a href=&quot;#CameraRoll&quot; class=&quot;headerlink&quot; title=&quot;CameraRoll&quot;&gt;&lt;/a&gt;CameraRoll&lt;/h3&gt;&lt;p&gt;CameraRoll模块提供了访问本地相册的功能。在iOS上使用这个模块之前，你需要先链接RCTCameraRoll库。&lt;br&gt;从iOS10开始，访问相册需要用户授权。你需要在Info.plist中添加一条名为NSCameraUsageDescription的键，然后在其值中填写向用户请求权限的具体描述。编辑完成后这个键在Xcode中实际会显示为Privacy - Camera Usage Description。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;static saveImageWithTag(tag)&lt;br&gt;保存一个图片到相册。&lt;/li&gt;
&lt;li&gt;static saveToCameraRoll&lt;/li&gt;
&lt;li&gt;getPhotos(params: object)&lt;br&gt;返回一个带有图片标识符对象的Promise。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Geolocation&quot;&gt;&lt;a href=&quot;#Geolocation&quot; class=&quot;headerlink&quot; title=&quot;Geolocation&quot;&gt;&lt;/a&gt;Geolocation&lt;/h3&gt;&lt;p&gt;你需要在Info.plist中增加NSLocationWhenInUseUsageDescription字段来启用定位功能。如果你使用react-native init创建项目，定位会被默认启用。&lt;br&gt;属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;getCurrentPosition(geo_success: Function, geo_error?: Function, geo_options?: GeoOptions) 获取当前位置，&lt;br&gt;成功时会调用geo_success回调，参数中包含最新的位置信息。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;watchPosition(success: Function, error?: Function, options?: GeoOptions) 持续监听位置，每当位置变化之后都调用success回调。支持的选项：timeout (ms), maximumAge (ms), enableHighAccuracy (bool)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;static clearWatch(watchID: number) 依据ID清除检测&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;stopObserving()停止检测&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;AsyncStorage&quot;&gt;&lt;a href=&quot;#AsyncStorage&quot; class=&quot;headerlink&quot; title=&quot;AsyncStorage&quot;&gt;&lt;/a&gt;AsyncStorage&lt;/h3&gt;&lt;p&gt;AsyncStorage是一个简单的、异步的、持久化的Key-Value存储系统，它对于App来说是全局性的。它用来代替LocalStorage。&lt;/p&gt;
&lt;p&gt;每个方法都有一个回调函数，回调函数的第一个参数都是错误对象，如果发生错误就会展示错误对象，否则为null。所有方法执行后，都会返回一个Promise对象。&lt;br&gt;方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;static getItem(key: string, callback?: ?(error: ?Error, result: ?string) =&amp;gt; void)&lt;br&gt;根据键来获取值，获取的结果会在回调函数，第一个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;static setItem(key: string, value: string, callback?: ?(error: ?Error) =&amp;gt; void) 设置键值对&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;static removeItem(key: string, callback?: ?(error: ?Error) =&amp;gt; void)&lt;br&gt;根据键值移除对象&lt;/li&gt;
&lt;li&gt;static mergeItem(key: string, value: string, callback?: ?(error: ?Error) =&amp;gt; void) 合并现有值和输入值。&lt;/li&gt;
&lt;li&gt;static clear(callback?: ?(error: ?Error) =&amp;gt; void) qing&lt;/li&gt;
&lt;li&gt;static getAllKeys(callback?: ?(error: ?Error, keys: ?Array&lt;string&gt;) =&amp;gt; void)&lt;br&gt;获取所有的键。&lt;/string&gt;&lt;/li&gt;
&lt;li&gt;static flushGetRequests() 清除所有进行中的查询操作。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;static multiGet(keys: Array&lt;string&gt;, callback?: ?(errors: ?Array&lt;error&gt;, result: ?Array&lt;array&lt;string&gt;&amp;gt;) =&amp;gt; void)&lt;br&gt;获取多项&lt;br&gt;multiGet([‘k1’, ‘k2’], cb) -&amp;gt; cb([[‘k1’, ‘val1’], [‘k2’, ‘val2’]])&lt;/array&lt;string&gt;&lt;/error&gt;&lt;/string&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;static multiSet(keyValuePairs: Array&lt;array&lt;string&gt;&amp;gt;, callback?: ?(errors: ?Array&lt;error&gt;) =&amp;gt; void)&lt;br&gt;设置多项。&lt;/error&gt;&lt;/array&lt;string&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;multiSet和multiMerge都接受一个与multiGet输出值一致的key-value数组的数组。返回一个Promise对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;multiSet([[‘k1’, ‘val1’], [‘k2’, ‘val2’]], cb);&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;static multiRemove(keys: Array&lt;string&gt;, callback?: ?(errors: ?Array&lt;error&gt;) =&amp;gt; void) &lt;/error&gt;&lt;/string&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;删除所有键在keys数组中的数据。返回一个Promise对象。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;static multiMerge(keyValuePairs: Array&lt;array&lt;string&gt;&amp;gt;, callback?: ?(errors: ?Array&lt;error&gt;) =&amp;gt; void) 多个键值对合并。&lt;/error&gt;&lt;/array&lt;string&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还没有被所有原生实现都支持。&lt;/p&gt;
&lt;h3 id=&quot;定时器&quot;&gt;&lt;a href=&quot;#定时器&quot; class=&quot;headerlink&quot; title=&quot;定时器&quot;&gt;&lt;/a&gt;定时器&lt;/h3&gt;&lt;h4 id=&quot;setTimeout&quot;&gt;&lt;a href=&quot;#setTimeout&quot; class=&quot;headerlink&quot; title=&quot;setTimeout&quot;&gt;&lt;/a&gt;setTimeout&lt;/h4&gt;&lt;p&gt;用于设定一个定时任务&lt;/p&gt;
&lt;h4 id=&quot;setInterval&quot;&gt;&lt;a href=&quot;#setInterval&quot; class=&quot;headerlink&quot; title=&quot;setInterval&quot;&gt;&lt;/a&gt;setInterval&lt;/h4&gt;&lt;p&gt;主要用于设定循环&lt;/p&gt;
&lt;h4 id=&quot;setImmediate&quot;&gt;&lt;a href=&quot;#setImmediate&quot; class=&quot;headerlink&quot; title=&quot;setImmediate&quot;&gt;&lt;/a&gt;setImmediate&lt;/h4&gt;&lt;p&gt;用于设置立即执行的任务&lt;/p&gt;
&lt;h2 id=&quot;网络数据请求&quot;&gt;&lt;a href=&quot;#网络数据请求&quot; class=&quot;headerlink&quot; title=&quot;网络数据请求&quot;&gt;&lt;/a&gt;网络数据请求&lt;/h2&gt;&lt;h3 id=&quot;XMLHttpRequest-即俗称的ajax&quot;&gt;&lt;a href=&quot;#XMLHttpRequest-即俗称的ajax&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest(即俗称的ajax)&quot;&gt;&lt;/a&gt;XMLHttpRequest(即俗称的ajax)&lt;/h3&gt;&lt;p&gt;与web的一样，                                                                        &lt;/p&gt;
&lt;h3 id=&quot;Fetch&quot;&gt;&lt;a href=&quot;#Fetch&quot; class=&quot;headerlink&quot; title=&quot;Fetch&quot;&gt;&lt;/a&gt;Fetch&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;fetch(&amp;apos;https://mywebsite.com/endpoint/&amp;apos;, {
  method: &amp;apos;POST&amp;apos;,
  headers: {
    &amp;apos;Accept&amp;apos;: &amp;apos;application/json&amp;apos;,
    &amp;apos;Content-Type&amp;apos;: &amp;apos;application/json&amp;apos;,
  },
  body: JSON.stringify({
    firstParam: &amp;apos;yourValue&amp;apos;,
    secondParam: &amp;apos;yourOtherValue&amp;apos;,
  })
})
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;在学习了React-Native的搭建以后，然后就在网上找了一些Demo来学习，并且开始练习。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习React Native入门</title>
    <link href="http://peilinghui.com/2017/03/02/%E5%AD%A6%E4%B9%A0React-Native%E5%85%A5%E9%97%A8/"/>
    <id>http://peilinghui.com/2017/03/02/学习React-Native入门/</id>
    <published>2017-03-02T09:51:37.000Z</published>
    <updated>2017-07-24T08:27:32.000Z</updated>
    
    <content type="html">&lt;p&gt;抽时间学习一下&lt;a href=&quot;https://github.com/facebook/react-native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native&lt;/a&gt;.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;React-Native-简介&quot;&gt;&lt;a href=&quot;#React-Native-简介&quot; class=&quot;headerlink&quot; title=&quot;React Native 简介&quot;&gt;&lt;/a&gt;React Native 简介&lt;/h1&gt;&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装Node.js&lt;br&gt;下载node.js：&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nodejs.org/en/download/&lt;/a&gt;&lt;br&gt;或者安装brew来安装node.js.&lt;br&gt;&lt;code&gt;node -v&lt;/code&gt;最新的版本&lt;/li&gt;
&lt;li&gt;安装React Native&lt;br&gt;先通过HomeBrew安装watchman和flow&lt;br&gt;&lt;code&gt;brew install watchman&lt;/code&gt;&lt;br&gt;&lt;code&gt;brew install flow&lt;/code&gt;&lt;br&gt;再通过npm安装react-native-cli的工具&lt;br&gt;&lt;code&gt;sudo npm install -g react-native-cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用NVM来管理node.js版本&lt;br&gt;&lt;code&gt;git clone https://github.com/creationix/nvm&lt;/code&gt;或者&lt;code&gt;git clone https://github.com/cnpm/nvm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建项目   &lt;/li&gt;
&lt;li&gt;安装命令行工具：sudo npm install -g react-native-cli&lt;/li&gt;
&lt;li&gt;创建项目Hello：用react-native init命令&lt;code&gt;react-native init Hello&lt;/code&gt;，打开Xcode文件后运行，自动启动终端和模拟器。然后模拟器就出现了字，显示成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;在安卓上运行的环境配置&quot;&gt;&lt;a href=&quot;#在安卓上运行的环境配置&quot; class=&quot;headerlink&quot; title=&quot;在安卓上运行的环境配置&quot;&gt;&lt;/a&gt;在安卓上运行的环境配置&lt;/h2&gt;&lt;h4 id=&quot;基础软件安装&quot;&gt;&lt;a href=&quot;#基础软件安装&quot; class=&quot;headerlink&quot; title=&quot;基础软件安装&quot;&gt;&lt;/a&gt;基础软件安装&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装JDK jdk-8u101-macosx-x64.dmg&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看版本，命令行中运行javac -version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Android Studio&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;勾选Performance和Android Virtual Device&lt;/li&gt;
&lt;li&gt;安装相关SDK Platforms，记得勾选Show Package Details&lt;/li&gt;
&lt;li&gt;安装SDK Tools 必须是这个版本 Android SDK Build-Tools 23.0.1，记得勾选Show Package Details。&lt;/li&gt;
&lt;li&gt;ANDROID_HOME环境变量设置。（见下面 环境变量配置）方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安装 免费VirtualBox虚拟机&lt;/li&gt;
&lt;li&gt;安装模拟器Genymotion&lt;ul&gt;
&lt;li&gt;注册帐号&lt;/li&gt;
&lt;li&gt;下载Genymotion&lt;/li&gt;
&lt;li&gt;安装Genymotion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;坑： brew install android-sdk不支持了。&lt;br&gt;应该先用brew tap caskroom/cask&lt;br&gt;再用brew cask install android-sdk还有brew cask install android-platform-tools&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;环境变量配置&quot;&gt;&lt;a href=&quot;#环境变量配置&quot; class=&quot;headerlink&quot; title=&quot;环境变量配置&quot;&gt;&lt;/a&gt;环境变量配置&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;把Android SDK的tools和platform-tools目录添加到PATH变量中，以便在终端中运行一些Android工具，例如android avd或是adb logcat等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在~/.bash_profile中添加(如果你安装的 ZSH 则在 ~/.zshrc中添加)：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; ANDROID_SDK_ROOT=/Users/peilinghui/Library/Android/sdk &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PATH=&lt;span class=&quot;string&quot;&gt;&quot;/usr/local/share/android-sdk/platform-tools:&lt;span class=&quot;variable&quot;&gt;$&amp;#123;PATH&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;改完需要运行source ~/.bash_profile （注意：你的SDK的具体路径可能不同）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必须在Android studio中配置SDK的环境地址，然后下载component的相关东西。&lt;/li&gt;
&lt;li&gt;在genymotion中的setting-ADB-设置SDK的地址为你配置的地址。一定要重启genymotion！！！一定要重启！一定要重启！！重要的事情说三次，因为没重启一直不成功。。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;在执行react-native run-android一直不成功的时候，一直说是&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* What went &lt;span class=&quot;string&quot;&gt;wrong:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Execution failed &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; task &lt;span class=&quot;string&quot;&gt;&#39;:app:installDebug&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;com.android.builder.testing.api.&lt;span class=&quot;string&quot;&gt;DeviceException:&lt;/span&gt; Could not create ADB Bridge. ADB &lt;span class=&quot;string&quot;&gt;location:&lt;/span&gt; &lt;span class=&quot;regexp&quot;&gt;/Applications/&lt;/span&gt;ADT&lt;span class=&quot;regexp&quot;&gt;/sdk/&lt;/span&gt;platform-tools/adb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;的报错，然后按上面3就解决了，然后或者在Android文件夹下app/build/outputs/apk,drag the app-debug.apk to the genymotion.now it works。&lt;/p&gt;
&lt;p&gt;GET IT！&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;测试服务端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这时候可以用浏览器访问&lt;br&gt;&lt;a href=&quot;http://localhost:8081/index.android.bundle?platform=android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8081/index.android.bundle?platform=android&lt;/a&gt;&lt;br&gt;如果可以访问表示服务器端已经可以了。&lt;/p&gt;
&lt;h2 id=&quot;debug的方式&quot;&gt;&lt;a href=&quot;#debug的方式&quot; class=&quot;headerlink&quot; title=&quot;debug的方式&quot;&gt;&lt;/a&gt;debug的方式&lt;/h2&gt;&lt;p&gt;在模拟器上点击commend+D，出现下面的界面。开始调试。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;reload：刷新页面，只有修改了JS文件的时候刷新有效。&lt;/li&gt;
&lt;li&gt;Debug Remote JS主要是在chrome上，开发者工具(Commod)&lt;br&gt;APPdelegate中改bug，打开注释，进行debug。或者使用工具nuclide。&lt;/li&gt;
&lt;li&gt;Enable Live Reload：自动刷新，&lt;h1 id=&quot;React-Native组件&quot;&gt;&lt;a href=&quot;#React-Native组件&quot; class=&quot;headerlink&quot; title=&quot;React Native组件&quot;&gt;&lt;/a&gt;React Native组件&lt;/h1&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/hello-world.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React JS&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://nuclide.io/docs/quick-start/getting-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nuclide插件&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Render-amp-JSX&quot;&gt;&lt;a href=&quot;#Render-amp-JSX&quot; class=&quot;headerlink&quot; title=&quot;Render&amp;amp;JSX&quot;&gt;&lt;/a&gt;Render&amp;amp;JSX&lt;/h2&gt;&lt;figure class=&quot;highlight dust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;render() &lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;variable&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;txt&lt;/span&gt; = &#39;&lt;span class=&quot;variable&quot;&gt;Hello&lt;/span&gt;&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;variable&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;say&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;name&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;return&lt;/span&gt; &#39;&lt;span class=&quot;variable&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;am&lt;/span&gt; &#39;+&lt;span class=&quot;variable&quot;&gt;name&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;View&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;This is a title!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;txt&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;View&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;source&lt;/span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;require&lt;/span&gt;(&#39;&lt;span class=&quot;variable&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/img&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/bg.png&lt;/span&gt;&#39;)&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Image&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;source&lt;/span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;require&lt;/span&gt;(&#39;&lt;span class=&quot;variable&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/img&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/icon.png&lt;/span&gt;&#39;)&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;say&lt;/span&gt;(&#39;&lt;span class=&quot;variable&quot;&gt;React&lt;/span&gt;&#39;)&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;View&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;View&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;组件生命周期&quot;&gt;&lt;a href=&quot;#组件生命周期&quot; class=&quot;headerlink&quot; title=&quot;组件生命周期&quot;&gt;&lt;/a&gt;组件生命周期&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;初始化&lt;ul&gt;
&lt;li&gt;getDefaultProps&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getInitialState&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;componentWillMount&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;render&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;componentDidMount&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;componentWillReceiveProps&lt;/li&gt;
&lt;li&gt;&lt;p&gt;shouldComponentUpdate&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;shouldComponentUpdate(nextProps, nextState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;command&quot;&gt;return&lt;/span&gt; nextProps.&lt;span class=&quot;property&quot;&gt;id&lt;/span&gt; !== this.props.&lt;span class=&quot;property&quot;&gt;id&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;componentWillUpdate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;render&lt;/li&gt;
&lt;li&gt;componentDidUpdate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;销毁&lt;ul&gt;
&lt;li&gt;componentWillUnmount&lt;br&gt;更多：&lt;a href=&quot;https://race604.com/react-native-component-lifecycle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://race604.com/react-native-component-lifecycle/&lt;/a&gt;&lt;h2 id=&quot;Props-amp-States&quot;&gt;&lt;a href=&quot;#Props-amp-States&quot; class=&quot;headerlink&quot; title=&quot;Props &amp;amp; States&quot;&gt;&lt;/a&gt;Props &amp;amp; States&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Props:properties属性，在初始化的时候传入并且可以显示不同的状态。&lt;br&gt;props不可变&lt;br&gt;states不可变&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以在浏览器中debug&lt;/p&gt;
&lt;h2 id=&quot;Styles&quot;&gt;&lt;a href=&quot;#Styles&quot; class=&quot;headerlink&quot; title=&quot;Styles&quot;&gt;&lt;/a&gt;Styles&lt;/h2&gt;&lt;h2 id=&quot;flexbox布局&quot;&gt;&lt;a href=&quot;#flexbox布局&quot; class=&quot;headerlink&quot; title=&quot;flexbox布局&quot;&gt;&lt;/a&gt;flexbox布局&lt;/h2&gt;&lt;p&gt;可以开发出动态宽高自适应的UI布局。&lt;br&gt;位置：position。取值为relative或者absolute。当设置为relative的时候，是表示当前组件距离上一个同级组件的距离。当设置为absolute的时候，是表示当前组件距离父组件的距离来描述位置top,bottom,left,right.与宽高相关的有：width，height，maxheight，maxwidth，minheight,minwidth。  &lt;/p&gt;
&lt;h3 id=&quot;排列子组件&quot;&gt;&lt;a href=&quot;#排列子组件&quot; class=&quot;headerlink&quot; title=&quot;排列子组件&quot;&gt;&lt;/a&gt;排列子组件&lt;/h3&gt;&lt;p&gt;优点Lbuxuyao指定子组件的绝对位置，也不需要根据运行时屏幕大小动态计算子组件的大小，而是通过排列一个个长方形来进行布局。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;flexDirection&lt;/strong&gt;&lt;br&gt;决定了组件内部的子组件是如何排列的。row、row-reverse、column、column-reverse。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;flexWrap&lt;/strong&gt;&lt;br&gt;flexWrap取值为warp，并且alignItem键不能取值为”stretch”的时候才能实现子组件的自动换行排列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;justifyContent&lt;/strong&gt;&lt;br&gt;定义在一个方向上如何排列子组件，flex-start、flex-end、center、space-between、space-around 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;alignItems&lt;/strong&gt;&lt;br&gt;定义了view组件中所有子组件的对齐股则。flex-start（顶部对齐）、flex-end（底部对齐）、center（中部对齐）、stretch（拉长对齐）。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;边框border，空隙margin，填充Padding&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Absolute-amp-Relative&quot;&gt;&lt;a href=&quot;#Absolute-amp-Relative&quot; class=&quot;headerlink&quot; title=&quot;Absolute &amp;amp; Relative&quot;&gt;&lt;/a&gt;Absolute &amp;amp; Relative&lt;/h3&gt;&lt;h3 id=&quot;Size-amp-Dimensions-amp-onLayout&quot;&gt;&lt;a href=&quot;#Size-amp-Dimensions-amp-onLayout&quot; class=&quot;headerlink&quot; title=&quot;Size &amp;amp; Dimensions &amp;amp; onLayout&quot;&gt;&lt;/a&gt;Size &amp;amp; Dimensions &amp;amp; onLayout&lt;/h3&gt;&lt;h2 id=&quot;Architecture&quot;&gt;&lt;a href=&quot;#Architecture&quot; class=&quot;headerlink&quot; title=&quot;Architecture&quot;&gt;&lt;/a&gt;Architecture&lt;/h2&gt;&lt;p&gt;MVC的问题：&lt;/p&gt;
&lt;h3 id=&quot;Redux&quot;&gt;&lt;a href=&quot;#Redux&quot; class=&quot;headerlink&quot; title=&quot;Redux&quot;&gt;&lt;/a&gt;Redux&lt;/h3&gt;&lt;h1 id=&quot;学习资料&quot;&gt;&lt;a href=&quot;#学习资料&quot; class=&quot;headerlink&quot; title=&quot;学习资料&quot;&gt;&lt;/a&gt;学习资料&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/reactnativecn/react-native-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React-Native学习指南&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.gitbook.com/book/unbug/react-native-training/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gitbook&lt;/a&gt;—–&lt;br&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLC_rYRxEnwQGLQqrHR0aho33U6DCeJamC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;对应的视频&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/crazycodeboy/react-native-awesome&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native学习资源精选仓库&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.devio.org/tags/#React Native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;抽时间学习一下&lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;React Native&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习React知识</title>
    <link href="http://peilinghui.com/2017/02/22/%E5%AD%A6%E4%B9%A0React%E7%9F%A5%E8%AF%86/"/>
    <id>http://peilinghui.com/2017/02/22/学习React知识/</id>
    <published>2017-02-22T06:26:54.000Z</published>
    <updated>2017-07-24T08:43:48.000Z</updated>
    
    <content type="html">&lt;p&gt;React是JavaScript的库，把用户页面抽象成组件。在学习React-native前，先了解一下React。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/facebook/react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;了解React&quot;&gt;&lt;a href=&quot;#了解React&quot; class=&quot;headerlink&quot; title=&quot;了解React&quot;&gt;&lt;/a&gt;了解React&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Virtual DOM提升了React的性能。React可以映射为对应的原生控件，所以React-Native就可以实现一次编程，多次使用。&lt;/li&gt;
&lt;li&gt;函数式编程的思想&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;JSX的语法编写&quot;&gt;&lt;a href=&quot;#JSX的语法编写&quot; class=&quot;headerlink&quot; title=&quot;JSX的语法编写&quot;&gt;&lt;/a&gt;JSX的语法编写&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;XML语法：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;定义标签时，只允许被一个标签包裹&lt;/li&gt;
&lt;li&gt;标签一定要闭合.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;元素的类型和属性&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;DOM元素的属性是标准规范属性，除了Class和for，转换为className和htmlFor.&lt;/li&gt;
&lt;li&gt;小写首字母对应的是DOM元素，大写首字母对应的是组件元素。&lt;br&gt;JSX特有的属性表达：&lt;/li&gt;
&lt;li&gt;Boolean属性：省略表示bool值设为了true，要传false必须用属性表达式，如：disable、require、checked、readonly&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Flux架构&quot;&gt;&lt;a href=&quot;#Flux架构&quot; class=&quot;headerlink&quot; title=&quot;Flux架构&quot;&gt;&lt;/a&gt;Flux架构&lt;/h1&gt;&lt;p&gt;不是MVC的架构，Flux三大部分组成：1. dispatcher、store、view。dispatcher负责分发事件，store负责保存数据、view负责订阅store中的数据，并使用这些数据渲染相应的页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与MVC的主要区别：&lt;/strong&gt;&lt;br&gt;没有职责明确的Controller，存在一个Controller-view的角色，将view和store进行绑定，并没有Controller需要承担的复杂的逻辑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;dispatcher与action&lt;/strong&gt;&lt;br&gt;dispatcher的实现就是下面两个API:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;.register(callback)方法用来注册一个监听器。&lt;br&gt;.dispatch(action)用来分发一个action。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;action是一个普通的JavaScript对象，一般包含type、payload字段，用于描述一个事件以及需要改变的相关数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;store&lt;/strong&gt;&lt;br&gt;负责保存数据，并且修改数据的逻辑，调用dispatcher的register(callback)方法将自己注册为一个监听器。&lt;br&gt;当.dispatch(action)用来分发一个action时，store注册的监听器就会被调用，同时得到这个action作为参数。store之暴露getter不暴露setter，只能读取不能修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Controller-view&lt;/strong&gt;&lt;br&gt;最顶层view，主要进行store与React组件(view层)之间的数据的绑定，定义数据更新以及传递的方式。会调用store保留的getter获取存储其中的数据并设置为自己的state，在render时以props的形式传给自己的子组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;view&lt;/strong&gt;&lt;br&gt;React组件扮演。结合Angular、Vue来发挥Flux的能力。&lt;br&gt;一条特殊的约定：&lt;strong&gt;Flux的view不能直接修改数据，如果页面操作需要修改数据，则必须使用dispatcher分发一个action。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;actionCreator&lt;/strong&gt;&lt;br&gt;用来创造action的。为什么需要？因为在分发action的时候代码是冗余的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Redux架构&quot;&gt;&lt;a href=&quot;#Redux架构&quot; class=&quot;headerlink&quot; title=&quot;Redux架构&quot;&gt;&lt;/a&gt;Redux架构&lt;/h1&gt;&lt;h2 id=&quot;Redux简介&quot;&gt;&lt;a href=&quot;#Redux简介&quot; class=&quot;headerlink&quot; title=&quot;Redux简介&quot;&gt;&lt;/a&gt;Redux简介&lt;/h2&gt;&lt;p&gt;Redux的核心代码是一个库，类似Flux的架构思想，&lt;/p&gt;
&lt;h3 id=&quot;三大原则&quot;&gt;&lt;a href=&quot;#三大原则&quot; class=&quot;headerlink&quot; title=&quot;三大原则&quot;&gt;&lt;/a&gt;三大原则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单一数据源&lt;br&gt;一个应用永远只有唯一的一个数据源，整个应用状态都保存在一个对象中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态是只读的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Flux中store没有setter只有getter，而Redux中没有store，只有reducer，根据当前触发的action对当前应用state进行迭代。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;状态修改均由纯函数完成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Redux与Flux最大的不同。&lt;br&gt;在Flux中，我们在actionCreator里调用APPDispatcher.dispatch方法来触发action，直接修改了store中数据.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;React是JavaScript的库，把用户页面抽象成组件。在学习React-native前，先了解一下React。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
